<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PreMergedIolsSetupClient</name>
    </assembly>
    <members>
        <member name="T:Connectivity.IolsSetupComponent.IolsStatusCode">
            <summary>
            The returned status of the API call
            </summary>
        </member>
        <member name="T:Connectivity.IolsSetupComponent.IolsControlAction">
            <summary>
            The action for specific server or service
            </summary>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupData`2.AddData(`0,`1)">
            <summary>
            Add Data into Data Structure
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupData`2.RemoveData(`0)">
            <summary>
            Remove data from data structure
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Connectivity.IolsSetupComponent.IolsSetupClient">
            <summary>
            IO Libraries Setup Client is to get information from installed IO Libraries or setup something special to IO Libraries to adapt to users' system.
            </summary>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.#ctor">
            <summary>
            Constructor of IolsSetupClient
            </summary>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.Dispose(System.Boolean)">
            <summary>
            Dispose implementation
            </summary>
            <param name="disposing">disposing managed resource or not</param>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.Dispose">
            <summary>
            Dispose IolsSetupClient object to release allocated resources properly
            </summary>
        </member>
        <member name="P:Connectivity.IolsSetupComponent.IolsSetupClient.Version">
            <summary>
            Get current version, for example: 18.0.xxxxx.x
            </summary>
            <example>
            The sample shows hot to get different format of installed IO Libraries versions
            <code>
            public static class GetIolsVersion
            {
                public static void Sample()
                {
                    using (IolsSetupClient client = new IolsSetupClient())
                    {
                        //Current Version: "18.0.xxxxx.x"
                        string ver = client.Version;
                        Console.WriteLine("IOLS CurrentVersion: " + ver);
            
                        //Legacy Current Version: "Version:82.0.xxxxx.x"
                        string legcyver = client.LegacyVersion;
                        Console.WriteLine("IOLS LegacyVersion: " + legcyver);
            
                        //Version Number: 1376063298
                        UInt32 vernumber = client.NumericVersion;
                        Console.WriteLine("IOLS Version Number: " + vernumber.ToString());
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Connectivity.IolsSetupComponent.IolsSetupClient.LegacyVersion">
            <summary>
            Get legacy style of version for example: Version:82.xxxxx.x
            </summary>
        </member>
        <member name="P:Connectivity.IolsSetupComponent.IolsSetupClient.NumericVersion">
            <summary>
            Get numeric version number, for example: 1376063298
            </summary>
        </member>
        <member name="P:Connectivity.IolsSetupComponent.IolsSetupClient.InstallDir">
            <summary>
            Get install directory
            </summary>
            <example>
            The sample shows how to get Install path of IO Libraries
            <code>
            public static class GetIolsInstallPath
            {
                public static void Sample()
                {
                    using (IolsSetupClient client = new IolsSetupClient())
                    {
                        Console.WriteLine("Installation Dir: " + client.InstallDir);
                        Console.WriteLine("Installation Dir32: " + client.InstallDir32);
                        Console.WriteLine("DataDir: " + client.DataDir);
                        Console.WriteLine("BinDir: " + client.BinDir);
                        Console.WriteLine("BinDir32: " + client.BinDir32);
                        Console.WriteLine("DriversDir: " + client.DriversDir);
                        Console.WriteLine("DriversDIr32: " + client.DriversDir32);
                        Console.WriteLine("IntfCfgDir: " + client.IntfCfgDir);
                        Console.WriteLine("CustomIoAgentsDir: " + client.CustomIoAgentsDir);
                        Console.WriteLine("CustomUiAgentsDIr: " + client.CustomUiAgentsDir);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Connectivity.IolsSetupComponent.IolsSetupClient.InstallDir32">
            <summary>
            Get 32bit install directory
            </summary>
        </member>
        <member name="P:Connectivity.IolsSetupComponent.IolsSetupClient.BinDir">
            <summary>
            Get bin directory
            </summary>
        </member>
        <member name="P:Connectivity.IolsSetupComponent.IolsSetupClient.BinDir32">
            <summary>
            Get 32bit bin directory
            </summary>
        </member>
        <member name="P:Connectivity.IolsSetupComponent.IolsSetupClient.DriversDir">
            <summary>
            Get tuilip driver directory
            </summary>
        </member>
        <member name="P:Connectivity.IolsSetupComponent.IolsSetupClient.DriversDir32">
            <summary>
            Get 32bit tulip driver directory
            </summary>
        </member>
        <member name="P:Connectivity.IolsSetupComponent.IolsSetupClient.DataDir">
            <summary>
            Get data directory
            </summary>
        </member>
        <member name="P:Connectivity.IolsSetupComponent.IolsSetupClient.IntfCfgDir">
            <summary>
            Get intfcfg directory
            </summary>
        </member>
        <member name="P:Connectivity.IolsSetupComponent.IolsSetupClient.CustomIoAgentsDir">
            <summary>
            Get CustomIoAgent directory
            </summary>
        </member>
        <member name="P:Connectivity.IolsSetupComponent.IolsSetupClient.CustomUiAgentsDir">
            <summary>
            Get CustomUiAgent directory
            </summary>
        </member>
        <member name="P:Connectivity.IolsSetupComponent.IolsSetupClient.Aliases">
            <summary>
            Get all existing aliases.
            </summary>
            <example>
            The sample shows how to get existing VISA aliaes in IO Libraries.
            <code>
            public static class GetAllAliases
            {
                public static void Sample()
                {
                    using (IolsSetupClient client = new IolsSetupClient())
                    {
                        List&lt;string&gt; ret = client.Aliases.ToList();
                        foreach (var v in ret)
                        {
                            Console.WriteLine("Alias Name: {0}", v);
                        }
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.DiscoveryServiceControl(Connectivity.IolsSetupComponent.IolsControlAction)">
            <summary>
            Control Discovery service to Stop/Start/Restart
            </summary>
            <param name="action">The specified action whcih is applied to discovery service</param>
            <returns>The status of this call</returns>
            <remarks>
            This call blocks until the specified action has completed. Note that the discovery service starting does not mean
            that all discovery and processing is complete. This may take a minute or more until the initial discovery is complete
            and all data is ready.
            </remarks>
            <example>
            The sample shows how to control running state of Discovery service
            <code>
            public static class DiscoverySerivceControl
            {
                public static void Sample()
                {
                    using (IolsSetupClient client = new IolsSetupClient())
                    {
                        //Stop Discovery Serivce
                        StatusCode code = client.DiscoveryServiceControl(ControlAction.STOP);
                        //Start Discovery Service
                        code = client.DiscoveryServiceControl(ControlAction.START);
                        //Restart Discovery Service
                        code = client.DiscoveryServiceControl(ControlAction.RESTART);
                   }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.StartConnectionExpert">
            <summary>
            Start Connection Expert
            </summary>
            <returns>The status of this call</returns>
            <example>
            The sample shows how to start Connection Expert
            <code>
            public static class LanuchConnectionExpert
            {
                public static void Sample()
                {
                    using (IolsSetupClient client = new IolsSetupClient())
                    {
                        StatusCode code = client.StartConnectionExpert();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.RemoveConfiguredDevices(System.String,System.Boolean)">
            <summary>
            Remove all instruments under specified interface, optionally the interface itself.
            </summary>
            <param name="visaInterfaceId">The specified interface</param>
            <param name="removeInterface">if true, remove interface as well</param>
            <returns>The status of this call</returns>
            <remarks>
            If the discovery service is running, it will stop the disocvery service. And This is not necessarily a permanet removal.
            If the instruments is still connected and accesible it may be added again when the discovery service scans for instruments
            of its type.
            </remarks>
            <example>
            The sample shows how to remove devices under specific VISA interface
            <code>
            public static class RemoveConfiguredDevices
            {
                public static void Sample()
                {
                    using (IolsSetupClient client = new IolsSetupClient())
                    {
                        StatusCode code = client.RemoveConfiguredDevices("TCPIP0", true); //Remove all devices TCPIP0 VISA interface
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.AddLocalhostLanDevice(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Add a localhost LAN device with specified remote device name
             </summary>
             <param name="remoteName">specified remote device name such as "inst0" for VXI11, "hislip0" for Hislip or "5025" for socket port</param>
             <param name="manufacturer">manufacturer name, the default value is "Keysight Technologies" if not specified</param>
             <param name="model">model number</param>
             <param name="serialNumber">serial number</param>
             <param name="firmwareRevision">firmware Revision</param>
             <returns>The status of this call</returns>
             <example>
             The sample shows how to add a localhost TCPIP device under TCPIP0 with specified remote device name
             <code>
            public static class AddLocalhostLanDevice
            {
                public static void Sample()
                {
                    using (IolsSetupClient client = new IolsSetupClient())
                    {
                        StatusCode status = client.AddLocalhostLanDevice("inst", "Keysight Technologies", "N6666", "US12345678", "FW 2.0.0");
                        status = client.AddLocalhostLanDevice("hislip0", "Keysight Technologies", "N6666", "US12345678", "FW 2.0.0");
                        status = client.AddLocalhostLanDevice("5025", "Keysight Technologies", "N6666", "US12345678", "FW 2.0.0");
                        status = client.AddLocalhostLanDevice("inst1", "Keysight Technologies", "N8888", "US87654321", "06.20.00610");
                        status = client.AddLocalhostLanDevice("hislip1", "Keysight Technologies", "N8888", "US87654321", "06.20.00610");
                        status = client.AddLocalhostLanDevice("5123", "Keysight Technologies", "N8888", "US87654321", "06.20.00610");
                    }
            
                }
            }
             </code>
             </example>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.RemoteIoServerControl(Connectivity.IolsSetupComponent.IolsControlAction,System.Boolean,System.Boolean)">
            <summary>
            Control Remote IO Server Stop/Start/Restart
            </summary>
            <param name="action">The specified action which is applied to Remote IO Server</param>
            <param name="use32bit">specify to start 32bit Remote IO Server if true</param>
            <param name="autoStartOnReboot">Set Remote IO Server auto start when system boots if true</param>
            <returns>The status of this call</returns>
            <example>
            The sample shows how to start/stop/restart remoteIOServer (siclland)
            <code>
            public static class RemoteIoServerControl
            {
                public static void Sample()
                {
                    using (IolsSetupClient client = new IolsSetupClient())
                    {
                        StatusCode success = client.RemoteIoServerControl(ControlAction.START, false, true);
                        success = client.RemoteIoServerControl(ControlAction.RESTART, false, false);
                        success = client.RemoteIoServerControl(ControlAction.STOP, true, false);
                        success = client.RemoteIoServerControl(ControlAction.START, true, false);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.IsInterfacePresent(System.String)">
            <summary>
            Check if specified interface is present
            </summary>
            <param name="visaInterfaceId">The specified interface. Please use uppercase for the VISA interface Ids. That is the correct VISA representation.</param>
            <returns>The status of this call</returns>
            <example>
            The sample shows how to check the existence of specific VISA interface
            <code>
            public static class CheckIfInterfacePresent
            {
                public static void Sample()
                {
                    using (IolsSetupClient client = new IolsSetupClient())
                    {
                        bool output = client.IsInterfacePresent("GPIB");  //check if any GPIB interface is present
                        Console.WriteLine("GPIB Interface Present: {0}", output);
            
                        output = client.IsInterfacePresent("TCPIP0");     //check if any TCPIP0 VISA interface is present
                        Console.WriteLine("TCPIP0 Interface Present: {0}", output);
            
                        output = client.IsInterfacePresent("GPIB10");     //check if GPIB0 VISA interface is present
                        Console.WriteLine("GPIB10 Interface Present: {0}", output);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.RemoveAllFavoriteProperties">
            <summary>
            Remove all existing favorite properties from all instruments
            </summary>
            <returns>The status of this call</returns>
            <remarks>
            If the discovery service is running it will stop it and remove all favorite properties from all instruments
            and then start discovery service again.
            </remarks>
            <example>
            The sample shows how to remove all favorite devices in Connection Expert
            <code>
            public static class RemoveFavorites
            {
                public static void Sample()
                {
                    using (IolsSetupClient client = new IolsSetupClient())
                    {
                        StatusCode code = client.RemoveAllFavoriteDevices();
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.AddOrUpdateAlias(System.String,System.String,System.String)">
            <summary>
            Add a new alias or update existing alias
            </summary>
            <param name="visaAddress">The VISA address which this alias name will reference.</param>
            <param name="siclAddress">The SICL address which this alias name will reference.</param>
            <param name="aliasName">The specified alias name which needs to be added or updated</param>
            <returns>The status of this call</returns>
            <remarks>
            If the alias name already seists in Keysight Connection Expert, it will be deleted and this alias will be added as a new alias.
            </remarks>
            <example>
            The sample shows how to add or update VISA alias in IO Libraries
            <code>
            public static class AddOrUpdateAlias
            {
                public static void Sample()
                {
                    using (IolsSetupClient client = new IolsSetupClient())
                    {
                        StatusCode code = client.AddOrUpdateAlias("GPIB0::12::INSTR", "gpib0,12", "AAA");   //add or update both VISA and SICL address to specific alias name
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.RemoveAlias(System.String)">
            <summary>
            Remove alias by specified alias name. It removes one alias at a time.
            </summary>
            <param name="aliasName">The specified alias name which needs to be removed</param>
            <returns>The status of this call</returns>
            <example>
            The sample shows how to remove specific VISA alias from IO Libraries.
            <code>
            public static class RemoveAlias
            {
                public static void Sample()
                {
                    using (IolsSetupClient client = new IolsSetupClient())
                    {
                        StatusCode code = client.RemoveAlias("DDD");  //Remove VISA alias "DDD"
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.SetAttributeString(System.String,System.String,System.String)">
            <summary>
            Set specified attribute string value to specified device or interface.
            </summary>
            <param name="visaAddress">The specified Visa Address</param>
            <param name="attribute">The specified attribute name</param>
            <param name="value">The specified boolean value which needs to be set</param>
            <returns>The status of this call</returns>
            <remarks>
            This function was created for backwards compatibility. If you want to use this function, 
            contact Keysight Support for detailed information. 
            </remarks>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.GetAttributeString(System.String,System.String)">
            <summary>
            Get specified attribute string value from specified device or interface
            </summary>
            <param name="visaAddress">The specified Visa Address</param>
            <param name="attribute">The specified attribute name</param>
            <returns>The status of this call</returns>
            <remarks>
            This function was created for backwards compatibility. If you want to use this function, 
            contact Keysight Support for detailed information. 
            </remarks>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.SetAttributeBoolean(System.String,System.String,System.Boolean)">
            <summary>
            Set specified attribute boolean value to specified device or interface.
            </summary>
            <param name="visaAddress">The specified Visa Address</param>
            <param name="attribute">The specified attribute name</param>
            <param name="value">The specified boolean value which needs to be set</param>
            <returns>The status of this call</returns>
            <remarks>
            This function was created for backwards compatibility. If you want to use this function, 
            contact Keysight Support for detailed information. 
            </remarks>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.GetAttributeBoolean(System.String,System.String)">
            <summary>
            Get specified attribute boolean value from specified device or interface
            </summary>
            <param name="visaAddress">The specified Visa Address</param>
            <param name="attribute">The specified attribute name</param>
            <returns>The status of this call</returns>
            <remarks>
            This function was created for backwards compatibility. If you want to use this function, 
            contact Keysight Support for detailed information. 
            </remarks>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.SetAttributeInteger(System.String,System.String,System.Int32)">
            <summary>
            Set specified attribute integer value to specified device or interface.
            </summary>
            <param name="visaAddress">The specified Visa Address</param>
            <param name="attribute">The specified attribute name</param>
            <param name="value">The specified integer value which needs to be set</param>
            <returns>The status of this call</returns>
            <remarks>
            This function was created for backwards compatibility. If you want to use this function, 
            contact Keysight Support for detailed information. 
            </remarks>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.GetAttributeInteger(System.String,System.String)">
            <summary>
            Get specified attribute integer value from specified device or interface
            </summary>
            <param name="visaAddress">The specified Visa Address</param>
            <param name="attribute">The specified attribute name</param>
            <returns>The status of this call</returns>
            <remarks>
            This function was created for backwards compatibility. If you want to use this function, 
            contact Keysight Support for detailed information. 
            </remarks>
        </member>
        <member name="M:Connectivity.IolsSetupComponent.IolsSetupClient.GetInstrumentsSnapshot(System.String)">
            <summary>
            Get instrument info discovery service discovered based on the search criteria
            </summary>
            <param name="criteria">the search criteria for the instruments, set it to empty to indicate to return all instrument info</param>
            <returns>a json string consists of the returned instrument info</returns>
            <remarks>
            search criteria would NOT be supported in this release. It would return all instrument info no matter what is 'criteria' parameter.
            The format of the returned json string is as follow:
            Instruments(List, a list consists of instrument info)
                UniqueInstrumentId(string)
                Favorite(bool)
                Serial Number(string)
                Manufacturer(string)
                Description(string)
                Firmware(string)
                Model(string)
                Connection(List)
                    Favorite(bool)
                    ConnectionState(string)
                    VISA Address(string)
                    IsPxi(bool)
                    IO Type(string)
                    Chassis Number(string)
                    Action(string)
                    SICL Address(string)
                    VISA Aliases(List, exist only when we defined in Connection Expert)
            </remarks>      
        </member>
        <member name="T:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess">
            <summary>
            This class abstracts access to the SQLite API.  It is used by ConfigDataManagerSqlite and NonconfigDataManagerSqlite.
            </summary>
            <seealso cref="T:Iols.ConnectionExpert.Shared.IPersistedDataAccess" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="T:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.TableName">
            <summary>
            The names of the tables contained in the IOLS SQLite database.
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.TableName.ConfigData">
            <summary>
            <para>A 4 column table containing Interfaces and Devices.</para>
            <para>Interfaces were associated with 'INTFn' sections in the IOLS registry.</para>
            <para>Devices were subkeys under the 'INTFn' IOLS registry keys.</para>
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.TableName.InstrAliasInfo">
            <summary>
            <para>A 4 column table containing VISA/SICL Aliases.</para>
            <para>VISA/SICL Aliases were name/value pairs under the 'Devices' and 'VISADevices' registry keys</para>
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.TableName.IolsInfo">
            <summary>
            A 3 column table containing Name/Value pairs that were contained in the 'CurrentVersion' IOLS registry key.
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.TableName.VisaInfo">
            <summary>
            <para>A 3 column table containing Name/Value pairs that were contained in the 'VisaInfo' IOLS registry key.</para>
            <para>This table will be empty unless a user has changed a default global VISA attribute (e.g. VI_ATTR_MAX_QUEUE_LENGTH)</para>
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.TableName.TulipParamInfo">
            <summary>
            A 3 column table containing the parameter information needed by TULIP drivers that was contained in the 'Params' registry key.
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.TableName.TulipAliasInfo">
            <summary>
            A 3 column table containing TULIP driver alias names.  These were contained in the 'Aliases' registry key.
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.TableName.InstrumentFavorites">
            <summary>
            <para>A 3 column table containing the names of instruments marked as favorites</para>
            <para>The NAME column contains the lower case, comma separated manufacturer, model, serial number.</para>
            <para>the VALUE column contains 'NotSet', 'On' or 'Off'.</para>
            </summary>
        </member>
        <member name="T:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.IndexName">
            <summary>
            Struct IndexName
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.IndexName.ConfigDataIDKey">
            <summary>
            The index name for IDKEY column in ConfigData table
            </summary>
        </member>
        <member name="T:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.ColumnName">
            <summary>
            The names of the columns in the IOLS SQLite database tables.
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.ColumnName.Id">
            <summary>
            The INTEGER PRIMARY KEY. Every table contains this key which has special properties defined by SQLite.
            When a row is written, it is assiged a unique value.  This value is not used when reading the table.
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.ColumnName.IdKey">
            <summary>
            <para>'IdKey' contains unique identifier for objects in the ConfigData table.  Only the ConfigData table contains this column.</para>
            <para>All of the rows associated with a given Interface, Device or VISA/SICL Alias will have the same IdKey.</para>
            <para>This key is a GUID for Interfaces and Devices.  It is the alias name for a VISA/SICL Alias</para>
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.ColumnName.Name">
            <summary>
            The Name of a property in a table.
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.ColumnName.Value">
            <summary>
            The Value of a property in a table.
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess._connection">
            <summary>
            The connection
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess._filePath">
            <summary>
            The file path
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess._log">
            <summary>
            The log
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess._commandTimeoutSeconds_default">
            <summary>
            The command timeout seconds default
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.s_connectionLock">
            <summary>
            The s connection lock
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.s_checkFileLock">
            <summary>
            The s check file lock
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.s_dbExistenceChecked">
            <summary>
            The s database existence checked
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess._commandTimeoutSeconds">
            <summary>
            The command timeout seconds
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess._maxLockWaitTime">
            <summary>
            The maximum lock wait time
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess._connectionIsOpen">
            <summary>
            The connection is open
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess._leaveConnectionOpen">
            <summary>
            The leave connection open
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess._dbConnectionString">
            <summary>
            The database connection string
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess._transaction">
            <summary>
            The transaction
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess._dbSchemaVersionValue">
            <summary>
            The database schema version value
            </summary>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.#ctor(Iols.ConnectionExpert.CommonUtilities.IAppConfig,Connectivity.CommonOsAbstractions.ILogToFile)">
            <summary>
            Connect to the SQLite database.  Create an empty database file if one does not exist.
            </summary>
            <param name="settings">The settings.</param>
            <param name="log">The log.</param>
            <exception cref="T:System.IO.FileNotFoundException">
            </exception>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.AddDbSchemaVersion">
            <summary>
            Adds the database schema version.
            </summary>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.Finalize">
            <summary>
            This constructor would only be called in ConfigDataManagerSqlite and NonconfigDataManagerSqlite
            </summary>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.BeginTransaction">
            <summary>
            Begins the transaction.
            </summary>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.CommitTransaction">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.RollbackTransaction">
            <summary>
            Rollbacks the transaction.
            </summary>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.GetConfigElements">
            <summary>
            Gets the configuration elements.
            </summary>
            <returns>List&lt;DataAccessElement&gt;.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.SaveOrUpdateConfigElement(Iols.ConnectionExpert.Shared.DataAccessElement,System.Boolean)">
            <summary>
            Saves the or update configuration element.
            </summary>
            <param name="dataAccessElement">The data access element.</param>
            <param name="isAlias">if set to <c>true</c> [is alias].</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.DeleteConfigElement(Iols.ConnectionExpert.Shared.DataAccessElement)">
            <summary>
            Deletes the configuration element.
            </summary>
            <param name="dataAccessElement">The data access element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.SaveNonConfigData(Iols.ConnectionExpert.Shared.NonconfigData)">
            <summary>
            Saves the non configuration data.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.GetConfigAgentMap">
            <summary>
            Gets the configuration agent map.
            </summary>
            <returns>List&lt;NameValueElement&gt;.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.SaveOrUpdateConfigAgentMap(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Saves the or update configuration agent map.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.DeleteConfigAgentMap(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Deletes the configuration agent map.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.GetIolsInfo">
            <summary>
            Gets the iols information.
            </summary>
            <returns>List&lt;NameValueElement&gt;.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.SaveOrUpdateIolsInfo(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Saves the or update iols information.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.DeleteIolsInfo(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Deletes the iols information.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.GetVisaInfo">
            <summary>
            Gets the visa information.
            </summary>
            <returns>List&lt;NameValueElement&gt;.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.SaveOrUpdateVisaInfo(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Saves the or update visa information.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.DeleteVisaInfo(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Deletes the visa information.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.GetTulipParamInfo">
            <summary>
            Gets the tulip parameter information.
            </summary>
            <returns>List&lt;NameValueElement&gt;.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.SaveOrUpdateTulipParamInfo(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Saves the or update tulip parameter information.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.DeleteTulipParamInfo(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Deletes the tulip parameter information.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.GetInstrumentFavorites">
            <summary>
            Gets the instrument favorites.
            </summary>
            <returns>List&lt;NameValueElement&gt;.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.SaveOrUpdateInstrumentFavorite(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Saves the or update instrument favorite.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.DeleteInstrumentFavorite(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Deletes the instrument favorite.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="P:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.WriteSyncObject">
            <summary>
            Gets the write synchronize object.
            </summary>
            <value>The write synchronize object.</value>
        </member>
        <member name="P:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.CommandTimeoutSeconds">
            <summary>
            Gets or sets the command timeout seconds.
            </summary>
            <value>The command timeout seconds.</value>
        </member>
        <member name="P:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.DataBaseFileName">
            <summary>
            Gets the name of the data base file.
            </summary>
            <value>The name of the data base file.</value>
        </member>
        <member name="P:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.TableList">
            <summary>
            Gets the table list.
            </summary>
            <value>The table list.</value>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.GetColumnNames(System.String)">
            <summary>
            Gets the column names.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>List&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.GetTableContents(System.String)">
            <summary>
            Gets the table contents.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>List&lt;List&lt;System.String&gt;&gt;.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.NonQuery(System.String)">
            <summary>
            Nons the query.
            </summary>
            <param name="cmdText">The command text.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.OpenConnection">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.CloseConnection">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.GetDataAccessElements(System.String)">
            <summary>
            Gets the data access elements.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>List&lt;DataAccessElement&gt;.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.SaveOrUpdateDataAccessElement(Iols.ConnectionExpert.Shared.DataAccessElement,System.String)">
            <summary>
            Saves the or update data access element.
            </summary>
            <param name="dataAccessElement">The data access element.</param>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.DeleteDataAccessElement(Iols.ConnectionExpert.Shared.DataAccessElement,System.String)">
            <summary>
            Deletes the data access element.
            </summary>
            <param name="dataAccessElement">The data access element.</param>
            <param name="tableName">Name of the table.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.GetNameValueElements(System.String)">
            <summary>
            Gets the name value elements.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>List&lt;NameValueElement&gt;.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.SaveOrUpdateNameValueElement(Iols.ConnectionExpert.Shared.NameValueElement,System.String)">
            <summary>
            Saves the or update name value element.
            </summary>
            <param name="nameValueElement">The name value element.</param>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.DeleteNameValueElement(Iols.ConnectionExpert.Shared.NameValueElement,System.String)">
            <summary>
            Deletes the name value element.
            </summary>
            <param name="nameValueElement">The name value element.</param>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.ExecuteNonQueryWithMultiTry(System.Data.SQLite.SQLiteCommand,System.Int32)">
            <summary>
            Executes the non query with multi try.
            </summary>
            <param name="cmd">The command.</param>
            <param name="maxLockWaitTime">The maximum lock wait time.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.ExecuteNonQuery(System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="cmdText">The command text.</param>
            <param name="paramArray">The parameter array.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.ExecuteNonQuery(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Data.SQLite.SQLiteParameter[]})">
            <summary>
            Executes the non query.
            </summary>
            <param name="cmdList">The command list.</param>
            <param name="paramsList">The parameters list.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.Create4ColumnTable(System.String)">
            <summary>
            Create4s the column table.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.Create3ColumnTable(System.String)">
            <summary>
            Create3s the column table.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.CreateNormalIndex4Table(System.String,System.String,System.String[])">
            <summary>
            Creates the normal index4 table.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="tableName">Name of the table.</param>
            <param name="colArray">The col array.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.PopulateList4NonConfigData(System.Collections.Generic.List{System.Data.SQLite.SQLiteParameter[]},System.Collections.Generic.List{System.String},System.String,System.String,System.String)">
            <summary>
            Populates the list4 non configuration data.
            </summary>
            <param name="paramsList">The parameters list.</param>
            <param name="sqlList">The SQL list.</param>
            <param name="tableName">Name of the table.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.GenerateTableInsertString(System.String,System.String,System.String,System.String,System.Data.SQLite.SQLiteParameter[]@)">
            <summary>
            Generates the table insert string.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="persistentId">The persistent identifier.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="paramArray">The parameter array.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataStore.SQLitePersistedDataAccess.GenerateTableInsertString(System.String,System.String,System.String,System.Data.SQLite.SQLiteParameter[]@)">
            <summary>
            Generates the table insert string.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="paramArray">The parameter array.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Iols.ConnectionExpert.Shared.INonconfigDataManager">
            <summary>
            Interface INonconfigDataManager
            </summary>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.INonconfigDataManager.GetNonconfigData">
            <summary>
            Gets the nonconfig data.
            </summary>
            <returns>NonconfigData.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.INonconfigDataManager.SaveNonconfigData(Iols.ConnectionExpert.Shared.NonconfigData)">
            <summary>
            Saves the nonconfig data.
            </summary>
            <param name="elements">The elements.</param>
        </member>
        <member name="T:Iols.ConnectionExpert.Shared.NonconfigData">
            <summary>
            A format-neutral abstract representation of the configuration data.
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.NonconfigData._iolsInfo">
            <summary>
            The iols information
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.NonconfigData._visaInfo">
            <summary>
            The visa information
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.NonconfigData._tulipParamInfo">
            <summary>
            The tulip parameter information
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.NonconfigData._instrumentFavoritesInfo">
            <summary>
            The instrument favorites information
            </summary>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Iols.ConnectionExpert.Shared.NonconfigData"/> class.
            </summary>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.AddTulipParam(System.String,System.String)">
            <summary>
            Adds the tulip parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.DeleteTulipParam(System.String)">
            <summary>
            Deletes the tulip parameter.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.GetTulipParam(System.String)">
            <summary>
            Gets the tulip parameter.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.AllTulipParamKeys">
            <summary>
            Alls the tulip parameter keys.
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.AllTulipParamValues">
            <summary>
            Alls the tulip parameter values.
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.AddIolsInfo(System.String,System.String)">
            <summary>
            Adds the iols information.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.GetIolsInfo(System.String,System.String)">
            <summary>
            Gets the iols information.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.GetIolsInfo(System.String,System.Int32)">
            <summary>
            Gets the iols information.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.GetIolsInfo(System.String,System.Boolean)">
            <summary>
            Gets the iols information.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.DeleteIolsInfo(System.String)">
            <summary>
            Deletes the iols information.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.AllIolsInfoKeys">
            <summary>
            Alls the iols information keys.
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.AllIolsInfoValues">
            <summary>
            Alls the iols information values.
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.AddVisaInfo(System.String,System.String)">
            <summary>
            Adds the visa information.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.GetVisaInfo(System.String,System.String)">
            <summary>
            Gets the visa information.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.GetVisaInfo(System.String,System.Int32)">
            <summary>
            Gets the visa information.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.GetVisaInfo(System.String,System.Boolean)">
            <summary>
            Gets the visa information.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.AllVisaInfoKeys">
            <summary>
            Alls the visa information keys.
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.AllVisaInfoValues">
            <summary>
            Alls the visa information values.
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.AddInstrumentFavorite(System.String,System.String)">
            <summary>
            Add an instrument by InstrumentId to the InstrumentsFavorite database.
            Expected strings are "Favorite", "NotFavorite", or "NotSpecified".
            Any other value passed in will be converted to "NotSpecified".
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.AddInstrumentFavorite(System.String,Iols.ConnectionExpert.SharedNames.FavoriteValue)">
            <summary>
            Adds the instrument favorite.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.GetInstrumentFavorite(System.String,Iols.ConnectionExpert.SharedNames.FavoriteValue)">
            <summary>
            Gets the instrument favorite.
            </summary>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns>FavoriteValue.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.DeleteInstrumentFavorite(System.String)">
            <summary>
            Deletes the instrument favorite.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.AllInstrumentFavoriteKeys">
            <summary>
            Alls the instrument favorite keys.
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.ParseInt(System.String,System.Int32)">
            <summary>
            Internal function to parse an interger from a string (either hex or decimal format)
            </summary>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NonconfigData.ParseLeadingInt(System.String,System.Int32)">
            <summary>
            Helper function to get an interger value from the leading part of a string which may have
            additional characters after a space character in the string (e.g. '123 xyzzy' will return 123).
            If the string does not contain a space, the entire string is parsed.
            </summary>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Iols.ConnectionExpert.Shared.IPersistedDataAccess">
            <summary>
            Interface IPersistedDataAccess
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.BeginTransaction">
            <summary>
            Begins the transaction.
            </summary>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.CommitTransaction">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.RollbackTransaction">
            <summary>
            Rollbacks the transaction.
            </summary>
        </member>
        <member name="P:Iols.ConnectionExpert.Shared.IPersistedDataAccess.WriteSyncObject">
            <summary>
            Gets the write synchronize object.
            </summary>
            <value>The write synchronize object.</value>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.GetConfigElements">
            <summary>
            Gets the configuration elements.
            </summary>
            <returns>List&lt;DataAccessElement&gt;.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.SaveOrUpdateConfigElement(Iols.ConnectionExpert.Shared.DataAccessElement,System.Boolean)">
            <summary>
            Saves the or update configuration element.
            </summary>
            <param name="dataAccessElement">The data access element.</param>
            <param name="isAlias">if set to <c>true</c> [is alias].</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.DeleteConfigElement(Iols.ConnectionExpert.Shared.DataAccessElement)">
            <summary>
            Deletes the configuration element.
            </summary>
            <param name="dataAccessElement">The data access element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.GetConfigAgentMap">
            <summary>
            Gets the configuration agent map.
            </summary>
            <returns>List&lt;NameValueElement&gt;.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.SaveOrUpdateConfigAgentMap(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Saves the or update configuration agent map.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.DeleteConfigAgentMap(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Deletes the configuration agent map.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.GetIolsInfo">
            <summary>
            Gets the iols information.
            </summary>
            <returns>List&lt;NameValueElement&gt;.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.SaveOrUpdateIolsInfo(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Saves the or update iols information.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.DeleteIolsInfo(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Deletes the iols information.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.GetVisaInfo">
            <summary>
            Gets the visa information.
            </summary>
            <returns>List&lt;NameValueElement&gt;.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.SaveOrUpdateVisaInfo(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Saves the or update visa information.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.DeleteVisaInfo(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Deletes the visa information.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.GetTulipParamInfo">
            <summary>
            Gets the tulip parameter information.
            </summary>
            <returns>List&lt;NameValueElement&gt;.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.SaveOrUpdateTulipParamInfo(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Saves the or update tulip parameter information.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.DeleteTulipParamInfo(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Deletes the tulip parameter information.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.GetInstrumentFavorites">
            <summary>
            Gets the instrument favorites.
            </summary>
            <returns>List&lt;NameValueElement&gt;.</returns>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.SaveOrUpdateInstrumentFavorite(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Saves the or update instrument favorite.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.IPersistedDataAccess.DeleteInstrumentFavorite(Iols.ConnectionExpert.Shared.NameValueElement)">
            <summary>
            Deletes the instrument favorite.
            </summary>
            <param name="nameValueElement">The name value element.</param>
        </member>
        <member name="T:Iols.ConnectionExpert.Shared.DataAccessElement">
            <summary>
            Class DataAccessElement. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataAccessElement._key">
            <summary>
            The key
            </summary>
        </member>
        <member name="P:Iols.ConnectionExpert.Shared.DataAccessElement.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataAccessElement._type">
            <summary>
            The type
            </summary>
        </member>
        <member name="P:Iols.ConnectionExpert.Shared.DataAccessElement.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.DataAccessElement._properties">
            <summary>
            The properties
            </summary>
        </member>
        <member name="P:Iols.ConnectionExpert.Shared.DataAccessElement.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.DataAccessElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Iols.ConnectionExpert.Shared.DataAccessElement"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="T:Iols.ConnectionExpert.Shared.NameValueElement">
            <summary>
            Class NameValueElement. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.NameValueElement._name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:Iols.ConnectionExpert.Shared.NameValueElement.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="F:Iols.ConnectionExpert.Shared.NameValueElement._value">
            <summary>
            The value
            </summary>
        </member>
        <member name="P:Iols.ConnectionExpert.Shared.NameValueElement.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Iols.ConnectionExpert.Shared.NameValueElement.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Iols.ConnectionExpert.Shared.NameValueElement"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
    </members>
</doc>

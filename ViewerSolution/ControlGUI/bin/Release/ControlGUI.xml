<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ControlGUI</name>
    </assembly>
    <members>
        <member name="T:ControlGUI.arctionChart">
            <summary>
            Defines the user-defined arction class, inheriting the UserControl object (to be added to Form)
            </summary>
        </member>
        <member name="M:ControlGUI.arctionChart.CreateChart(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Configures the attributes of the chart axes
            </summary>
        </member>
        <member name="M:ControlGUI.arctionChart.updateBackground(System.Drawing.Bitmap)">
            <summary>
            Updating the background image with a bitmap object
            </summary>
            <param name="bitmap"></param>
        </member>
        <member name="M:ControlGUI.arctionChart.updateBackground(System.Int32[][])">
            <summary>
            Updating the background image with an int[][] pixel array
            </summary>
            <param name="colors"></param>
        </member>
        <member name="M:ControlGUI.arctionChart.updateHeatmap(System.Double[][])">
            <summary>
            Updating the heatmap with a double[][] array
            </summary>
            <param name="colors"></param>
        </member>
        <member name="F:ControlGUI.arctionChart.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ControlGUI.arctionChart.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ControlGUI.arctionChart.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ControlGUI.DataArray.#ctor(ControlGUI.DataArray)">
            <summary>
            Constructor from another DataArray
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ControlGUI.DataArray.#ctor(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Constructor
            </summary>
            <param name="t"> Array of double representing time values since start of sweep</param>
            <param name="azt"></param>
            <param name="elt"></param>
            <param name="azr"></param>
            <param name="elr"></param>
        </member>
        <member name="M:ControlGUI.ladybugClass.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constructor for user-defined ladybug class
            Sets up inital renderer settings (column x row)
            </summary>
            <param name="imageCols">Integer representing number of columns for output image</param>
            <param name="imageRows">Integer representing number of rows for output image</param>
        </member>
        <member name="M:ControlGUI.ladybugClass.AllocateImageBuffer(System.Int32[][]@)">
            <summary>
            Allocates sufficient pixel buffer array to the output variable
            </summary>
            <param name="outputBuffer"></param>
        </member>
        <member name="M:ControlGUI.ladybugClass.AllocateTextureBuffer(System.Byte[]@)">
            <summary>
            Allocating sufficient space for texture buffer
            </summary>
            <param name="outputBuffer"></param>
        </member>
        <member name="M:ControlGUI.ladybugClass.GetImagePixelArray(LadybugAPI.LadybugProcessedImage@,System.Int32[][]@)">
            <summary>
            Returns the image pixel from rendered image
            TODO : Add wait function for next/updated image
            </summary>
            <param name="colorBuffer">Int array of pixels ARGB format </param>
        </member>
        <member name="M:ControlGUI.ladybugClass.ConfigureRenderer(LadybugAPI.LadybugColorProcessingMethod)">
            <summary>
            Pass the color processing method to the class and raise the flag
            </summary>
            <param name="colorMethod"></param>
        </member>
        <member name="M:ControlGUI.ladybugClass.ConfigureRenderer(LadybugAPI.LadybugPanoAngle)">
            <summary>
            Pass the panoramic angle to the renderer and raise the flag
            </summary>
            <param name="panoAngle"></param>
        </member>
        <member name="M:ControlGUI.ladybugClass.ConfigureRenderer(System.UInt32,System.UInt32)">
            <summary>
            Pass the offscreen image resolution to the renderer and raise the flag
            </summary>
            <param name="cols"></param>
            <param name="rows"></param>
        </member>
        <member name="M:ControlGUI.ladybugClass.InitializeStreamReader(System.IntPtr@,System.IntPtr@,System.String@,System.UInt32@)">
            <summary>
            Prepare the stream context for reading at file path
            </summary>
            <param name="ch"></param>
            <param name="streamFilePath"></param>
            <param name="numImagesInStream"></param>
        </member>
        <member name="M:ControlGUI.ladybugClass.InitializeStreamWriter(ControlGUI.ContextHolder,System.String@)">
            <summary>
            Prepare the writer stream context for writing at file path with base file path
            </summary>
            <param name="ch"></param>
            <param name="streamBaseFilePath"></param>
            <param name="calFilePath"></param>
        </member>
        <member name="M:ControlGUI.ladybugClass.InitializeOffScreenRender(System.IntPtr@)">
            <summary>
            Set up the off screen renderer properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:ControlGUI.ladybugClass.ConfigureTriggerStrobe(ControlGUI.ContextHolder)">
            <summary>
            Set up the trigger and strobe mode of the Ladybug camera
            For external Hardwarecontrol
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:ControlGUI.ladybugClass.FetchFromStream(System.IntPtr@,System.IntPtr@,System.UInt32,System.Int32[][]@,System.String@)">
            <summary>
            Go to and grab the image from index in stream
            </summary>
            <param name="indexInStream"></param>
        </member>
        <member name="M:ControlGUI.ladybugClass.FetchFromCamera(System.IntPtr@,System.IntPtr@,System.Int32[][]@)">
            <summary>
            Fetch and lock the image from camera and write to stream file
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:ControlGUI.ladybugClass.StopFetching(System.IntPtr@)">
            <summary>
            Stops the ladybug's stream  
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:ControlGUI.ladybugClass.ProcessImage(System.IntPtr@,LadybugAPI.LadybugImage@,System.Int32[][]@)">
            <summary>
            Convert, and render the ladybug image that has been grabbed and fill out the pixel colors in the pixel buffer
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:ControlGUI.ladybugClass.InitializeAlphaMasks(System.IntPtr@,LadybugAPI.LadybugImage@)">
            <summary>
            Initialize the alpha mask texture
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:ControlGUI.ladybugClass.ladybugHandleError(System.String)">
            <summary>
            Handle the errors returned by LadybugSDK
            </summary>
            <param name="lastFunctionPassed"></param>
            <returns></returns>
        </member>
        <member name="M:ControlGUI.Form1.UIThread(System.Action)">
            <summary>
            Define a function to delegate Actions to the caller function
            Used by a background worker to delegate work back to main thread
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:ControlGUI.Form1.ladybugStreamWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Ladybug do worker definition
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ControlGUI.Form1.heatmapWorker_DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Heatmap do worker definition
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ControlGUI.Form1.getTimeDiffer(System.DateTime@,System.UInt32)">
            <summary>
            Get time difference 
            </summary>
            <param name="lastTime"></param>
            <param name="frames"></param>
            <returns></returns>
        </member>
        <member name="M:ControlGUI.Form1.button1_Click(System.Object,System.EventArgs)">
            <summary>
            Button click for loading stream file event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ControlGUI.Form1.button2_Click(System.Object,System.EventArgs)">
            <summary>
            Button click for setting the camera up for live stream capture event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ControlGUI.Form1.button3_Click(System.Object,System.EventArgs)">
            <summary>
            Button click for generating random heatmap event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ControlGUI.Form1.comboBox1_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            ComboBox for color processing method event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ControlGUI.Form1.comboBox2_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            ComboBox for panoramic angle event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ControlGUI.Form1.numericUpDown1_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Numerical value for number of columns of rendered output resolution
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ControlGUI.Form1.numericUpDown2_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Numerical value for number of rows of rendered output resolution
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:ControlGUI.Form1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ControlGUI.Form1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ControlGUI.Form1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ControlGUI.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:ControlGUI.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ControlGUI.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ControlGUI.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:LadybugAPI.LadybugError">
            An enumeration of all possible errors returned by the Ladybug API. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_OK">
            Function completed successfully. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_FAILED">
            General failure. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_INVALID_ARGUMENT">
            Invalid argument passed to the function. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_INVALID_CONTEXT">
            Invalid context passed to the function. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_NOT_IMPLEMENTED">
            The functionality is not implemented with this version of the library. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_NOT_SUPPORTED">
            The functionality is not supported with the current software or hardware
            configurations.
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_ALREADY_INITIALIZED">
            The device or context has already been initialized. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_ALREADY_STARTED">
            Grabbing has already been started. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_COULD_NOT_OPEN_FILE">
            Failed to open file. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_MEMORY_ALLOC_ERROR">
            Memory allocation error. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_ERROR_DISK_NOT_ENOUGH_SPACE">
            There is not enough space on the disk. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_STREAM_FILE_NOT_OPENED">
            Stream file has not opened. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_INVALID_STREAM_FILE_NAME">
            Invalid stream file name. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_NOT_INITIALIZED">
            Device or object not initialized. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_NOT_STARTED">
            Camera has not been started. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_MAX_BANDWIDTH_EXCEEDED">
            Request would exceed maximum bandwidth of the bus. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_INVALID_VIDEO_SETTING">
            Invalid video mode or frame rate passed or retrieved. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_NEED_RECTIFY_RESOLUTION">
            The rectify resolution has not been properly set. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_DEPRECATED">
            Function is deprecated - please see documentation. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_IMAGE_TOO_SMALL">
            The image buffer returned by the camera was too small to contain all of
            the JPEG image data.
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_TIMEOUT">
            Operation timed out. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_TOO_MANY_LOCKED_BUFFERS">
            Too many image buffers are locked by the user. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_CALIBRATION_FILE_NOT_FOUND">
            No calibration file was found on the Ladybug head unit. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_JPEG_ERROR">
            An error occurred during JPEG decompression. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_JPEG_HEADER_ERROR">
            An error occurred in JPEG header verification. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_JPEG_INCOMPLETE_COMPRESSION">
            The compressor did not have enough time to finish compressing the data. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_JPEG_NO_IMAGE">
            There is no image in this frame. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_CORRUPTED_IMAGE_DATA">
            The compressor detected a corrupted image. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_OFFSCREEN_BUFFER_INIT_ERROR">
            An error occurred in off-screen buffer initialization. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_FRAMEBUFFER_UNSUPPORTED_FORMAT">
            Unsupported framebuffer format. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_FRAMEBUFFER_INCOMPLETE">
            Framebuffer incomplete. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_GPS_COULD_NOT_BE_STARTED">
            GPS device could not be started. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_GPS_NOT_STARTED">
            GPS has not been started. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_GPS_NO_DATA">
            No GPS data. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_GPS_NO_DATA_FOR_THIS_SENTENCE">
            No GPS data for this sentence. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_GPS_COMM_PORT_IN_USE">
            GPS communication port may be in use. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_GPS_COMM_PORT_DOES_NOT_EXIST">
            GPS communication port does not exist. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_OPENGL_DISPLAYLIST_NOT_INITIALIZED">
            OpenGL display list has not initialized. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_OPENGL_TEXTUREIMAGE_NOT_UPDATED">
            OpenGL image texture has not updated. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_INVALID_OPENGL_DEVICE_CONTEXT">
            OpenGL device context is invalid. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_INVALID_OPENGL_RENDERING_CONTEXT">
            OpenGL rendering context is invalid. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_INVALID_OPENGL_TEXTURE">
            OpenGL texture is invalid. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_INVALID_OPENGL_OPERATION">
            The requested OpenGL operation is not valid. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_NOT_ENOUGH_RESOURCE_FOR_OPENGL_TEXTURE">
            There are not enough resources available for image texture. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_SHARING_DISPLAYLIST_FAILED">
            The current rendering context failed to share the display-list space
            of another rendering context
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_INVALID_OFFSCREEN_BUFFER_SIZE">
            The specified off-screen image is invalid. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_STILL_WORKING">
            The requested job is still on-going. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_CORRUPTED_PGR_STREAM">
            The PGR stream is corrupted and cannot be corrected. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_GPU_CUDA_DRIVER_ERROR">
            The driver and runtime version may be mismatched. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_NO_CUDA_DEVICE">
            There is no device supporting CUDA. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_GPU_ERROR">
            An error occurred in GPU functions. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_LOW_LEVEL_FAILURE">
            Low level failure 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_REGISTER_FAILED">
            Register failure 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_ISOCH_FAILED">
            Isoch-related failure 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_RETRIEVE_BUFFER_FAILED">
            Buffer retrieval failure 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_IMAGE_LIBRARY_FAILED">
            Image library failure 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_BUS_MASTER_FAILED">
            Busmaster-related failure 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_ERROR_UNKNOWN">
            Unknown error. 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_BAD_VOLTAGE">
            Voltage error (eg. power cable is not connected on LD5) 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_BAD_INTERFACE">
            Interface error (eg. USB2 instead of USB3 on LD5) 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_OVEREXPOSED">
            Overexposure was detected 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_INTERNAL_ERROR">
            Reported if an internal inconsistency is detected 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_NO_OVERLAP">
            There is no overlap at the point of interest 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_INVALID_CONFIG_FILE">
            The configuration file is invalid (eg. File is missing data, corrupted, or outdated) 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_NUM_LADYBUG_ERRORS">
            Number of errors 
        </member>
        <member name="F:LadybugAPI.LadybugError.LADYBUG_ERROR_FORCE_QUADLET">
            Unused member. 
        </member>
        <member name="T:LadybugAPI.LadybugBusSpeed">
            An enumeration used to describe the maximum bus speed. 
        </member>
        <member name="T:LadybugAPI.LadybugInterfaceType">
            An enumeration used to describe the interface type. 
        </member>
        <member name="T:LadybugAPI.LadybugProperty">
             An enumeration of the different camera properties for the Ladybug.
            
             Many of these properties are included only for completeness and future
             expandability, and will have no effect on a Ladybug camera.
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugProperty.LADYBUG_AUTO_EXPOSURE" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugProperty.LADYBUG_SHARPNESS" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugProperty.LADYBUG_WHITE_BALANCE" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugProperty.LADYBUG_HUE" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugProperty.LADYBUG_SATURATION" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugProperty.LADYBUG_GAMMA" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugProperty.LADYBUG_IRIS" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugProperty.LADYBUG_FOCUS" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugProperty.LADYBUG_ZOOM" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugProperty.LADYBUG_PAN" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugProperty.LADYBUG_TILT" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugProperty.LADYBUG_SHUTTER" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugProperty.LADYBUG_GAIN" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugProperty.LADYBUG_FRAME_RATE" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugProperty.LADYBUG_PROPERTY_FORCE_QUADLET" -->
        <member name="T:LadybugAPI.LadybugIndependentProperty">
            The independent properties provide control over each of the
            individual camera units.
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugIndependentProperty.LADYBUG_SUB_SHUTTER" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugIndependentProperty.LADYBUG_SUB_AUTO_EXPOSURE" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugIndependentProperty.LADYBUG_SUB_FORCE_QUADLET" -->
        <member name="T:LadybugAPI.LadybugCameraBits">
            Bit positions for API functions requiring a camera selection bit field, 
            such as ladybugSetIndProperty().
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugCameraBits.LADYBUG_UNIT_1" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugCameraBits.LADYBUG_UNIT_2" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugCameraBits.LADYBUG_UNIT_3" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugCameraBits.LADYBUG_UNIT_4" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugCameraBits.LADYBUG_UNIT_5" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugCameraBits.LADYBUG_ALL_UNITS" -->
        <member name="T:LadybugAPI.LadybugDataFormat">
            Possible data formats returned by the Ladybug library. Please consult
            the Ladybug technical reference to determine which data formats are
            supported by each camera model.
        </member>
        <member name="F:LadybugAPI.LadybugDataFormat.LADYBUG_DATAFORMAT_RAW8">
            This format produces a single image buffer that has each sensor's image
            one after the other. Again, each pixel is in its raw 8bpp format.
        </member>
        <member name="F:LadybugAPI.LadybugDataFormat.LADYBUG_DATAFORMAT_JPEG8">
            This format is similar to LADYBUG_DATAFORMAT_RAW8 except that the entire
            buffer is JPEG compressed.  This format is intended for use with cameras
            that have black and white sensors.
        </member>
        <member name="F:LadybugAPI.LadybugDataFormat.LADYBUG_DATAFORMAT_COLOR_SEP_RAW8">
            This format separates each individual image into its 4 individual Bayer
            channels (Green, Red, Blue and Green - not necessarily in that order).
        </member>
        <member name="F:LadybugAPI.LadybugDataFormat.LADYBUG_DATAFORMAT_COLOR_SEP_JPEG8">
            Similar to LADYBUG_DATAFORMAT_COLOR_SEP_RAW8 except that the
            transmitted buffer is JPEG compressed.
        </member>
        <member name="F:LadybugAPI.LadybugDataFormat.LADYBUG_DATAFORMAT_HALF_HEIGHT_RAW8">
            Similar to LADYBUG_DATAFORMAT_RAW8.
            The height of the image is only half of that in LADYBUG_DATAFORMAT_RAW8 format.
        </member>
        <member name="F:LadybugAPI.LadybugDataFormat.LADYBUG_DATAFORMAT_COLOR_SEP_HALF_HEIGHT_JPEG8">
            Similar to LADYBUG_DATAFORMAT_COLOR_SEP_JPEG8.
            The height of the image is only half of the original image.
            This format is only supported by Ladybug3.
        </member>
        <member name="F:LadybugAPI.LadybugDataFormat.LADYBUG_DATAFORMAT_RAW16">
            This format produces a single image buffer that has each sensor's image
            one after the other. Each pixel is in raw 16bpp format.
        </member>
        <member name="F:LadybugAPI.LadybugDataFormat.LADYBUG_DATAFORMAT_COLOR_SEP_JPEG12">
            Similar to LADYBUG_DATAFORMAT_COLOR_SEP_JPEG8 except that the image
            data is 12bit JPEG compressed.
        </member>
        <member name="F:LadybugAPI.LadybugDataFormat.LADYBUG_DATAFORMAT_HALF_HEIGHT_RAW16">
            Similar to LADYBUG_DATAFORMAT_HALF_HEIGHT_RAW8.
            Each pixel is in raw 16bpp format.
        </member>
        <member name="F:LadybugAPI.LadybugDataFormat.LADYBUG_DATAFORMAT_COLOR_SEP_HALF_HEIGHT_JPEG12">
            Similar to LADYBUG_DATAFORMAT_COLOR_SEP_HALF_HEIGHT_JPEG8 except that
            the image data is 12bit JPEG compressed.
        </member>
        <member name="F:LadybugAPI.LadybugDataFormat.LADYBUG_DATAFORMAT_RAW12">
             This format produces a single image buffer that has each sensor's image
             one after the other. Each pixel is in raw 12bpp format.
            
             The image data is laid out as follows (24 bytes / 2 pixels):
             Px1 (top 8 bytes) | Px2 (top 8 bytes) | Px1 (bottom 4 bytes) | Px2 (bottom 4 bytes)
        </member>
        <member name="F:LadybugAPI.LadybugDataFormat.LADYBUG_DATAFORMAT_HALF_HEIGHT_RAW12">
            Similar to LADYBUG_DATAFORMAT_RAW12.
            The height of the image is only half of that in LADYBUG_DATAFORMAT_RAW12 format.
        </member>
        <member name="F:LadybugAPI.LadybugDataFormat.LADYBUG_NUM_DATAFORMATS">
            The number of possible data formats. 
        </member>
        <member name="F:LadybugAPI.LadybugDataFormat.LADYBUG_DATAFORMAT_ANY">
            Hook for "any usable video mode". 
        </member>
        <member name="F:LadybugAPI.LadybugDataFormat.LADYBUG_DATAFORMAT_FORCE_QUADLET">
            Unused member. 
        </member>
        <member name="T:LadybugAPI.LadybugResolution">
             This enumeration describes the raw per-sensor resolutions returned by
             the camera.
            
             This enumeration is not used to represent the resolution of the actual image.
            
             LADYBUG_RESOLUTION_ANY can be used to work with any camera.
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugResolution.LADYBUG_RESOLUTION_1616x1232" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugResolution.LADYBUG_RESOLUTION_2448x2048" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugResolution.LADYBUG_RESOLUTION_2464x2048" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugResolution.LADYBUG_NUM_RESOLUTIONS" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugResolution.LADYBUG_RESOLUTION_ANY" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugResolution.LADYBUG_RESOLUTION_FORCE_QUADLET" -->
        <member name="T:LadybugAPI.LadybugColorProcessingMethod">
            The available color processing/destippling/demosaicing methods. 
        </member>
        <member name="F:LadybugAPI.LadybugColorProcessingMethod.LADYBUG_DISABLE">
            Disable color processing - This is useful for retrieving the
            original bayer patten image. When the image is the color-separated
            JPEG stream, the JPEG data is decompressed and the 4 color-separated
            channels are combined into one bayer image.
        </member>
        <member name="F:LadybugAPI.LadybugColorProcessingMethod.LADYBUG_EDGE_SENSING">
            Edge sensing de-mosaicing - This is the most accurate method
            that can keep up with the camera's frame rate.
        </member>
        <member name="F:LadybugAPI.LadybugColorProcessingMethod.LADYBUG_NEAREST_NEIGHBOR_FAST">
            Nearest neighbour de-mosaicing (fast) - Faster, less accurate than
            nearest neighbor de-mosaicing.
        </member>
        <member name="F:LadybugAPI.LadybugColorProcessingMethod.LADYBUG_RIGOROUS">
            Rigorous de-mosaicing - This provides the second best quality colour
            reproduction.  This method is very processor intensive and may
            not keep up with the camera's frame rate.  Best used for
            offline processing where accurate colour reproduction is required.
        </member>
        <member name="F:LadybugAPI.LadybugColorProcessingMethod.LADYBUG_DOWNSAMPLE4">
            Downsample4 mode - Color process to output a half width and half height
            image. This allows for faster previews and processing. This results in
            an output image that is 1/4 the size of the source image.
        </member>
        <member name="F:LadybugAPI.LadybugColorProcessingMethod.LADYBUG_DOWNSAMPLE16">
            Downsample16 mode - Color process to output a quarter width and quarter
            height image. This allows for faster previews and processing. This
            results in an image that is 1/16th the size of the source image.
        </member>
        <member name="F:LadybugAPI.LadybugColorProcessingMethod.LADYBUG_MONO">
            Mono - This processing method only uses the green color channel to
            generate grey scale Ladybug images. It is designed for fast previews of
            compressed JPEG image streams. This method also downsamples the image
            as in LADYBUG_DOWNSAMPLE4 so the result image is quarter size.
        </member>
        <member name="F:LadybugAPI.LadybugColorProcessingMethod.LADYBUG_HQLINEAR">
            High quality linear interpolation - This algorithm provides similar
            results to Rigorous, but is up to 30 times faster.
        </member>
        <member name="F:LadybugAPI.LadybugColorProcessingMethod.LADYBUG_HQLINEAR_GPU">
            High quality linear interpolation - This algorithm is the same with
            LADYBUG_HQLINEAR, but the color processing is performed on GPU.
        </member>
        <member name="F:LadybugAPI.LadybugColorProcessingMethod.LADYBUG_DIRECTIONAL_FILTER">
            A de-mosaicking algorithm based on the directional filter - This should
            give the best image quality.
        </member>
        <member name="F:LadybugAPI.LadybugColorProcessingMethod.LADYBUG_WEIGHTED_DIRECTIONAL_FILTER">
            A demosaicking algorithm that weights different directions properly during 
            green interpolation - This yields the best image quality with least false 
            colors among all implemented algorithms.
        </member>
        <member name="F:LadybugAPI.LadybugColorProcessingMethod.LADYBUG_COLOR_FORCE_QUADLET">
            Unused member. 
        </member>
        <member name="T:LadybugAPI.LadybugStippledFormat">
             The format of stippled pixels (Bayer pattern.)
            
             The four characters correspond to the top left 2x2 grid of pixels.
             For example, a "BGGR" image has row 0 = BGBGBGBGBG... and
             row 1 = GRGRGRGR...
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugStippledFormat.LADYBUG_GBRG" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugStippledFormat.LADYBUG_GRBG" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugStippledFormat.LADYBUG_RGGB" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugStippledFormat.LADYBUG_DEFAULT" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugStippledFormat.LADYBUG_STIPPLED_FORCE_QUADLET" -->
        <member name="T:LadybugAPI.LadybugPixelFormat">
            An enumeration used to indicate the pixel format of an image.
            This is used for ladybugRenderOffscreenImage() and LadybugProcessedImage.
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPixelFormat.LADYBUG_MONO16" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPixelFormat.LADYBUG_RAW8" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPixelFormat.LADYBUG_RAW16" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPixelFormat.LADYBUG_BGR" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPixelFormat.LADYBUG_BGRU" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPixelFormat.LADYBUG_BGR16" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPixelFormat.LADYBUG_BGRU16" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPixelFormat.LADYBUG_BGR16F" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPixelFormat.LADYBUG_BGR32F" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPixelFormat.LADYBUG_RGB" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPixelFormat.LADYBUG_RGBU" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPixelFormat.LADYBUG_RGB16" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPixelFormat.LADYBUG_RGBU16" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPixelFormat.LADYBUG_RGB16F" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPixelFormat.LADYBUG_RGB32F" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPixelFormat.LADYBUG_PIXELFORMAT_FORCE_QUADLET" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPixelFormat.LADYBUG_UNSPECIFIED_PIXEL_FORMAT" -->
        <member name="T:LadybugAPI.LadybugSaveFileFormat">
               File format for saved images.
            
             Remarks:
               Not all of these file formats are compatible with all functions that take
               a LadybugSaveFileFormat argument.
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugSaveFileFormat.LADYBUG_FILEFORMAT_PPM" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugSaveFileFormat.LADYBUG_FILEFORMAT_BMP" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugSaveFileFormat.LADYBUG_FILEFORMAT_JPG" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugSaveFileFormat.LADYBUG_FILEFORMAT_PNG" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugSaveFileFormat.LADYBUG_FILEFORMAT_TIFF" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugSaveFileFormat.LADYBUG_FILEFORMAT_EXIF" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugSaveFileFormat.LADYBUG_FILEFORMAT_HDR" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugSaveFileFormat.LADYBUG_FILEFORMAT_FORCE_QUADLET" -->
        <member name="T:LadybugAPI.LadybugDeviceType">
            The type of device the driver is talking to. 
        </member>
        <member name="T:LadybugAPI.LadybugAutoShutterRange">
            Auto shutter modes supported by the camera. 
        </member>
        <member name="T:LadybugAPI.LadybugAutoExposureRoi">
            Regions of interest used for auto exposure calculation.
            This can be applied to both the camera and the post processing pipeline.
        </member>
        <member name="F:LadybugAPI.LadybugAutoExposureRoi.LADYBUG_AUTO_EXPOSURE_ROI_FULL_IMAGE">
            Use the full image (default). 
        </member>
        <member name="F:LadybugAPI.LadybugAutoExposureRoi.LADYBUG_AUTO_EXPOSURE_ROI_BOTTOM_50">
            Use the bottom 50% of each image, excluding the top camera. 
            Prioritizes detail in the lower half of the image (i.e. ignoring the sky).
        </member>
        <member name="F:LadybugAPI.LadybugAutoExposureRoi.LADYBUG_AUTO_EXPOSURE_ROI_TOP_50">
            Use the top 50% of each image, including the top camera.
            Prioritizes detail in the top half of the image.
            Ideal for situations where cameras are mounted upside down.
        </member>
        <member name="F:LadybugAPI.LadybugAutoExposureRoi.LADYBUG_AUTO_EXPOSURE_ROI_SIZE">
            The number of values defined in LadybugAutoExposureRoi. 
        </member>
        <member name="F:LadybugAPI.LadybugAutoExposureRoi.LADYBUG_AUTO_EXPOSURE_ROI_FORCE_QUADLET">
            Unused member. 
        </member>
        <member name="T:LadybugAPI.LadybugToneMappingMode">
             Tone mapping models available. The default is to have no tone mapping enabled.
            
             The Ladybug library provides 2 implementations of tone mapping, an OpenGL
             implementation as well as a CPU implementation.
            
             The OpenGL implementation is available to all data formats.
            
             The CPU implementation is only available for images that are not adjusted
             on the camera. See LadybugImageAdjustment.h for more details on
             the data formats that are supported.
            
             The OpenGL implementation is very fast, but produces poorer results as
             compared to the CPU implementation.
            
             The conversion used for the OpenGL tone mapping is based on Reinhard's
             tone mapping operator. It requires OpenGL version 2.0 or later which is not
             provided by the software renderer (see ladybugEnableSoftwareRendering()).
            
             Testing indicates that OpenGL tone mapping may produce unexpected results
             on ATI graphics cards that support OpenGL version 3.0 or earlier.
        </member>
        <member name="F:LadybugAPI.LadybugToneMappingMode.LADYBUG_TONE_MAPPING_MODE_SIZE">
            The number of values defined in LadybugToneMappingMode 
        </member>
        <member name="F:LadybugAPI.LadybugToneMappingMode.LADYBUG_TONE_MAPPING_FORCE_QUADLET">
            Unused member. 
        </member>
        <member name="T:LadybugAPI.LadybugContextFeature">
            Optional ladybug context features
        </member>
        <member name="F:LadybugAPI.LadybugContextFeature.LADYBUG_FEATURE_GPU_ACCELERATION">
            Corresponds to GPU acceleration.  Calling ladybugGetContextFeatureSupport() may return:
                LADYBUG_FEATURE_SUPPORT_OK - GPU acceleration is fully supported
                LADYBUG_FEATURE_SUPPORT_OLD_GPU_DRIVER - GPU acceleration is not supported due to old driver
                LADYBUG_FEATURE_SUPPORT_NOT_SUPPORTED - GPU acceleration is not supported
        </member>
        <member name="T:LadybugAPI.LadybugFeatureStatus">
            Defines that status of a LadybugContextFeature
        </member>
        <member name="T:LadybugAPI.LadybugTimestamp">
             This structure defines the format by which time is represented in the
             Ladybug SDK.
            
             The ulSeconds and ulMicroSeconds values represent the
             absolute system time when the image was captured.
            
             The ulCycleSeconds and ulCycleCount are higher-precision values that
             have either been propagated up from the 1394 / USB3 bus or extracted from
             the image itself. The data will be extracted from the image if image
             timestamping is enabled and directly (and less accurately) from the
             1394 / USB3 bus otherwise.
            
             The ulCycleSeconds value will wrap around after 128 seconds. The
             ulCycleCount represents the 1/8000 second component.
        </member>
        <member name="T:LadybugAPI.LadybugImageInfo">
             Structure containing the image information of the captured images.
            
             There are 3 main uses for this structure:
            
             - It is stored to the hard drive as part of each image set at capture time.
             - It is used in LadybugImage to store image information when each
               image is captured.
             - It is used in LadybugImage to store image information when each
               image is read from a .pgr stream file.
            
             This image info structure will only contain valid information if
             Ladybug2 and 3 : Camera is set in any JPEG mode
             Ladybug5: Always valid.
            
             Camera properties stored here follow the IIDC register specifications. This is a serialized struct.
        </member>
        <member name="T:LadybugAPI.LadybugTriplet">
            Simple structure to hold information from a 3-axis sensor. 
        </member>
        <member name="T:LadybugAPI.LadybugImageHeader">
            Image information for this image 
        </member>
        <member name="T:LadybugAPI.LadybugImageBorder">
             In certain data formats, the camera may transmit the fully-masked pixels
             at the edges of the sensor in addition to the useful image data.
            
             When available, this information is used to adjust the black level of
             the image data during ladybugConvertImage().
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugImageBorder.uiBottomRows" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugImageBorder.uiLeftCols" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugImageBorder.uiRightCols" -->
        <member name="T:LadybugAPI.LadybugImageRegion">
            Specifies a contiguous region within an image.
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugImageRegion.uiHighRow" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugImageRegion.uiLowCol" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugImageRegion.uiHighCol" -->
        <member name="T:LadybugAPI.LadybugImage">
            The LadybugImage structure is used to describe the image captured from the camera. 
        </member>
        <member name="F:LadybugAPI.LadybugImage.imageBorder">
            Dimensions of the image border. 
        </member>
        <member name="F:LadybugAPI.LadybugImage.uiFullCols">
            Columns, in pixels, of the full sensor image. This is equal to
            uiCols + imageBorder.uiLeft + imageBorder.uiRight.
        </member>
        <member name="F:LadybugAPI.LadybugImage.uiFullRows">
            Rows, in pixels, of the full sensor image. This is equal to
            uiRows + imageBorder.uiTop + imageBorder.uiBottom.
        </member>
        <member name="F:LadybugAPI.LadybugImage.imageHeader">
            Header *
        </member>
        <member name="F:LadybugAPI.LadybugImage.stippledFormat">
            Bayer pattern of image data. 
        </member>
        <member name="T:LadybugAPI.LadybugImageMetaData">
            Structure containing metadata for a Ladybug image. 
        </member>
        <member name="T:LadybugAPI.GpsTimeSyncSettings">
            Structure containing GpsTimeSync parameters 
        </member>
        <member name="T:LadybugAPI.LadybugProcessedImage">
            The Ladybug processed image structure. 
        </member>
        <member name="T:LadybugAPI.LadybugCameraInfo">
            A record used in querying the camera properties. 
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugCameraInfo.serialHead" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugCameraInfo.bIsColourCamera" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugCameraInfo.deviceType" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugCameraInfo.pszModelName" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugCameraInfo.pszSensorInfo" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugCameraInfo.pszVendorName" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugCameraInfo.iDCAMVer" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugCameraInfo.iBusNum" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugCameraInfo.iNodeNum" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugCameraInfo.maxBusSpeed" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugCameraInfo.interfaceType" -->
        <member name="T:LadybugAPI.LadybugTriggerModeInfo">
            A camera trigger property. 
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugTriggerModeInfo.bReadOutSupported" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugTriggerModeInfo.bOnOffSupported" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugTriggerModeInfo.bPolaritySupported" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugTriggerModeInfo.bValueReadable" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugTriggerModeInfo.uiSourceMask" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugTriggerModeInfo.bSoftwareTriggerSupported" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugTriggerModeInfo.uiModeMask" -->
        <member name="T:LadybugAPI.LadybugTriggerMode">
            A camera trigger. 
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugTriggerMode.uiPolarity" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugTriggerMode.uiSource" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugTriggerMode.uiMode" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugTriggerMode.uiParameter" -->
        <member name="T:LadybugAPI.LadybugStrobeInfo">
            A camera strobe property. 
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugStrobeInfo.bAvailable" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugStrobeInfo.bReadOutSupported" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugStrobeInfo.bOnOffSupported" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugStrobeInfo.bPolaritySupported" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugStrobeInfo.fMinValue" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugStrobeInfo.fMaxValue" -->
        <member name="T:LadybugAPI.LadybugStrobeControl">
            A camera strobe. 
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugStrobeControl.bOnOff" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugStrobeControl.uiPolarity" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugStrobeControl.fDelay" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugStrobeControl.fDuration" -->
        <member name="T:LadybugAPI.LadybugStabilizationParams">
            A structure to control stabilization parameters. 
        </member>
        <member name="F:LadybugAPI.LadybugStabilizationParams.iNumTemplates">
             The square of this number is used for the number of templates in the
             image of one camera.
            
             A higher value produces more reliable results, at the expense of
             processing speed.
            
             A range between 5 and 8 is preferable.
        </member>
        <member name="F:LadybugAPI.LadybugStabilizationParams.iMaximumSearchRegion">
             Templates are searched in each image within the range specified by this
             value, in pixels.
            
             If camera movement is significant and/or the frame rate is low, a higher
             value should be specified. However, a higher value results in lower
             processing speed.
            
             A range between 50 and 200 is preferable.
        </member>
        <member name="F:LadybugAPI.LadybugStabilizationParams.dDecayRate">
             Rotational differences accumulate over time in successive frames.
            
             To prevent these differences from accumulating, the rotation result can
             fall back to an initial position. This value determines how gradually the
             fall back, or 'decay,' should take place.
            
             A value between 0 and 1 must be specified. A value of 1 specifies no decay.
            
             A value between 0.9 and 1.0 is usually used.
        </member>
        <member name="T:LadybugAPI.LadybugDynamicStitchingParams">
             A structure to control the ranges of distances being searched
             for dynamic stitching. If the distances to the subjects in the scene falls
             within a known range, these distances can be set to avoid false matching.
            
             Limiting the range also improves the precision of search result.
            
             All values are specified in meters, with a minimum of 0.5m.
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugDynamicStitchingParams.dMaximumDistance" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugDynamicStitchingParams.dDefaultDistance" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugDynamicStitchingParams.reserved" -->
        <member name="T:LadybugAPI.LadybugImageStatistics">
            Structure containing Ladybug image statistics data. 
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugImageStatistics.ChannelData.uiRangeMin" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugImageStatistics.ChannelData.uiRangeMax" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugImageStatistics.ChannelData.uiPixelValueMin" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugImageStatistics.ChannelData.uiPixelValueMax" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugImageStatistics.ChannelData.fPixelValueMean" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugImageStatistics.ChannelData.uiHistogram" -->
        <member name="T:LadybugAPI.LadybugColorCorrectionParams">
            Structure containing color correction parameters. 
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugColorCorrectionParams.iSaturation" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugColorCorrectionParams.iIntensity" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugColorCorrectionParams.iRed" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugColorCorrectionParams.iGreen" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugColorCorrectionParams.iBlue" -->
        <member name="T:LadybugAPI.LadybugToneMappingParams">
            Structure containing tone mapping parameters. 
        </member>
        <member name="F:LadybugAPI.LadybugToneMappingParams.dCompressionScale">
             This value is only applicable for OpenGL tone mapping. It is ignored
             in all other cases.
            
             This value determines how much compression is applied to the image.
             This value must be between 0.1 and 40.0.
        </member>
        <member name="F:LadybugAPI.LadybugToneMappingParams.dLocalAreaSize">
             This value is only applicable for OpenGL tone mapping. It is ignored
             in all other cases.
            
             This value determines the size of the local area when calculating the
             average intensity of a given pixel.
             This value must be between 0 and 10. If the value is 0, the local average
             is determined by the pixel itself, so it behaves as a global compression
             operator.
        </member>
        <member name="F:LadybugAPI.LadybugToneMappingParams.toneMappingMode">
            Tone mapping mode to be used. 
        </member>
        <member name="F:LadybugAPI.ConvertImageOutput.gainRed_Value">
            White balance values that were applied when converting. 
        </member>
        <member name="F:LadybugAPI.ConvertImageOutput.gainApplied">
            Gain in dB that was applied as part of the automatic exposure algorithm. 
        </member>
        <member name="F:LadybugAPI.ConvertImageOutput.targetMeanReach">
            Whether the target exposure was obtained. 
        </member>
        <member name="F:LadybugAPI.Ladybug.LADYBUG_DLL">
            @defgroup ManagedGeneralFunctions General Functions 
            
            @ingroup Ladybug_cs
        </member>
        <member name="M:LadybugAPI.Ladybug.ErrorToString(LadybugAPI.LadybugError)">
             Returns a string describing the passed LadybugError. Need to use IntPtr not string
             since the string should not be freed.
             See: MSDN "Memory Management with the Interop Marshaler"
             Note: You can use System.Runtime.InteropServices.Marshal.PtrToStringAnsi() to get a
             managed string.
            
             @param errorCode - The LadybugError to convert.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetLibraryVersion(System.IntPtr,System.UInt32@,System.UInt32@,System.UInt32@,System.UInt32@)">
             Returns the version numbers of the ladybug library.
            
             @param context   - The LadybugContext to access.
             @param major     - The major version number
             @param minor     - The minor version number
             @param type      - The version type (0-alpha, 1-beta, 2-release)
             @param nuild     - The build number
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.SaveImage(System.IntPtr,LadybugAPI.LadybugProcessedImage@,System.String,LadybugAPI.LadybugSaveFileFormat,System.Boolean)">
             Writes the specified image to disk. 
            
             If the file format is LADYBUG_FILEFORMAT_JPG, the JPEG compression quality
             may be set by calling ladybugSetImageSavingJpegQuality().
             
             If the file format is LADYBUG_FILEFORMAT_EXIF, the metadata in 
             LadybugProcessedImage should be filled in properly.
            
             If async is not specified or specified as false, the image saving is 
             performed synchronously. The function is blocked until the image saving
             operation completes.
            
             If async is true, the image saving is performed asynchronously on a 
             separate thread. The function returns immediately, before the operation 
             completes. Note that when attempting to access the image file specified by 
             path, the file does not appear on disk until the image saving operation 
             completes.
            
             @param context           - The LadybugContext to access.
             @param processedImage    - The image to save.
             @param path              - The name of the file to write to.
             @param format            - The file format to write to. See LadybugSaveFileFormat.
             @param async             - A flag indicating if the image saving operation is 
                                        synchronous or asynchronous. If true, the image saving 
                                        operation is asynchronous and this function returns
                                        immediately. The default value is false.
            
             @return A LadybugError indicating the success of the function.   
            
             @see ladybugSetImageSavingJpegQuality(), ladybugGetImageSavingJpegQuality()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetImageSavingJpegQuality(System.IntPtr,System.Int32)">
             Sets the JPEG compression quality to use when saving JPEG images.
            
             @param context   - The LadybugContext to access.
             @param quality   - The JPEG compression quality to use. 
                                The valid value range is between 1 and 100. Default is 85.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSaveImage(), ladybugGetImageSavingJpegQuality()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetImageSavingJpegQuality(System.IntPtr,System.Int32@)">
               Gets the JPEG compression quality being used when saving JPEG images.
            
             @param context   - The LadybugContext to access.
             @param quality   - A pointer to the JPEG quality being used to save images.
            
             @return A LadybugError indicating the success of the function.   
            
             @see ladybugSaveImage(), ladybugSetImageSavingJpegQuality()
        </member>
        <member name="M:LadybugAPI.Ladybug.CreateContext(System.IntPtr@)">
             Creates a new context for accessing the camera-specific functions of the
             library. A context must be created for every camera that is going to be 
             controlled. This must be done before any other function calls can be made.
            
             This function will set the context to NULL if it is unsuccessful.
            
             @param context - A pointer to a LadybugContext to fill with the created context.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugDestroyContext()
        </member>
        <member name="M:LadybugAPI.Ladybug.DestroyContext(System.IntPtr@)">
             Frees memory associated with the LadybugContext. This function should be 
             called when your application stops using the Ladybug API.
               
             This function will set the context to NULL if successful.
            
             @param context - A pointer to the LadybugContext to destroy.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugCreateContext()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetContextFeatureSupport(System.IntPtr,LadybugAPI.LadybugContextFeature,LadybugAPI.LadybugFeatureStatus@)">
             Queries the context about optional features that it supports.
            
             @param pcontext - A pointer to the LadybugContext.
             @param feature  - Specifies the feature of interest.
             @param pStatus  - Will be populated with the status of the requested feature.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.BusEnumerateCameras(System.IntPtr,LadybugAPI.LadybugCameraInfo[],System.UInt32@)">
             Fills an array of LadybugCameraInfo structures with all of the
             pertinent information from the attached cameras.
            
             If camera is not a Ladybug, the deviceType in the LadybugCameraInfo 
             structure is set as LADYBUG_DEVICE_UNKNOWN.
            
             @param context   - The LadybugContext to access.
             @param camInfo   - An array of LadybugCameraInfo structures, at least as
                                large as the number of Ladybug cameras on the bus.
             @param size      - The size of the array passed in. The number of cameras
                                detected is passed back in this argument also.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.InitializeFromSerialNumber(System.IntPtr,System.Int32)">
             Initializes a Ladybug camera using a serial number.  
            
             This function, ladybugInitializePlus(), or ladybugInitializeFromIndex()
             must be called before any of the ladybugStart commands.
            
             @param context      - The LadybugContext to access.
             @param serialNumber - The serial number of the Ladybug to initialize.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugInitializeFromIndex(), ladybugInitializePlus()
        </member>
        <member name="M:LadybugAPI.Ladybug.InitializeFromIndex(System.IntPtr,System.UInt32)">
             Initialize a Ladybug camera using a device index.
            
             @param context  - The LadybugContext to access.
             @param ulDevice - The device number of the Ladybug to initialize. Use 0 to 
                               initialize the first (or only) Ladybug on the bus.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugInitializePlus(), ladybugInitializeFromSerialNumber()
        </member>
        <member name="M:LadybugAPI.Ladybug.InitializePlus(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32)">
             Initialize a Ladybug camera using a device index. 
             
             In addition to the same behvaior as ladybugInitializeFromIndex(), 
             this function also allows the user to specify the number of buffers to use
             as well as optionally allocate those buffers outside the library.
            
             @param context       - The LadybugContext to access.
             @param nusIndex      - The device number of the Ladybug to initialize. Use 0 to 
                                   initialize the first (or only) Ladybug on the bus.
             @param numBuffers    - The number of buffers to expect or allocate. The 
                                   minimum number of buffers is 2. The maximum  number 
                                   of buffers is limited only by available memory.
             @param buffer        - A pointer to the user-supplied buffer.  If this argument 
                                   is NULL the library will allocate and free the buffers
                                   internally, otherwise the caller is responsible for
                                   allocation and deallocation.  
                                   This buffer has to be one buffer that can hold the entire
                                   images. Therefore, the size of the buffer has to be
                                   size >= numBuffers * size_of_each_image.
                                   No boundary checking is performed on these images,
                                   so if you are supplying your own buffers, they must
                                   be large enough to hold the largest image that is expected.                       
             @param uiSize        - The size of the buffer. This is valid when pBuffer is not NULL.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugInitializeFromIndex(), ladybugInitializeFromSerialNumber()
        </member>
        <member name="M:LadybugAPI.Ladybug.WriteConfigurationFile(System.IntPtr,System.String)">
             Writes the configuration information of the context to a file.
            
             @param context           - The LadybugContext to access.
             @param configFileName    - The name of the configuration file. If this file
                                        already exists, this function overwrites the existing
                                        file. If pszConfigFileName is NULL, this function
                                        returns an error.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugLoadConfig()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetCameraInfo(System.IntPtr,LadybugAPI.LadybugCameraInfo@)">
             Retrieves camera information for the given context.
            
             @param context - The LadybugContext to access.
             @param info    - A pointer to a LadybugCameraInfo structure to be populated.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.SetBusSpeed(System.IntPtr,LadybugAPI.LadybugBusSpeed,LadybugAPI.LadybugBusSpeed)">
             Sets the asynchronous and isochronous transmit and receive bus speeds.
            
             If only one of asyncBusSpeed or isochBusSpeed is required, set the other
             parameter to LADYBUG_S_FASTEST.
            
             @param context       - The LadybugContext to access.
             @param asyncBusSpeed - One of the available bus speeds, LADYBUG_S100, etc.
             @param isochBusSpeed - One of the available bus speeds, LADYBUG_S100, etc.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetBusSpeed(System.IntPtr,LadybugAPI.LadybugBusSpeed@,LadybugAPI.LadybugBusSpeed@)">
             Gets the current isochronous bus speed and the current asynchronous bus 
             speed.
            
             @param context     - The LadybugContext to access.
             @param pAsyncSpeed - The location to return current asynchronous bus speed
             @param pIsochSpeed - The location to return current isochronous bus speed
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetDataFormat(System.IntPtr,LadybugAPI.LadybugDataFormat@)">
             Gets the current data format that the camera is currently set to.
             Setting the data format for the camera can be performed when starting the camera.
            
             @param context    - The LadybugContext to access.
             @param dataFormat - The data format that the camera is currently set to.
            
             @see ladybugStart(), ladybugStartEx(), ladybugStartLockNext(), ladybugStartLockNextEx()
        </member>
        <member name="M:LadybugAPI.Ladybug.Start(System.IntPtr,LadybugAPI.LadybugDataFormat)">
             Starts the camera with the specified data format.  
            
             This function must be called before ladybugGrabImage().
            
             @param context - The LadybugContext to access.
             @param format  - The data format to start the camera in.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugStartEx(), ladybugGrabImage(), ladybugStop()
        </member>
        <member name="M:LadybugAPI.Ladybug.StartEx(System.IntPtr,LadybugAPI.LadybugDataFormat,System.UInt32,System.UInt32)">
             Starts the camera with the specified data format, packet size and 
             image buffer size.  
             
             This function must be called before ladybugGrabImage(). 
            
             This function negotiates 1394 bandwidth between the camera and the PC. 
             As there is a limited amount of bandwidth available on the bus, any 
             bandwidth used limits what is available to other devices on the bus.
             
             The bandwidth is negotiated based on two parameters:
             - The number of bytes sent in a packet every 1394 cycle (8000 cycles/s)
               - 1394a = 4096
               - 1394b = 9792
               - USB3 = 32000 (equivalent)
             - The total size of the buffer to be used for each image. The maximum
               size is the total number of pixels on all of the sensors.
               The larger the buffer size, the lower the maximum frame rate.
               - Ladybug2 = 1024 x 768 x 6 = 4718592
               - Ladybug3 = 1616 x 1232 x 6 = 11945472
               - Ladybug5 = 2448 x 2048 x 6 = 30081024
            
             In order to achieve the desired frame rate, the user may also have to
             set two additional parameters:
             - Set the frame rate on the head unit using the ladybugSetAbsProperty()
               function with the LADYBUG_FRAME_RATE argument in order to adjust the 
               number of images actually being sent by the camera.
             - When using JPEG formats, set the auto JPEG compression quality setting
               functionality via ladybugSetAutoJPEGQualityControlFlag() to make sure that
               the data being produced does not exceed the buffer size.
            
             The following tables indicate a couple of sample combinations of the
             packet size and buffer size parameters. Note the buffer size and maximum 
             frame rate are inversely related.
             This is useful for JPEG formats because you can adjust the image quality
             (determined by the buffer size) and the frame rate based on your 
             requirement.
            
             <PRE>
              Ladybug2
              |------------|----------------|-------------|-------------|---------------|
              | 1394 speed | Cameras on Bus | Packet Size | Buffer Size | Max Frame Rate|
              |------------|----------------|-------------|-------------|---------------|
              |    S800    |       1        |    9792     |  2400000    |   29.38 fps   |
              |    S800    |       1        |    9792     |  4718592    |   14.69 fps   |
              |    S800    |       2        |    4096     |  1200000    |   29.38 fps   |
              |    S400    |       1        |    4096     |  1000000    |   29.38 fps   |
              |    S400    |       2        |    2048     |  1000000    |   14.69 fps   |  
              |------------|----------------|-------------|-------------|---------------|
            
              Ladybug3
              |------------|----------------|-------------|-------------|---------------|
              | 1394 speed | Cameras on Bus | Packet Size | Buffer Size | Max Frame Rate|
              |------------|----------------|-------------|-------------|---------------|
              |    S800    |       1        |    9792     |  4650848    |   16.0 fps    |
              |    S800    |       1        |    9792     | 11945472    |    6.5 fps    |
              |    S800    |       2        |    4096     |  4650848    |    7.0 fps    |
              |    S400    |       1        |    4096     |  4650848    |    7.0 fps    |
              |    S400    |       1        |    4096     |  2571056    |   12.1 fps    |
              |    S400    |       2        |    2048     |  4650848    |    3.5 fps    |  
              |------------|----------------|-------------|-------------|---------------|
              
              Ladybug5
              |------------|----------------|-------------|-------------|---------------|
              | 1394 speed | Cameras on Bus | Packet Size | Buffer Size | Max Frame Rate|
              |------------|----------------|-------------|-------------|---------------|
              |    N/A     |       1        |    32000    |     TBD     |    10.0 fps   |
              |------------|----------------|-------------|-------------|---------------|
             </PRE>
            
             @param context      - The LadybugContext to access.
             @param format       - The data format to start the camera in.
             @param packetSize   - The packet size. 0 uses the current value on the camera.
             @param bufferSize   - The image buffer size for receiving image data. 0 uses
                                   the current buffer size for JPEG formats, and the 
                                   maximum buffer size for uncompressed images.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugStart(), ladybugGrabImage(), ladybugStop(), ladybugSetAutoJPEGQualityControlFlag()
        </member>
        <member name="M:LadybugAPI.Ladybug.StartLockNext(System.IntPtr,LadybugAPI.LadybugDataFormat)">
             Starts the camera and initializes the library for "lock next"
             functionality. 
             
             This function must be called before ladybugLockNext().
            
             @param context - The LadybugContext to access.
             @param format  - The data format to start the camera in.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugStartLockNextEx(), ladybugLockNext(), ladybugStop()
        </member>
        <member name="M:LadybugAPI.Ladybug.StartLockNextEx(System.IntPtr,LadybugAPI.LadybugDataFormat,System.UInt32,System.UInt32)">
             Starts the camera with the specified packet size and image buffer size, 
             and initializes the library for "lock next" functionality.
             
             This function must be called before ladybugLockNext().
            
             If the value of packetSize is not specified or specified as 0, 
             this call starts the camera with the current packet size value. 
             
             If the value of bufferSize is not specified or specified as 0, 
             this call starts the camera with the current buffer size setting 
             for JPEG compressed images and use the maximum buffer size value
             for uncompressed images.
            
             See comments in ladybugStartEx() for bandwidth negotiation between the
             camera and the PC. 
            
             @param context      - The LadybugContext to access.
             @param format       - The data format to start the camera in.
             @param packetSize   - The packet size.
             @param bufferSize   - The buffer size for receiving JPEG image data.
            
             @return A LadybugError indicating the success of the function. 
            
             @see ladybugStartLockNext(), ladybugLockNext(), ladybugStop()
        </member>
        <member name="M:LadybugAPI.Ladybug.Stop(System.IntPtr)">
             Stops the camera from grabbing images.
            
             This function should be called to stop the camera from sending images to the
             driver on the host machine. This function also frees any previously
             negotiated bandwidth.
            
             @param context - The LadybugContext to access.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugStart(),
               ladybugStartEx(),
               ladybugStartLockNext(),
               ladybugStartLockNextEx()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetGrabTimeout(System.IntPtr,System.UInt32)">
             Sets the timeout value for grab functions.
            
             Use of this capability is recommended in cases where it is not desirable
             to wait for the next image to arrive at the PC.  Setting timeout to 0
             can also be useful in cases where 'Lock Next' functionality is being used 
             and one is trying to determine how far behind they are.
            
             This function needs to be called prior to starting the camera.
            
             @param context   - The LadybugContext to access.
             @param timeout   - The timeout value in milliseconds.  A value of 
                                LADYBUG_INFINITE indicates an infinite wait.  A value of
                                zero indicates a nonblocking grab call.
            
             @return A LadybugError indicating the success of the function.
               
             @see ladybugStart(), ladybugStartEx(), ladybugStartLockNext(), ladybugStartLockNextEx()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetGrabTimeout(System.IntPtr,System.UInt32@)">
             Gets the timeout value for grab functions.
            
             @param context    - The LadybugContext to access.
             @param timeout    - The timeout value in milliseconds.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GrabImage(System.IntPtr,LadybugAPI.LadybugImage@)">
             Retrieves the newest image that has not previously been seen.
            
             If an image is waiting, the function will return immediately. Otherwise,
             the function will block until the next image arrives or the grab timeout
             expires - whichever happens first.
            
             @param context - The LadybugContext to access.
             @param pImage  - A pointer to an image structure. It will be filled with the
                              image information.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetGrabTimeout()
        </member>
        <member name="M:LadybugAPI.Ladybug.LockNext(System.IntPtr,LadybugAPI.LadybugImage@)">
             Locks the oldest image that has not been seen until it is manually released
             using ladybugUnlock() or ladybugUnlockAll().
            
             If there is an image available that has not yet been locked, this
             function returns immediately. Otherwise, it will block until an image
             arrives or the grab timeout expires - whichever happens first.
            
             As long as the user locks and releases the image buffers fast enough to
             prevent the allocated buffers from filling up, this function will ensure
             that no images are lost.
            
             Users can verify image sequentiality by comparing the sequence numbers of 
             the images.
            
             @param context - The LadybugContext to access.
             @param pImage  - A pointer to an image structure. It will be filled with the
                              image information.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetGrabTimeout(), ladybugUnlock(), ladybugUnlockAll()
        </member>
        <member name="M:LadybugAPI.Ladybug.Unlock(System.IntPtr,System.UInt32)">
             Unlocks and returns a previously locked buffer into the pool to be filled by
             the library.
            
             This function must be called for each image locked using ladybugLockNext(). 
             Otherwise, the library will run out of buffers.
            
             @param context       - The LadybugContext to access.
             @param bufferIndex   - The index of the buffer to unlock.
            
             @return A LadybugError indicating the success of the function. 
            
             @see ladybugLockNext(), ladybugUnlockAll()
        </member>
        <member name="M:LadybugAPI.Ladybug.UnlockAll(System.IntPtr)">
             Unlocks all locked images. This function is equivalent to calling 
             ladybugUnlock() for every locked buffer.
            
             @param context - The LadybugContext to access.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugLockNext(), ladybugUnlock()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetNumGPUs(System.IntPtr,System.UInt32@)">
             Get the number of CUDA GPUs available to perform GPU accelerated 
             color processing.
            
             @param context - The LadybugContext to access.
             @param numGPUs - The number of GPUs detected on the system.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetColorProcessingMethod(System.IntPtr,LadybugAPI.LadybugColorProcessingMethod@)">
             Gets the current color processing method.
            
             @param context - The LadybugContext to access.
             @param method  - The current color processing method.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetColorProcessingMethod()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetColorProcessingMethod(System.IntPtr,LadybugAPI.LadybugColorProcessingMethod)">
             Sets the color processing method to use.  
            
             This method is useful when trying to change the quality of the images that
             are produced by the library.
             
             If the color processing method is set to LADYBUG_HQLINEAR_GPU, the color
             processing will be performed on the GPU. This function checks the
             availability of the required GPU resources, and may return 
             LADYBUG_NO_CUDA_DEVICE indicating the required GPU functions 
             are not supported or return LADYBUG_GPU_CUDA_DRIVER_ERROR indicating 
             the GPU driver needs to be updated.
            
             @param context - The LadybugContext to access.
             @param method  - The color processing method to set.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetColorProcessingMethod()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetColorTileFormat(System.IntPtr,LadybugAPI.LadybugStippledFormat@)">
             Gets the current color tile format.
            
             @param context - The LadybugContext to access.
             @param format  - The current color tile format.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetColorTileFormat()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetColorTileFormat(System.IntPtr,LadybugAPI.LadybugStippledFormat)">
             Sets the current color tile format.
            
             The color tile format is read from hardware and set automatically.  
             You should not have to use this function.
            
             @param context - The LadybugContext to access.
             @param format  - The color tile format to set.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetColorTileFormat()
        </member>
        <member name="M:LadybugAPI.Ladybug.AddAlphaChannel(System.IntPtr,System.UInt32,System.UInt32,System.Byte**,LadybugAPI.LadybugPixelFormat)">
             Fills in the alpha channel value in the specified BGRA buffers. 
            
             The alpha channel specifies how the overlapped regions between cameras 
             should be rendered by OpenGL. Therefore, this function should be called 
             before passing the BGRA buffers to any of the OpenGL views.
            
             @param context         - The LadybugContext to access.
             @param numCols         - The number of columns in the images.
             @param numRows         - The number of rows in the images.
             @param arpBGRA32Images - The array of BGRA images
             @param pixelFormat     - Pixel format of the BGRA images
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.ConvertImage(System.IntPtr,LadybugAPI.LadybugImage@,System.Byte**,LadybugAPI.LadybugPixelFormat)">
             Converts the 6 images in a LadybugImage into 6 BGRA buffers. 
            
             The current color processing method is used.
            
             If arpDestBuffers is specified as NULL, this function will put the 
             processed images in internal buffers. If there are no internal 
             buffers, this function creates them.
             
             This function also checks the size of the internal buffers and adjusts 
             accordingly.
            
             If pixelFormat is specified as LADYBUG_UNSPECIFIED_PIXEL_FORMAT, the 
             image will be converted to LADYBUG_BGRU for a raw8 or 8-bit JPEG raw
             image, or LADYBUG_BGRU16 for a raw16 or 12-bit JPEG raw image. If the raw
             image format is raw8 or 8-bit JPEG, specifying pixelFormat as 
             LADYBUG_BGRU16 will return LADYBUG_INVALID_ARGUMENT. 
            
             The alpha mask (see ladybuggeom.h) is only written to the 
             destination buffer the first time any Convert functions
             are called.  If you wish to use a different destination buffer,
             call ladybugSetAlphaMasking( true ) again.
             
             Image border is cropped in order to remove LadybugImage::LadybugImageBorder
            
             If image needs adjustment ( see LadybugImage::LadybugImageHeader::needSoftwareAdjustment),
             the requested adjustment is applied (see ladybugImageAdjustment.h) 
            
             Falloff correction is applied if the falloff correction flag is on.
             
             Color correction is applied if the color correction flag is on.
             
             Image statistics data is calculated if the image statistics flag is on.
            
             @param context        - The LadybugContext to access.
             @param pImage         - A pointer to the raw image to be processed.
             @param arpDestBuffers - An array of pointers to destination buffers that 
                                     will hold the processed images. If specified as
                                     NULL, this function will use internal buffers as 
                                     destination buffers.
             @param pixelFormat    - Pixel format of the processed images. The
                                     supported formats depend on the data format
                                     of the raw image pointed by pImage. The default 
                                     value is LADYBUG_UNSPECIFIED_PIXEL_FORMAT.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetAlphaMasking(),
               ladybugSetFalloffCorrectionFlag(),
               ladybugSetFalloffCorrectionAttenuation(),
               ladybugSetColorCorrectionFlag(),
               ladybugGetColorCorrectionFlag(),
               ladybugSetColorCorrection(),
               ladybugGetColorCorrection(),
               ladybugSetImageStatisticsFlag(),
               ladybugGetImageStatisticsFlag(),
               ladybugGetImageStatistics()
        </member>
        <member name="M:LadybugAPI.Ladybug.ConvertImageEx(System.IntPtr,LadybugAPI.LadybugImage@,System.Byte**,LadybugAPI.LadybugPixelFormat)">
             Converts the 6 images in a LadybugImage into 6 BGRA buffers. 
            
             Same as ladybugConvertImage() but with an output telling the client
             what were the results of some automatic algorithm.
            
             @param context        - The LadybugContext to access.
             @param pImage         - A pointer to the raw image to be processed.
             @param arpDestBuffers - An array of pointers to destination buffers that 
                                     will hold the processed images. If specified as
                                     NULL, this function will use internal buffers as 
                                     destination buffers.
             @param pixelFormat    - Pixel format of the processed images. The
                                     supported formats depend on the data format
                                     of the raw image pointed by pImage.
             @param outImage       - Modifiers applied on the image when converting it.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugConvertImage()
        </member>
        <member name="M:LadybugAPI.Ladybug.ConvertImageBuffersPixelFormat(System.IntPtr,System.Byte**,System.Byte**,System.UInt32,System.UInt32,System.UInt32,LadybugAPI.LadybugPixelFormat,LadybugAPI.LadybugPixelFormat)">
             Converts the pixel format of buffers populated by ladybugConvertImage().
             This has no affect on the internal library buffers that are used when the
             arpDestBuffers argument to ladybugConvertImage() is NULL.
            
             Currently supported pairs of (pixelFormatIn, pixelFormatOut) are:
               (LADYBUG_BGR16, LADYBUG_BGR)
               (LADYBUG_BGRU16, LADYBUG_BGRU)
               (LADYBUG_BGRU16, LADYBUG_BGR)
            
             The input and output buffers can be disjoint:
             assert (noOverlap(arpBuffersIn[i], arpBuffersOut[i])) for i = 0 ... numBuffers - 1
             
             In-place operation is also supported:
             assert (arpBuffersIn[i] == arpBuffersOut[i]) for i = 0 ... numBuffers - 1
            
             @param context            - The LadybugContext to access.
             @param arpBuffersIn       - An array of input image buffers populated by ladybugConvertImage()
             @param arpBuffersOut      - An array of output image buffers
             @param numBuffers         - The number of buffers in arpImageBuffersIn and arpImageBuffersOut.
             @param numCols            - The number of columns in each input and output buffer.
                                         This depends on the LadybugColorProcessingMethod used to produce the LadybugImage.
             @param numRows            - The number of rows in each input and output buffer.
                                         This depends on the LadybugColorProcessingMethod used to produce the LadybugImage.
             @param pixelFormatIn      - The input pixel format of arpImageBuffersIn.
             @param pixelFormatOut     - The output pixel format requested for arpImageBuffersOut.
            
             @return A LadybugError indicating the success of the function.  
        </member>
        <member name="M:LadybugAPI.Ladybug.ExtractLadybugImageToFilesBGRU32(System.IntPtr,LadybugAPI.LadybugImage@,System.IntPtr*,LadybugAPI.LadybugImageInfo@,LadybugAPI.LadybugSaveFileFormat)">
             Converts a LadybugImage to a set of color-processed images. 
             The current color processing method is used.
            
             @param context        - The LadybugContext to access.
             @param image          - A pointer to the image to be processed.
             @param filenames      - An array of pointers to filenames for
                                     saving the images.
             @param imageInfo      - Image information extracted from the retrieved 
                                     image. Use NULL to disable.
             @param saveFormat     - The format to save the images in.
            
             @return A LadybugError indicating the success of the function.  
        </member>
        <member name="M:LadybugAPI.Ladybug.ExtractLadybugImageToAutoFilesBGRU32(System.IntPtr,LadybugAPI.LadybugImage@,System.Int32,System.String,LadybugAPI.LadybugImageInfo@,LadybugAPI.LadybugSaveFileFormat)">
             Converts an interleaved data buffer to a set of color-processed images.  
            
             The current color processing method is used.
            
             Filenames are generated automatically.
            
             The alpha mask (see ladybuggeom.h) are only written to the 
             destination buffer the first time any of the Convert functions
             are called.  If you wish to use a different destination buffer,
             call ladybugSetAlphaMasking( true ) again.
             
             Falloff correction is applied if the correction flag is on.
            
             @param context    - The LadybugContext to access.
             @param image      - A pointer to the raw image to be processed.
             @param imageNum     - The image number this image corresponds to.  Use -1
                                 to disable image numbering in the output filenames.
             @param path       - The base path to use when generating filenames.
             @param imageInfo  - Image information extracted from the image. 
                                 Use NULL to disable.
             @param saveformat - The format to save the images in.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetAlphaMasking(),
               ladybugSetFalloffCorrectionFlag(),
               ladybugSetFalloffCorrectionAttenuation()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetColorCorrectionFlag(System.IntPtr,System.Boolean@)">
             Retrieves a flag indicating if color correction is applied in 
             ladybugConvertImage(). It is off by default.
            
             @param context   - The LadybugContext to access.
             @param flag      - Location to return the color correction flag.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetColorCorrectionFlag(),
               ladybugGetColorCorrection(),
               ladybugSetColorCorrection(),
               ladybugConvertImage()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetColorCorrectionFlag(System.IntPtr,System.Boolean)">
             Sets an internal flag indicating if color correction is applied
             in ladybugConvertImage. It is off by default.
            
             @param context   - The LadybugContext to access.
             @param flag      - A flag indicating if color correction is applied.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetColorCorrectionFlag(),
               ladybugGetColorCorrection(),
               ladybugSetColorCorrection(),
               ladybugConvertImage()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetColorCorrection(System.IntPtr,LadybugAPI.LadybugColorCorrectionParams@)">
             Retrieves the current color correction values.
            
             @param context  - The LadybugContext to access.
             @param ccparams - The pointer to store the correction parameter struct.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetColorCorrectionFlag(),
               ladybugSetColorCorrectionFlag(),
               ladybugSetColorCorrection(),
               ladybugConvertImage()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetColorCorrection(System.IntPtr,LadybugAPI.LadybugColorCorrectionParams@)">
             Sets the color correction parameters to be applied when it is enabled.
            
             The valid range of values is between -255 and 255.
             A value of 0 indicates no adjustment.
            
             @param context  - The LadybugContext to access.
             @param ccparams - The pointer to the color correction parameter struct.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetColorCorrectionFlag(),
               ladybugSetColorCorrectionFlag(),
               ladybugGetColorCorrection(),
               ladybugConvertImage()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetFalseColorRemoval(System.IntPtr,System.Boolean@)">
             Retrieves a flag indicating if false color removal is applied in 
             ladybugConvertImage. It is off by default.
            
             False color removal is only supported for BGRU16 and BGRU images.
            
             @param context           - The LadybugContext to access.
             @param falseColorRemoval - Location to return the flag.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetFalseColorRemoval(), ladybugConvertImage()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetFalseColorRemoval(System.IntPtr,System.Boolean)">
             Sets an internal flag indicating if false color removal is applied
             in ladybugConvertImage. It is off by default.
            
             False color removal is only supported for BGRU16 images.
            
             @param context           - The LadybugContext to access.
             @param falseColorRemoval - A flag indicating if false color removal is applied.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetFalseColorRemoval(), ladybugConvertImage()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetSharpening(System.IntPtr,System.Boolean@)">
             Retrieves a flag indicating if image sharpening is applied in 
             ladybugConvertImage. It is off by default.
            
             @param context   - The LadybugContext to access.
             @param flag      - Location to return the sharpening flag.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetSharpening(),
               ladybugConvertImage()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetSharpening(System.IntPtr,System.Boolean)">
             Sets an internal flag indicating if image sharpening is applied
             in ladybugConvertImage. It is off by default.
            
             @param context   - The LadybugContext to access.
             @param flag      - A flag indicating if sharpening is applied.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetSharpening(),
               ladybugConvertImage()
        </member>
        <member name="M:LadybugAPI.Ladybug.EnableImageStabilization(System.IntPtr,System.Boolean,LadybugAPI.LadybugStabilizationParams@)">
             Enables or disables image stabilization functionality.
             When stabilization is enabled, the output of stitched images are
             stabilized so that the effect of camera rotation is minimized.
             This feature works by setting an initial rotation position, and in
             successive frames, the rotation positions fall back to that initial
             setting according to a specified decay rate.
             This function can be applied either during image grabbing or
             when images are read from stream files. We recommend enabling image
             stabilization while reading stream files, as this feature can be 
             computationally intensive and may result in lost frames during image capture.
            
             @param context - The LadybugContext to access.
             @param bEnable - Flag to indicate whether stabilization is enabled or disabled.
             @param pParams - The stabilization control parameters used when bEnable is
                              true. If this is null, the default parameters are used.
            
             @return A LadybugError indicating the success of the function.   
            
             @see ladybugConvertImage().
        </member>
        <member name="M:LadybugAPI.Ladybug.SetToneMappingParams(System.IntPtr,LadybugAPI.LadybugToneMappingParams@)">
             Set tone mapping parameters.
            
             OpenGL tonemapping will affect the OpenGL state on the currently bound
             device context.  Thus, you should have the same device context bound as
             when you call ladybugUpdateTextures().
            
             @param context           - The LadybugContext to access.
             @param toneMappingParams - Parameters for tone mapping.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetToneMappingParams(System.IntPtr,LadybugAPI.LadybugToneMappingParams@)">
             Get tone mapping parameters.
            
             @param context            - The LadybugContext to access.
             @param toneMappingParams  - Parameters for tone mapping.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetFalloffCorrectionFlag(System.IntPtr,System.Boolean@)">
             Retrieves a flag indicating if intensity falloff will be corrected in 
             ladybugConvertImage.
            
             The exact amount to be corrected is controlled by the correction
             attenuation factor set in ladybugSetFalloffCorrectionAttenuation.
            
             @param context          - The LadybugContext to access.
             @param pcorrectFalloff   - Location to return the intensity falloff 
                                       correction flag.
            
             @return A LadybugError indicating the success of the function.
            
             @see   ladybugSetFalloffCorrectionFlag(),
               ladybugGetFalloffCorrectionAttenuation(),
               ladybugSetFalloffCorrectionAttenuation(),
               ladybugConvertImage()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetFalloffCorrectionFlag(System.IntPtr,System.Boolean)">
             Sets an internal flag indicating if intensity falloff will be corrected
             in ladybugConvertImage.
            
             The exact amount to be corrected is controlled by the correction
             attenuation factor set in ladybugSetFalloffCorrectionAttenuation().
            
             @param context         - The LadybugContext to access.
             @param correctFalloff - A flag indicating if intensity falloff will be 
                                      corrected.
            
             @return A LadybugError indicating the success of the function.
            
             @see   ladybugGetFalloffCorrectionFlag(),
               ladybugGetFalloffCorrectionAttenuation(),
               ladybugSetFalloffCorrectionAttenuation(),
               ladybugConvertImage()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetFalloffCorrectionAttenuation(System.IntPtr,System.Single@)">
             Gets the current falloff correction value.
            
             @param context               - The LadybugContext to access.
             @param attenuationFraction   - Location to return the fraction used for
                                            falloff correction.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetFalloffCorrectionFlag(),
               ladybugSetFalloffCorrectionFlag(),
               ladybugSetFalloffCorrectionAttenuation()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetFalloffCorrectionAttenuation(System.IntPtr,System.Single)">
             Sets the current falloff correction value.
            
             @param context              - The LadybugContext to access.
             @param attenuationFraction  - Fraction used to adjust the intensity correction 
                                           amount. (Must be a value between 0.0 and 1.0).
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetFalloffCorrectionFlag(),
               ladybugSetFalloffCorrectionFlag(),
               ladybugGetFalloffCorrectionAttenuation()
        </member>
        <member name="M:LadybugAPI.Ladybug.CorrectBGRUFallofEx(System.IntPtr,System.UInt32,System.UInt32,System.Byte**,LadybugAPI.LadybugPixelFormat,System.Int64)">
             Applies intensity falloff correction on the specified BGRU images.
            
             The amount of correction applied will depend on the setting of the current
             correction attenuation factor (see ladybugSetFalloffCorrectionAttenuation)
             and the specified gamma.
            
             The specified gamma should match the gamma setting when these images were
             originally captured. Gamma can be extracted either interactively from the
             Camera Control Dialog of the LadybugCap or LadybugCapPro programs, or 
             programmatically from the ulGamma field inside the LadybugImageInfo 
             of the original LadybugImage.
            
             Note that the ulGamma field in LadybugImageInfo is in IEEE-1394
             register encoded format. Be sure to decode it appropriately to extract 
             the value (see description in the FLIR Machine Vision Camera Register Reference).
            
             @param context          - The LadybugContext to access.
             @param numCols          - The number of columns in the images.
             @param numRows          - The number of rows in the images.
             @param arpBGRU32Images  - The array of BGRU images.
             @param pixelFormat      - The pixel format of the BGRU images.
             @param gamma            - The gamma value under which the images were captured.
                                      (A -1 gamma value will invoke the default gamma value)
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetFalloffCorrectionAttenuation(),
               ladybugSetFalloffCorrectionAttenuation()
        </member>
        <member name="M:LadybugAPI.Ladybug.CorrectStippledFalloffEx(System.IntPtr,System.UInt32,System.UInt32,System.Byte**,System.Int64)">
             Applies intensity falloff correction on the specified stippled images.
            
             The amount of correction applied will depend on the setting of the
             current correction attenuation factor (see ladybugSetFalloffCorrectionAttenuation)
             and the specified gamma.
            
             The specified gamma should match the gamma setting when these images were
             originally captured. Gamma can be extracted either interactively from the
             Camera Control Dialog of the LadybugCap or LadybugCapPro programs or 
             programmatically from the ulGamma field inside the LaydbugImageInfo of 
             the original LadybugImage.
            
             Note that the ulGamma field in LadybugImageInfo is in IEEE-1394
             register encoded format. Be sure to decode it appropriately to extract 
             the value (see description in the FLIR Machine Vision Camera Register Reference).
            
             @param context            - The LadybugContext to access.
             @param numCols            - The number of columns in the images.
             @param numRows            - The number of rows in the images.
             @param arpStippledImages  - The array of stippled images.
             @param gamma              - The gamma value under which the images were captured.
                                        (A -1 gamma value will invoke the default gamma value)
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetFalloffCorrectionAttenuation(),
               ladybugSetFalloffCorrectionAttenuation()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetPropertyRange(System.IntPtr,LadybugAPI.LadybugProperty,System.Boolean@,System.Int32@,System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
             Get information about the range of a specific camera property.
            
             The values obtained from this function are useful when trying to interpret
             and set camera properties with the ladybugGetProperty and 
             ladybugSetProperty functions.
            
             @param context   - The LadybugContext to access.
             @param property  - The camera property to query.
             @param present - Whether or not the property is present.
             @param min     - The minimum value of the property.
             @param max     - The maximum value of the property.
             @param default - The default value of the property.
             @param auto    - The availability of auto mode for the property.
             @param manual  - The ability to manually control the value of the property.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetProperty(),
                ladybugSetProperty(),
                ladybugGetAbsProperty(),
                ladybugSetAbsProperty(),
                ladybugGetPropertyEx(),
                ladybugSetPropertyEx(),
                ladybugGetAbsPropertyEx(),
                ladybugSetAbsPropertyEx(),
                ladybugGetPropertyRangeEx(),
                ladybugGetAbsPropertyRange()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetPropertyRangeEx(System.IntPtr,LadybugAPI.LadybugProperty,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Int32@,System.Int32@)">
             Gets information about the features and range of values of a specific camera property. 
            
             This function provides better access to camera features as compared to
             ladybugGetPropertyRange(). The values obtained from this function are 
             useful when trying to interpret and set camera properties with the 
             ladybugGetProperty and ladybugSetProperty functions.
            
             @param context   - The LadybugContext to access.
             @param property  - The camera property to query.
             @param present   - Whether or not the property is present.
             @param onePush   - The availability of the one push feature.
             @param readOut   - The ability to read out the value of this property.
             @param onOff     - The ability to turn this property on and off.
             @param auto      - The availability of auto mode for the property.
             @param manual    - The ability to manually control the value of the property.
             @param min       - The minimum possible value of the property.
             @param max       - The maximum possible value of the property.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetProperty(),
                ladybugSetProperty(),
                ladybugGetAbsProperty(),
                ladybugSetAbsProperty(),
                ladybugGetPropertyEx(),
                ladybugSetPropertyEx(),
                ladybugGetAbsPropertyEx(),
                ladybugSetAbsPropertyEx(),
                ladybugGetPropertyRange(),
                ladybugGetAbsPropertyRange()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetAbsPropertyRange(System.IntPtr,LadybugAPI.LadybugProperty,System.Boolean@,System.Single@,System.Single@,System.IntPtr@,System.IntPtr@)">
             Gets the range of possible absolute values of the specified camera property. 
            
             @param context   - The LadybugContext to access.
             @param property  - The camera property to query.
             @param present   - Presence of the property.
             @param min       - The absolute minimum value of the property.
             @param max       - The absolute maximum value of the property.
             @param units     - A string containing the units of the register.
             @param unitAbbr  - A string containing an abbreviation of the units.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetProperty(),
                ladybugSetProperty(),
                ladybugGetPropertyEx(),
                ladybugSetPropertyEx(),
                ladybugSetAbsProperty(),
                ladybugGetAbsProperty(),
                ladybugGetAbsPropertyEx(),
                ladybugSetAbsPropertyEx(),
                ladybugGetPropertyRange(),
                ladybugGetPropertyRangeEx(),
        </member>
        <member name="M:LadybugAPI.Ladybug.GetProperty(System.IntPtr,LadybugAPI.LadybugProperty,System.Int32@,System.Int32@,System.Boolean@)">
             Gets the current values of the specified property.
             Most properties only have an "A" value. 
            
             @param context  - The LadybugContext to access.
             @param property - The camera property to query.
             @param valueA   - The "A", or first, value of the property.
             @param valueB   - The "B", or second, value of the property.
             @param auto     - The current auto value of the property.
            
             @return A LadybugError indicating the success of the function.  
            
             @see ladybugSetProperty(),
                ladybugGetPropertyEx(),
                ladybugSetPropertyEx(),
                ladybugSetAbsProperty(),
                ladybugGetAbsProperty(),
                ladybugGetAbsPropertyEx(),
                ladybugSetAbsPropertyEx(),
                ladybugGetPropertyRange(),
                ladybugGetPropertyRangeEx(),
                ladybugGetAbsPropertyRange()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetPropertyEx(System.IntPtr,LadybugAPI.LadybugProperty,System.Boolean@,System.Boolean@,System.Boolean@,System.Int32@,System.Int32@)">
             Gets information about the features and current values of a specified camera property. 
            
             This API function provides better access to camera features as compared to
             ladybugGetProperty().
            
             @param context   - The LadybugContext to access.
             @param property  - The camera property to query.
             @param onePush   - The availability of the one push feature.
             @param onOff     - The ability to turn this property on and off.
             @param auto      - The auto value of the property.
             @param valueA    - The "A" value.
             @param valueB    - The "B" value.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetProperty(),
                ladybugSetProperty(),
                ladybugSetPropertyEx(),
                ladybugGetAbsProperty(),
                ladybugSetAbsProperty(),
                ladybugGetAbsPropertyEx(),
                ladybugSetAbsPropertyEx(),
                ladybugGetPropertyRange(),
                ladybugGetPropertyRangeEx(),
                ladybugGetAbsPropertyRange()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetAbsProperty(System.IntPtr,LadybugAPI.LadybugProperty,System.Single@)">
             Gets the current absolute value of the specified property.
            
             @param context  - The LadybugContext to access.
             @param property - The camera property to query.
             @param valueA   - A pointer to a float that will contain the result.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetProperty(),
                ladybugSetProperty(),
                ladybugGetPropertyEx(),
                ladybugSetPropertyEx(),
                ladybugSetAbsProperty(),
                ladybugGetAbsPropertyEx(),
                ladybugSetAbsPropertyEx(),
                ladybugGetPropertyRange(),
                ladybugGetPropertyRangeEx(),
                ladybugGetAbsPropertyRange()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetAbsPropertyEx(System.IntPtr,LadybugAPI.LadybugProperty,System.Boolean@,System.Boolean@,System.Boolean@,System.Single@)">
             Gets information about the range of the absolute value of a specific camera property.
            
             This API function provides better access to camera features as compared to
             ladybugGetAbsProperty().
            
             @param context   - The LadybugContext to access.
             @param property  - The camera property to query.
             @param onePush   - The availability of the one push feature.
             @param onOff     - The ability to turn this property on and off.
             @param auto      - The auto value of the property.
             @param value     - A pointer to a float that will contain the result.
            
             @return A LadybugError indicating the success of the function.
            
             @see    ladybugGetProperty(),
                ladybugSetProperty(),
                ladybugGetPropertyEx(),
                ladybugSetPropertyEx(),
                ladybugGetAbsProperty(),
                ladybugSetAbsProperty(),
                ladybugGetAbsPropertyEx(),
                ladybugGetPropertyRange(),
                ladybugGetPropertyRangeEx(),
                ladybugGetAbsPropertyRange()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetProperty(System.IntPtr,LadybugAPI.LadybugProperty,System.Int32,System.Int32,System.Boolean)">
             Sets a camera property.  
             Most properties only require an "A" value.
            
             @param context   - The LadybugContext to access.
             @param property  - The camera property to query.
             @param valueA    - The "A", or first, new value of the property.
             @param valueB    - The "B", second, new value of the property.
             @param auto      - The auto value.
            
             @return A LadybugError indicating the success of the function. 
            
             @see ladybugGetProperty(),
                ladybugGetPropertyEx(),
                ladybugSetPropertyEx(),
                ladybugGetAbsProperty(),
                ladybugSetAbsProperty(),
                ladybugGetAbsPropertyEx(),
                ladybugSetAbsPropertyEx(),
                ladybugGetPropertyRange(),
                ladybugGetPropertyRangeEx(),
                ladybugGetAbsPropertyRange()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetPropertyEx(System.IntPtr,LadybugAPI.LadybugProperty,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
             Sets the value and other features of a specified camera property.   
            
             This API function provides better access to camera features as compared
             to ladybugSetProperty().
            
             @param context   - The LadybugContext to access.
             @param property  - The camera property to query.
             @param onePush   - Specifies if the one push feature is enabled.
             @param onOff     - Specifies if the property should be on or off.
             @param auto      - Specifies if the property can be automatically controlled by the camera..
             @param valueA    - The "A", or first, value of the property.
             @param valueB    - The "B", or second, value of the property.
            
             @return A LadybugError indicating the success of the function.
            
             @see    ladybugGetProperty(),
                ladybugSetProperty(),
                ladybugGetPropertyEx(),
                ladybugGetAbsProperty(),
                ladybugSetAbsProperty(),
                ladybugGetAbsPropertyEx(),
                ladybugSetAbsPropertyEx(),
                ladybugGetPropertyRange(),
                ladybugGetPropertyRangeEx(),
                ladybugGetAbsPropertyRange()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetAbsProperty(System.IntPtr,LadybugAPI.LadybugProperty,System.Single)">
             Sets the absolute value of a camera property.
            
             @param context  - The LadybugContext to access.
             @param property - The camera property to query.
             @param valueA   - A float containing the new value of the parameter.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetProperty(),
                ladybugSetProperty(),
                ladybugGetPropertyEx(),
                ladybugSetPropertyEx(),
                ladybugGetAbsProperty(),
                ladybugGetAbsPropertyEx(),
                ladybugSetAbsPropertyEx(),
                ladybugGetPropertyRange(),
                ladybugGetPropertyRangeEx(),
                ladybugGetAbsPropertyRange()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetAbsPropertyEx(System.IntPtr,LadybugAPI.LadybugProperty,System.Boolean,System.Boolean,System.Boolean,System.Single)">
             Sets the absolute value of a camera property. 
            
             This function also allows the user to specify the one push, on/off, and auto 
             settings of the same property. 
            
             This API function provides better access to camera features as compared
             to ladybugSetProperty().
            
             @param context   - The LadybugContext to access.
             @param property  - The camera property to query.
             @param onePush   - Specifies if the one push feature is enabled.
             @param onOff     - Specifies if the property should be on or off.
             @param auto      - Specifies if the property can be automatically controlled by the camera.
             @param value     - A float containing the new value of the parameter.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetProperty(),
                ladybugSetProperty(),
                ladybugGetPropertyEx(),
                ladybugSetPropertyEx(),
                ladybugGetAbsProperty(),
                ladybugSetAbsProperty(),
                ladybugGetPropertyRange(),
                ladybugGetPropertyRangeEx(),
                ladybugGetAbsPropertyRange()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetRegister(System.IntPtr,System.UInt32,System.UInt32@)">
             Gets the value of a register on the camera.
            
             pulValue is set to zero if this function fails.
            
             All of the Ladybug camera systems loosely follow the IIDC digital camera 
             specification. As such, users wishing to explore low level camera
             configuration options should reference the FLIR Machine Vision Camera Register
             Reference.
            
             @param context   - The LadybugContext to access.
             @param register  - The register to query.
             @param value     - The returned register value.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetRegister()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetRegister(System.IntPtr,System.UInt32,System.UInt32)">
             Sets the value of a register on the camera.
            
             @param context   - The LadybugContext to access.
             @param register  - The register to set.
             @param value     - The value of the register to set.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetRegister()
        </member>
        <member name="M:LadybugAPI.Ladybug.ReadRegisterBlock(System.IntPtr,System.UInt16,System.UInt32,System.UInt32*@,System.UInt32)">
             Provides block-read (asynchronous) access to the entire register space of 
             the Ladybug camera.
            
             @param context   - The LadybugContext to access.
             @param addrHigh  - The top 16 bits of the 48-bit absolute address to read.
             @param addrLow   - The bottom 32 bits of the 48-bit absolute address to read.
             @param buffer    - The buffer that will receive the data. Must be of size ulLength.
             @param length    - The length, in quadlets, of the block to read.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugWriteRegisterBlock()
        </member>
        <member name="M:LadybugAPI.Ladybug.WriteRegisterBlock(System.IntPtr,System.UInt16,System.UInt32,System.UInt32*,System.UInt32)">
             Provides block-write (asynchronous) access to the entire register space of 
             the Ladybug camera.
            
             @param context   - The LadybugContext to access.
             @param addrHigh  - The top 16 bits of the 48-bit absolute address to write.
             @param addrLow   - The bottom 32 bits of the 48-bit absolute address to write.
             @param buffer    - The buffer that contains the data to be written.
             @param length    - The length, in quadlets, of the block to write.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugReadRegisterBlock()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetIndPropertyRange(System.IntPtr,LadybugAPI.LadybugIndependentProperty,System.UInt32,System.Boolean@,System.UInt32@,System.UInt32@)">
             Gets the range of possible values of a property associated with a 
             specified camera, independent of other Ccameras in the camera unit.
            
             @param context   - The LadybugContext to access.
             @param property  - The independent property to query.
             @param camera    - The camera to query.  
             @param present   - The presence of the register.
             @param min       - The minimum value.
             @param max       - The maximum value.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetIndProperty(System.IntPtr,LadybugAPI.LadybugIndependentProperty,System.UInt32,System.UInt64@,System.Boolean@,System.Boolean@,System.UInt32@)">
             Gets the current value and other features of a property associated 
             with a specified camera, independent of other cameras in the camera unit.
            
             @param context        - The LadybugContext to access.
             @param property       - The independent property to query.
             @param uiCamera       - The CCD to query.  
             @param pulValue       - The current value of the property.
             @param pbOnOff        - Whether the property is on or off.
             @param pbAuto         - Whether or not the auto flag is set for the property.
             @param puiAutoExpCams - A bitfield indicating which of the other CCDs this
                                     CCD should use for Auto Exposure calculations.
                                     Only used with LADYBUG_SUB_AUTO_EXPOSURE. 
                                     See LadybugCameraBits.
                                     This parameter is only valid for Ladybug2.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetIndProperty()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetIndProperty(System.IntPtr,LadybugAPI.LadybugIndependentProperty,System.UInt32,System.UInt64,System.Boolean,System.Boolean,System.UInt32)">
             Sets the value of a property of a specified camera, independent of the 
             other cameras in the camera unit.
             
             For Ladybug3 and Ladybug5, the bOnOff field affects all cameras
             simultaneously.  For example, On is set to any one camera, then the camera 
             is set to independent shutter (or gain) mode, where each shutter (or gain)
             can take different values. If you set Off to any one camera, all the 
             shutter (or gain) values will be the same across all cameras. 
            
             @param context       - The LadybugContext to access.
             @param property      - The independent property to query.
             @param uiCamera      - The camera to query.  
             @param ulValue       - The value to set.
             @param bOnOff        - Specifies if the property should be on or off. *                        
             @param bAuto         - Specifies if the property should be automatically 
                                    controlled by the camera. To manually control the value
                                    with ulValue, this must be false.
             @param uiAutoExpCams - A bitfield indicating which of the other cameras this 
                                    camera should use for Auto Exposure calculations.  
                                    Only used with LADYBUG_SUB_AUTO_EXPOSURE. 
                                    See LadybugCameraBits.
                                    This parameter is only valid for Ladybug2.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetIndProperty()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetAutoShutterRange(System.IntPtr,LadybugAPI.LadybugAutoShutterRange@)">
             Get the current shutter range set on the camera. If a range not matching
             the preset values is entered, then LADYBUG_AUTO_SHUTTER_CUSTOM is returned 
             as the shutter range.
            
             @param context - The LadybugContext to access.
             @param autoShutterRange - The shutter range set on the camera.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.SetAutoShutterRange(System.IntPtr,LadybugAPI.LadybugAutoShutterRange)">
             Set the shutter range on the camera. LADYBUG_AUTO_SHUTTER_CUSTOM is not
             an acceptable value.
            
             @param context - The LadybugContext to access.
             @param autoShutterRange - The shutter range to set on the camera.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetAutoExposureROI(System.IntPtr,LadybugAPI.LadybugAutoExposureRoi@)">
             Get the ROI used for auto exposure calculations from the camera. 
            
             This is a separate setting from the auto exposure ROI setting 
             for post processing.
            
             This is only supported for Ladybug5 or newer cameras.
            
             @param context - The LadybugContext to access.
             @param roi - The auto exposure ROI set on the camera.
        </member>
        <member name="M:LadybugAPI.Ladybug.SetAutoExposureROI(System.IntPtr,LadybugAPI.LadybugAutoExposureRoi)">
             Set the ROI used for auto exposure calculations to the camera. 
            
             This is a separate setting from the auto exposure ROI setting 
             for post processing.
            
             This is only supported for Ladybug5 or newer cameras.
            
             @param context - The LadybugContext to access.
             @param roi - The auto exposure ROI to set on the camera.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetMemoryChannel(System.IntPtr,System.UInt32@)">
             Get the current memory channel in use.
            
             @param context - The LadybugContext to access.
             @param currMemoryChannel - Current memory channel in use.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.SaveToMemoryChannel(System.IntPtr,System.UInt32)">
             Save current settings to specified memory channel.
            
             @param context - The LadybugContext to access.
             @param memoryChannel - Memory channel to save to.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.RestoreFromMemoryChannel(System.IntPtr,System.UInt32)">
             Restore settings from specified memory channel.
            
             @param context - The LadybugContext to access.
             @param memoryChannel - Memory channel to restore from.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetMemoryChannelInfo(System.IntPtr,System.UInt32@)">
             Get the number of memory channels available on the camera.
            
             @param context - The LadybugContext to access.
             @param numMemoryChannels - Number of memory channels.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetJPEGQuality(System.IntPtr,System.Int32@)">
             Gets the current JPEG compression quality setting on the camera (used with JPEG data formats).
             Used if ladybugGetAutoJPEGQualityControlFlag() is false.
            
             @param context   - The LadybugContext to access.     
             @param quality   - The retrieved quality metric.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetJPEGQuality()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetJPEGQuality(System.IntPtr,System.Int32)">
             Sets the JPEG compression quality setting on the camera (used with JPEG data formats).
             Used if ladybugGetAutoJPEGQualityControlFlag() is false.
            
             @param context  - The LadybugContext to access.     
             @param quality  - An integer from 1 to 100 indicating the JPEG compression 
                               quality.  Higher settings result in a larger image
                               data size and slower decompression rate.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetJPEGQuality()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetAutoJPEGBufferUsage(System.IntPtr,System.UInt32@)">
             Gets the current value of the JPEG image buffer usage register.
             Used if ladybugGetAutoJPEGQualityControlFlag() is true.
            
             @param context        - The LadybugContext to access.     
             @param puiBufferUsage - The retrieved JPEG image buffer usage value.
            
             @return   A LadybugError indicating the success of the function.
            
             @see   ladybugSetAutoJPEGBufferUsage(),
               ladybugSetAutoJPEGQualityControlFlag(),
               ladybugGetAutoJPEGQualityControlFlag(),
        </member>
        <member name="M:LadybugAPI.Ladybug.SetAutoJPEGBufferUsage(System.IntPtr,System.UInt32)">
             Sets a value to JPEG buffer usage register indicating the percentage of 
             of the image buffer used for JPEG image data.  Specifying a value less 
             than the maximum allows for room in the image buffer to accommodate extra
             image data, depending on scene variations from frame to frame.
            
             Used if ladybugGetAutoJPEGQualityControlFlag() is true.
            
             A uiBufferUsage value of 0 is treated as follows:
             - 0x66 (80%) for Ladybug2 
             - 0x72 (90%) for Ladybug3 firmware v1.2.2.1 or later
            
             @param context       - The LadybugContext to access.     
             @param uiBufferUsage - An integer from 0x00 (0%) to 0x7F (100%) indicating the 
                                    percentage of the image buffer used for JPEG image data.
            
             @return A LadybugError indicating the success of the function.
            
             @see   ladybugGetAutoJPEGBufferUsage()
               ladybugSetAutoJPEGQualityControlFlag(),
               ladybugGetAutoJPEGQualityControlFlag(),
        </member>
        <member name="M:LadybugAPI.Ladybug.GetAutoJPEGQualityControlFlag(System.IntPtr,System.Boolean@)">
             Gets the auto JPEG compression quality control flag.
            
             @param context                  - The LadybugContext to access.
             @param autoJPEGQualityControl   - Location to return the auto JPEG quality 
                                               control flag. If the value is true, then
                                               the camera is automatically controlling the
                                               compression quality.
            
             @return A LadybugError indicating the success of the function.
            
             @see   ladybugSetAutoJPEGQualityControlFlag(),
               ladybugGetAutoJPEGBufferUsage(),
               ladybugSetAutoJPEGBufferUsage()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetAutoJPEGQualityControlFlag(System.IntPtr,System.Boolean)">
             Sets the auto JPEG compression quality control flag.
            
             @param context                 - The LadybugContext to access.
             @param autoJPEGQualityControl  - A flag indicating if the Ladybug camera should
                                              automatically control JPEG compression            
                                              quality. If the value is true, then
                                              the camera will automatically control the
                                              compression quality.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetAutoJPEGQualityControlFlag(),
               ladybugGetAutoJPEGBufferUsage(),
               ladybugSetAutoJPEGBufferUsage()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetTriggerModeInfo(System.IntPtr,LadybugAPI.LadybugTriggerModeInfo@)">
             This function retrieves information from the camera about the 
             trigger feature.
            
             @param context          - The LadybugContext to access.
             @param triggerModeInfo  - Structure that receives the information from 
                                       the camera about the trigger.
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetTriggerMode(),
               ladybugSetTriggerMode()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetTriggerMode(System.IntPtr,LadybugAPI.LadybugTriggerMode@)">
             This function gets the current settings for the trigger feature. 
            
             @param context      - The LadybugContext to access.
             @param triggerMode  - Structure that receives the current settings 
                                   from the camera about the trigger.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetTriggerModeInfo(), ladybugSetTriggerMode()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetTriggerMode(System.IntPtr,LadybugAPI.LadybugTriggerMode,System.Boolean)">
             This function sets the trigger settings on the camera. This will also set 
             the specified GPIO pin to an input for trigger input.
             
             For Ladybug2, the image grabbed at the trigger is
             the image of the previous trigger, resulting in a one-trigger
             delay.
            
             @param context      - The LadybugContext to access.
             @param triggerMode  - Structure that provides the settings to be 
                                   written to the camera.
             @param broadcast    - Flag indicating whether setting of the 
                                   trigger should be broadcast.   
            
             @return A LadybugError indicating the success of the function.
            
             Remarks:
            
             @see ladybugGetTriggerMode(), ladybugGetTriggerModeInfo()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetStrobeModeInfo(System.IntPtr,LadybugAPI.LadybugStrobeInfo@)">
             This function retrieves information about the strobe feature
             from the camera.
            
             @param context     - The LadybugContext to access.
             @param strobeInfo  - Structure that receives the information from the 
                                  camera about the strobe. The uiSource parameter
                                  must contain the source pin to be queried.
            
             @return   A LadybugError indicating the success of the function.
            
             @see ladybugGetStrobe(), ladybugSetStrobe()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetStrobeMode(System.IntPtr,LadybugAPI.LadybugStrobeControl@)">
             This function gets the current settings for the strobe feature. 
             Note that the strobe pin must be specified in the structure 
             before being passed in as an argument.
            
             @param context        - The LadybugContext to access.
             @param strobeControl  - Structure that receives the current settings 
                                     from the camera about the strobe. The uiSource 
                                     parameter must contain the source pin to be queried.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetStrobeInfo(), ladybugSetStrobe()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetStrobe(System.IntPtr,LadybugAPI.LadybugStrobeControl,System.Boolean)">
             This function sets up the strobe and turns it on for the
             specified source. Note that this function will also set the 
             GPIO pin to an output for strobe.
            
             @param context        - The LadybugContext to access.
             @param strobeControl - Structure that provides the settings to be 
                                     written to the camera.
             @param broadcast      - Flag indicating whether setting of the strobe 
                                     feature should be broadcast.    
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetStrobe(), ladybugGetStrobeInfo()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetImageStatisticsFlag(System.IntPtr,System.Boolean)">
             Sets an internal flag indicating if image statistics data will be 
             calculated in ladybugConvertImage().
            
             @param context          - The LadybugContext to access.
             @param imageStatistics  - Flag indicating whether image statistics data
                                       will be calculated.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetImageStatisticsFlag(), ladybugGetImageStatistics(), ladybugConvertImage()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetImageStatisticsFlag(System.IntPtr,System.Boolean@)">
             Retrieves a flag indicating if image statistics are calculated in 
             ladybugConvertImage. Off by default.
            
             @param context           - The LadybugContext to access.
             @param imageStatistics   - Location to return the image statistics flag.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetImageStatisticsFlag(), ladybugGetImageStatistics(), ladybugConvertImage()
        </member>
        <!-- Badly formed XML comment ignored for member "M:LadybugAPI.Ladybug.GetImageStatistics(System.IntPtr,System.UInt32,LadybugAPI.LadybugImageStatistics@)" -->
        <member name="M:LadybugAPI.Ladybug.DoOneShotAutoWhiteBalance(System.IntPtr)">
             Perform a one-shot auto white balance adjustment.
            
             When this function is called, subsequent calls to 
             ladybugConvertImage() will perform a one-shot auto white balance 
             adjustment by modifying the relative gain of red and blue channels. 
             Because Ladybug cameras do not have full hardware auto white balance 
             functionality, white balance adjustment is initially performed in the 
             software by analyzing images that are already grabbed and processed on the 
             PC. The actual modification of white balance is then performed inside the 
             camera. This half-software, half-hardware solution helps ensure better 
             image quality over a software-only solution.
            
             Note that calling this function by itself does not adjust white balance. 
            
             Additionally, the application may need to call 
             ladybugConvertImage() many times until proper white balance 
             adjustment is achieved. You can get the current status of white balance 
             adjustment by calling ladybugGetOneShotAutoWhiteBalanceStatus().
            
             @param context - The LadybugContext to access.
             
             @return A LadybugError indicating the success of the function. 
            
             @see ladybugGetOneShotAutoWhiteBalanceStatus()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetOneShotAutoWhiteBalanceStatus(System.IntPtr)">
             Returns the status of a previously-called instance of 
             ladybugDoOneShotAutoWhiteBalance. 
            
             A return value of LADYBUG_STILL_WORKING indicates white balance
             adjustment is ongoing.
            
             A return value of LADYBUG_FAILED indicates white balance adjustment
             failed.
            
             @param context - The LadybugContext to access.
             
             @return A LadybugError indicating the success of the function. 
             
             @see ladybugDoOneShotAutoWhiteBalance()
        </member>
        <member name="M:LadybugAPI.Ladybug.LoadConfig(System.IntPtr,System.String)">
             Loads a configuration file containing intrinsic and extrinsic camera 
             properties. 
             
             This function must be called once before any calls involving 3D mapping
             and rectification are performed. 
             
             This function should also be called before beginning to transfer images with
             ladybugStart(), ladybugStartLockNext(), etc.
            
             @param context - The LadybugContext to access.
             @param path    - Path to the config file. Use NULL to attempt to load the file
                              from the camera head itself.
            
             @return A LadybugError indicating the success of the function. 
            
             @see ladybugWriteConfigurationFile()
        </member>
        <member name="M:LadybugAPI.Ladybug.Get3dMap(System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Boolean,LadybugAPI.LadybugImage3d**@)">
             Maps all images onto a sphere of fixed radius and returns the 3D mapping
             coordinates to the sphere for the given camera.
            
             If the user calls this function with uiCamera = 1, it returns a
             LadybugImage3d indicating the 3D position of every pixel from camera 1 on
             the surface of the sphere.
            
             @param  context         - The LadybugContext to access.
             @param  uiCamera        - The camera index to retrieve.
             @param  uiGridCols      - Columns in the 3D grid to return.
             @param  uiGridRows      - Rows in the 3D grid to return.
             @param  uiSrcCols       - Columns in the source raw image to sample.
             @param  uiSrcRows       - Rows in the source image to sample.
             @param  bCenterSampling - Flag for whether samples are taken at the center of a
                                       pixel, or from the edge dividing two pixels.                  
             @param  ppimage         - Returned LadybugImage3d structure.  This should be
                                       considered read-only.
            
             @return A LadybugError indicating the success of the function.       
        </member>
        <member name="M:LadybugAPI.Ladybug.XYZtoRC(System.IntPtr,System.Double,System.Double,System.Double,System.UInt32,System.Double@,System.Double@,System.Double@)">
             Projects a 3D point (with respect to the Ladybug coordinate frames) onto  
             the indicated camera unit and returns where it will falls on its rectified 
             image.
            
             @param  context        - The LadybugContext to access.
             @param  dLadybugX      - X coordinate of the point to project.
             @param  dLadybugY      - Y coordinate of the point to project.
             @param  dLadybugZ      - Z coordinate of the point to project.
             @param  uiCamera       - Camera index this image corresponds to.
             @param  pdRectifiedRow - The returned rectified row location where the 3D point 
                                      falls (Will be less than 0 if the point does not 
                                      project to the rectified image).
             @param  pdRectifiedCol - The returned rectified column location where the 3D point 
                                      falls (Will be less than 0 if the point does not 
                                      project to the rectified image).
             @param  pdNormalized   - The distance from the rectified pixel to the focal center
                                      normalized by the focal length.  Can be set to NULL if
                                      the caller is not interested in this value.
            
             @return A LadybugError indicating the success of the function.     
        </member>
        <member name="M:LadybugAPI.Ladybug.RCtoXYZ(System.IntPtr,System.Double,System.Double,System.UInt32,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
             Projects a 2D point on a specific camera unit into a 3D ray in the Ladybug
             coordinate frame.  The ray is defined as its starting point and direction.
             The starting point takes into account the camera unit's offset from the
             center of the ladybug camera which allows accurate projection of the
             ray at distances different from the stitching radius.
            
             @param  context       - The LadybugContext to access.
             @param  dRectifiedRow - The rectified row of the 2D input point.
             @param  dRectifiedCol - The rectified column of the 2D input point.
             @param  uiCamera      - The camera unit.
             @param  pdLocationX   - The output ray location x component.
             @param  pdLocationY   - The output ray location y component.
             @param  pdLocationZ   - The output ray location z component.
             @param  pdDirectionX  - The output ray direction x component.
             @param  pdDirectionY  - The output ray direction y component.
             @param  pdDirectionZ  - The output ray direction z component.
             
             @return A LadybugError indicating the success of the function.   
        </member>
        <member name="M:LadybugAPI.Ladybug.SetPanoramicViewingAngle(System.IntPtr,LadybugAPI.LadybugPanoAngle)">
             Sets the rotation of 3D mesh for a given set of front and pole cameras.
             
             This call is equivalent to ladybugSet3dMapRotation where the rotation
             is specified by which camera is in front and which is on top.
            
             @param context       - The LadybugContext to access.
             @param panoViewAngle - The viewing angle to use. See LadybugPanoAngle.
            
             @return A LadybugError indicating the success of the function.   
            
             @see ladybugGetPanoramicViewingAngle()
               ladybugGet3dMapRotation()
               ladybugSet3dMapRotation()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetPanoramicViewingAngle(System.IntPtr,LadybugAPI.LadybugPanoAngle@)">
             Gets the current panoramic viewing angle. 
            
             @param context        - The LadybugContext to access.
             @param panoViewAngle  - Location to return the viewing angle.
            
             @return A LadybugError indicating the success of the function.   
            
             @see ladybugSetPanoramicViewingAngle()
               ladybugSet3dMapRotation()
               ladybugGet3dMapRotation()
        </member>
        <member name="M:LadybugAPI.Ladybug.Set3dMapRotation(System.IntPtr,System.Double,System.Double,System.Double)">
             Sets the rotation of 3D mesh. 
             The representation of the rotation follows EulerZYX convention.
            
             @param  context - The LadybugContext to access.
             @param  dRx     - Rotation angle about X-axis in radians.
             @param  dRy     - Rotation angle about Y-axis in radians.
             @param  dRz     - Rotation angle about Z-axis in radians.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGet3dMapRotation(), ladybugGetCameraUnitExtrinsics()
        </member>
        <member name="M:LadybugAPI.Ladybug.Get3dMapRotation(System.IntPtr,System.Double@,System.Double@,System.Double@)">
             Gets the rotation of the 3D mesh. 
             
             The representation of the rotation follows EulerZYX convention.
            
             @param context - The LadybugContext to access.
             @param dRx     - Rotation angle about X-axis in radians.
             @param dRy     - Rotation angle about Y-axis in radians.
             @param dRz     - Rotation angle about Z-axis in radians.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSet3dMapRotation(), ladybugGetCameraUnitExtrinsics()
        </member>
        <!-- Badly formed XML comment ignored for member "M:LadybugAPI.Ladybug.Set3dMapSphereSize(System.IntPtr,System.Double)" -->
        <member name="M:LadybugAPI.Ladybug.Get3dMapSphereSize(System.IntPtr,System.Double@)">
             Sets the radius of the sphere used for stitching. 
            
             @param context  - The LadybugContext to access.
             @param dRadius  - The pointer to the radius of the sphere to receive.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSet3dMapSphereSize()
        </member>
        <!-- Badly formed XML comment ignored for member "M:LadybugAPI.Ladybug.SetDynamicStitching(System.IntPtr,System.Boolean,System.Boolean,LadybugAPI.LadybugPoint3d@)" -->
        <member name="M:LadybugAPI.Ladybug.GetDynamicStitching(System.IntPtr,System.Boolean@)">
             Gets the dynamic stitching status.
            
             @param  context - The LadybugContext to access.
             @param  auto    - Pointer to the auto status.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetDynamicStitching()
               ladybugSetDynamicStitchingParams()
               ladybugGetDynamicStitchingParams()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetDynamicStitchingParams(System.IntPtr,LadybugAPI.LadybugDynamicStitchingParams@)">
             Sets the parameters for dynamic stitching.
            
             @param  context  - The LadybugContext to access.
             @param  dsparams - Pointer to the parameter struct.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetDynamicStitching()
               ladybugGetDynamicStitching()
               ladybugGetDynamicStitchingParams()
               LadybugDynamicStitchingParams struct
        </member>
        <member name="M:LadybugAPI.Ladybug.GetDynamicStitchingParams(System.IntPtr,LadybugAPI.LadybugDynamicStitchingParams@)">
             Gets the parameters for dynamic stitching.
            
             @param context  - The LadybugContext to access.
             @param dsparams - The pointer to the parameter struct to receive.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetDynamicStitching()
               ladybugGetDynamicStitching()
               ladybugSetDynamicStitchingParams()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetPanoramicMappingType(System.IntPtr,LadybugAPI.LadybugMapType)">
             Sets the panoramic mapping type. 
            
             @param context - The LadybugContext to access.
             @param mappingType - The panoramic mapping type to use. See LadybugMapType.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetPanoramicMappingType()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetPanoramicMappingType(System.IntPtr,LadybugAPI.LadybugMapType@)">
             Gets the panoramic mapping type. 
            
             @param context      - The LadybugContext to access.
             @param mappingType  - Location to return the mapping type. See LadybugMapType.
            
             @return A LadybugError indicating the success of the function.   
            
             @see ladybugSetPanoramicMappingType()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetCameraUnitFocalLength(System.IntPtr,System.Int32,System.Double@)">
             Gets the focal length (in pixels) for the specified camera unit.  
            
             Because the focal length is associated with the rectified camera, 
             this function must be called after ladybugSetOffScreenImageSize(), which 
             sets the resolution of rectified images. 
             
             It is assumed that the aspect ratio of the rectified image is
             the same as that of the raw image. Otherwise, the vertical and horizontal
             focal lengths are different. In this case, the returned focal length
             indicates the horizontal one.
            
             @param context       - The LadybugContext to access.
             @param camera        - Camera index that this image corresponds to.
             @param focalLength   - The returned rectified focal length.
            
             @return A LadybugError indicating the success of the function.    
            
             @see ladybugSetOffScreenImageSize()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetCameraUnitImageCenter(System.IntPtr,System.Int32,System.Double@,System.Double@)">
             Gets the rectified image center for the specified camera unit.  
            
             This function must be called after ladybugSetOffScreenImageSize(), which 
             sets the resolution of rectified images. 
            
             @param  context   - The LadybugContext to access.
             @param  camera    - Camera index that this image corresponds to.
             @param  centerX   - The returned X coordinate of the rectified image center.
             @param  centerY   - The returned Y coordinate of the rectified image center.
            
             @return A LadybugError indicating the success of the function. 
            
             @see ladybugSetOffScreenImageSize()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetCameraUnitExtrinsics(System.IntPtr,System.Int32,System.Double[])">
             Gets the 6-D extrinsics vector for the specified camera unit.  
            
             The 6-D extrinsics vector is in EulerZYX convention (see Craig's 
             Introduction to Robotics pg. 45-49).  The ordering of the extrinsics
             components are :
              
             - element 0 - Rx - Rotation about X (radians)
             - element 1 - Ry - Rotation about Y (radians)
             - element 2 - Rz - Rotation about Z (radians)
             - element 3 - Tx - Translation along X (meters)
             - element 4 - Ty - Translation along Y (meters)
             - element 5 - Tz - Translation along Z (meters)
              
             By extrinsics, we mean that the corresponding 4x4 transformation matrix 
             allows one to map a point in the local camera unit coordinates to that 
             of the Ladybug coordinate frame.  Where s=sin and c=cos, the format of the  
             matrix is given below.   
            
             Example: 
             To map this to Craig's matrix: 
             - Rz = alpha
             - Ry = beta
             - Rx = gamma
            
             - |X'| |((cRz)(cRy)) ((cRz)(sRy)(sRx)-(sRz)(cRx)) ((cRz)(sRy)(cRx)+(sRz)(sRx)) Tx||X|
             - |Y'|=|((sRz)(cRy)) ((sRz)(sRy)(sRx)+(cRz)(cRx)) ((sRz)(sRy)(cRx)-(cRz)(sRx)) Ty||Y|
             - |Z'| |((-sRy))     ((cRy)(sRx))                 ((cRy)(cRx)))                Tz||Z|
             - |1 | |0            0                            0                            1 ||1| 
            
             @param  context     - The LadybugContext to access.
             @param  camera    - Camera index of interest.
             @param  ardEulerZYX - The returned 6-D EulerZYX extrinsics vector.
            
             @return A LadybugError indicating the success of the function.  
        </member>
        <member name="M:LadybugAPI.Ladybug.SetZAxis(System.IntPtr,LadybugAPI.LadybugPoint3d@,System.Int32)">
             Sets the Z axis by rotating the 3D mesh so that a pair of supplied lines 
             become parallel to the Z axis.
             
             In order to determine the new Z axis, the library needs two vertical lines
             in the scene supplied by the user.
             
             The lines can be specified by four points - 2 on each line.
             
             To increase the precision of the estimation, the two points on each line
             should be as distant as possible.
             
             Also, the lines should not be too close to each other or too close to an 
             exact opposite position (180 degrees apart).
            
             @param  context    - The LadybugContext to access.
             @param  pPoints    - The 4 points on the two lines to which the Z axis should
                                  be aligned.
                                  The first two elements in the array must belong to one
                                  line and the last two must belong to the other line.
                                  The points are specified by the radial coordinates
                                  (theta, phi) of the panoramic view. 
                                  In the LadybugPoint3d struct, only the fTheta and fPhi members
                                  must be set. All the other members are ignored.
             @param  iNumPoints - This must be 4.
            
             @return A LadybugError indicating the success of the function. 
            
             @see   ladybugSet3dMapRotation()
        </member>
        <member name="M:LadybugAPI.Ladybug.InitializeAlphaMasks(System.IntPtr,System.UInt32,System.UInt32,System.Boolean)">
             Initializes alpha mask buffers.
             
             In order to properly blend adjacent images at the borders, the system
             uses the concept of an alpha mask. The alpha mask indicates how much one
             pixel contributes to the final display relative to its neighbors.
             
             The alpha mask changes as the blending width changes or the stitching sphere size 
             changes. Also, it changes when the size of the color processed image changes.
             The bWriteToFile flag can be set to true if the generated alpha masks have to
             be saved to a file and later be loaded with ladybugLoadAlphaMasks().
            
             @param  context      - The LadybugContext to access.
             @param  uiCols       - Columns in the alpha mask. This should map to the number of 
                                    columns in the image captured from each camera unit.
             @param  uiRows       - Rows in the alpha mask. This should map to the number of 
                                    rows in the image captured from each camera unit.
             @param  writeToFile  - A flag to control to write the alpha masks to a file.
            
             @return A LadybugError indicating the success of the function.
            
             @see   ladybugSetAlphaMaskPathname(), ladybugLoadAlphaMasks()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetAlphaMaskPathname(System.IntPtr,System.String@)">
             Sets the pathname of alpha mask files.
            
             The default value of the alpha mask pathname is NULL. 
             If the pathname is set, Ladybug uses it to save alpha mask files.
             Otherwise, the current directory is used.        
            
             @param  context    - The LadybugContext to access.
             @param  filename   - The pathname of the alpha mask files.
            
             @return A LadybugError indicating the success of the function. 
            
             @see   ladybugInitializeAlphaMasks(), ladybugLoadAlphaMasks()
        </member>
        <member name="M:LadybugAPI.Ladybug.LoadAlphaMasks(System.IntPtr,System.UInt32,System.UInt32)">
             Loads alpha masks from the current path.
            
             This function is useful when using the alpha masks which were previously
             generated and saved to a file instead of using the dynamically created 
             alpha masks generated by ladybugInitializeAlphaMasks().
            
             This only attempts to load them from the current path, or the path specified
             by ladybugSetAlphaMaskPathname().
            
             If it fails to load, it does not attempt to recalculate the alpha masks.
            
             @param  context - The LadybugContext to access.
             @param  uiCols  - Columns in the alpha mask. This should map to the number of 
                         columns in the image captured from each camera unit.
             @param  uiRows  - Rows in the alpha mask. This should map to the number of 
                         rows in the image captured from each camera unit.
            
             @return LADYBUG_OK - Alpha map was loaded successfully.
             @return LADYBUG_COULD_NOT_OPEN_FILE - Alpha mask could not be located.        
            
             @see   ladybugInitializeAlphaMasks(), ladybugSetAlphaMaskPathname()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetAlphaMasking(System.IntPtr,System.Boolean)">
             If set to true, invokes the alpha masks to be copied to color images
             on the next call to ladybugConvertImage().
            
             As long as you reuse the same color image buffers, you do not have to set
             this to true every time.
             
             Set bMasking to "false" if you are not doing any texture map blending.  
             The default value is "true".
            
             @param  context  - The LadybugContext to access.
             @param  enable   - The state of alpha masking to set.
            
             @return A LadybugError indicating the success of the function. 
             
             @see   ladybugConvertImage(), ladybugInitializeAlphaMasks()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetBlendingParams(System.IntPtr,System.Double)">
             Sets the maximum blending (overlap between cameras) width in pixels. 
            
             The alpha masks will be reinitialized if they have already been initialized.
            
             The default blending width is 100.  
            
             @param  context           - The LadybugContext to access.
             @param  dMaxBlendingWidth - The maximum blending width in pixels to set.
            
             @return A LadybugError indicating the success of the function.     
        </member>
        <member name="M:LadybugAPI.Ladybug.GetBlendingParams(System.IntPtr,System.Double@)">
             Gets the maximum blending (overlap between cameras) width in pixels.
            
             @param context            - The LadybugContext to access.
             @param pdMaxBlendingWidth - Pointer to the location where the maximum blending
                                         width in pixels is to be returned.
            
             @return A LadybugError indicating the success of the function.     
        </member>
        <member name="M:LadybugAPI.Ladybug.GetAlphaMask(System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.Byte**@)">
             Retrieves the alpha mask corresponding to the indicated camera.
            
             Must be called after ladybugInitializeAlphaMasks() with the appropriate  
             resolution. 
            
             @param  context      - The LadybugContext to access.
             @param  uiCamera     - The camera index corresponding to the requested mask.
             @param  uiCols       - The number of columns of the requested mask. This should map
                                    to the number of columns in the image captured from each
                                    camera unit.
             @param  uiRows       - The number of rows of the requested mask. This should map
                                    to the number of rows in the image captured from each
                                    camera unit.
             @param  ppAlphaImage - The returned alpha mask. This is an 8 bit image.
            
             @return A LadybugError indicating the success of the function.     
        </member>
        <member name="M:LadybugAPI.Ladybug.UnrectifyPixel(System.IntPtr,System.UInt32,System.Double,System.Double,System.Double@,System.Double@)">
             Maps a rectified pixel location to its corresponding point in the
             distorted (raw) image.
            
             This function must be called after ladybugSetOffScreenImageSize(), which 
             sets the resolution of rectified images. 
            
             @param  context        - The LadybugContext to access.
             @param  uiCamera       - Camera index that this image corresponds to.
             @param  dRectifiedRow  - Row coordinate of the rectified pixel to map.
             @param  dRectifiedCol  - Column coordinate of the rectified pixel to map.
             @param  pdDistortedRow - Location to return the row coordinate of the same point
                                      in the distorted (raw) image.
             @param  pdDistortedCol - Location to return the column coordinate of the same 
                                      point in the distorted (raw) image.
            
             @return A LadybugError indicating the success of the function.     
            
             @see ladybugSetOffScreenImageSize()
        </member>
        <member name="M:LadybugAPI.Ladybug.RectifyPixel(System.IntPtr,System.UInt32,System.Double,System.Double,System.Double@,System.Double@)">
             Maps a distorted (raw) pixel location to its corresponding point in the
             rectified image.
            
             This function must be called after ladybugSetOffScreenImageSize(), which 
             sets the resolution of rectified images. 
            
             @param  context        - The LadybugContext to access.
             @param  uiCamera       - Camera index that this image corresponds to.
             @param  dDistortedRow  - Row coordinate of the distorted (raw) pixel to map.
             @param  dDistortedCol  - Column coordinate of the distorted (raw) pixel to map.
             @param  pdRectifiedRow - Location to return the row coordinate of the same point
                                      in the rectified image.
             @param  pdRectifiedCol - Location to return the column coordinate of the same 
                                      point in the rectified image.
            
             @return A LadybugError indicating the success of the function.
                     LADYBUG_OVEREXPOSED is returned if the selected region's average
                     intensity exceeds 254/255 for any channel.
            
             @see   ladybugSetOffScreenImageSize()
        </member>
        <member name="F:LadybugAPI.Ladybug.NP_MAX_CHAN">
            The maximum number of GPS channels. 
        </member>
        <member name="F:LadybugAPI.Ladybug.DEFAULT_PORT_NUMBER">
            The default GPS port number. 
        </member>
        <member name="F:LadybugAPI.Ladybug.DEFAULT_DEVICE_NAME">
            The default device name. 
        </member>
        <member name="F:LadybugAPI.Ladybug.DEFAULT_BAUDRATE">
            The default GPS baud rate. 
        </member>
        <member name="F:LadybugAPI.Ladybug.DEFAULT_UPDATE_INTERVAL">
            The default GPS device NMEA data update rate in milliseconds. 
        </member>
        <member name="M:LadybugAPI.Ladybug.CreateGPSContext(System.IntPtr@)">
             Creates a new GPS context.
             
             A context must be created for a GPS device that is going to
             be used. This must be done before any other GPS API function calls can 
             be made.
            
             This function sets the context to NULL if it is unsuccessful.
            
             The default port number, baud rate and GPS update time interval values
             are set to the values defined by DEFAULT_PORT_NUMBER, DEFAULT_BAUDRATE
             and DEFAULT_UPDATE_INTERVAL respectively.
            
             @param context  - A pointer to a LadybugGPSContext to fill with the created
                               context.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugDestroyGPSContext()
        </member>
        <member name="M:LadybugAPI.Ladybug.DestroyGPSContext(System.IntPtr@)">
             Destroys a GPS context.
            
             Frees memory associated with the LadybugGPSContext. This should be called 
             when your application stops using the context.
            
             This function sets the context to NULL if successful.
            
             @param context - A pointer to the LadybugGPSContext to destroy.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugCreateGPSContext()
        </member>
        <member name="M:LadybugAPI.Ladybug.RegisterGPS(System.IntPtr,System.IntPtr@)">
             Registers the GPS context with a Ladybug context. 
            
             The images returned by ladybugGrabImage() and ladybugLockNext() will have
             GPS data included if this function and ladybugStartGPS() have been called. 
            
             @param context     - The LadybugContext to register the GPS context with.
             @param GPSContext - A pointer to a GPS context created with a call to 
                                  ladybugCreateGPSContext().        
            
             @return A LadybugError indicating the success of the function.
            
             @see   ladybugUnregisterGPS(), ladybugStartGPS(), ladybugGrabImage(), ladybugLockNext()
        </member>
        <member name="M:LadybugAPI.Ladybug.UnregisterGPS(System.IntPtr,System.IntPtr@)">
             Unregisters a GPS context that has been registered with a Ladybug context.
            
             This function should be called before the LadybugGPSContext is
             destroyed by ladybugDestroyGPSContext().
            
             Images returned by ladybugGrabImage() and ladybugLockNext() will not have
             GPS data included after this function is called. 
            
             @param context     - The LadybugContext to unregister the GPS context with.
             @param GPSContext - A pointer to a GPS context created with a call to 
                                  ladybugCreateGPSContext().        
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugRegisterGPS()
        </member>
        <member name="M:LadybugAPI.Ladybug.InitializeGPS(System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
             Sets the serial port number, baud rate and data update rate for the 
             GPS device for Windows.
            
             This function only sets the GPS parameters without actually starting the
             the GPS device. To start the GPS device, call ladybugStartGPS(). 
            
             The value of uiUpdateTimeInterval depends on the NMEA data update rate of
             the GPS device. For example, if the GPS device data update rate is 4 Hz,
             then uiUpdateTimeInterval should be set to no less  than 250 ms.
            
             If uiUpdateTimeInterval is less than 1 ms or more, LADYBUG_INVALID_ARGUMENT is
             returned.
            
             @param context              - The LadybugGPSContext to access.
             @param uiPort               - The number of the serial port of the GPS device. 
             @param uiBaud               - Baud rate of the serial port.
             @param uiUpdateTimeInterval - The GPS data update time interval in milliseconds.
                                           The default value is 1000 milliseconds.                                
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugInitializeGPSEx(), ladybugQueryGPSStatus(), ladybugStartGPS()
        </member>
        <member name="M:LadybugAPI.Ladybug.InitializeGPSEx(System.IntPtr,System.String@,System.UInt32,System.UInt32)">
             Sets the serial port number, baud rate and data update rate for the 
             GPS device on Linux platform.
            
             This function only sets the GPS parameters without actually starting the
             the GPS device. To start the GPS device, call ladybugStartGPS(). 
            
             The value of uiUpdateTimeInterval depends on the NMEA data update rate of
             the GPS device. For example, if the GPS device data update rate is 4 Hz,
             then uiUpdateTimeInterval should be set to no less  than 250 ms.
            
             If uiUpdateTimeInterval is less than 1 ms or more, LADYBUG_INVALID_ARGUMENT is
             returned.
            
             @param context              - The LadybugGPSContext to access.
             @param deviceName           - The device name to access (e.g. /dev/ttyACM0)
             @param uiBaud               - Baud rate of the serial port.
             @param uiUpdateTimeInterval - The GPS data update time interval in milliseconds.
                                           The default value is 1000 milliseconds.                                
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugInitializeGPS(), ladybugQueryGPSStatus(), ladybugStartGPS()
        </member>
        <member name="M:LadybugAPI.Ladybug.StartGPS(System.IntPtr)">
             Starts grabbing GPS data from the GPS device.
            
             This function starts grabbing GPS data using the parameters set by
             ladybugInitializeGPS(). If ladybugInitializeGPS() is not called, the
             default parameters set by ladybugCreateGPSContext() are used.
            
             @param context - The LadybugGPSContext to access.                              
            
             @return A LadybugError indicating the success of the function.
            
             @see   ladybugCreateGPSContext(), ladybugInitializeGPS(), ladybugStopGPS()
        </member>
        <member name="M:LadybugAPI.Ladybug.StopGPS(System.IntPtr)">
             Stops the GPS device.
            
             @param context - The LadybugGPSContext to access.                              
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugStartGPS()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetGpsTimeSync(System.IntPtr,LadybugAPI.GpsTimeSyncSettings@)">
             Sets GpsTimeSyncSettings for current context.
             
             @param context     - The LadybugContext to access.
             @param GpsSettings - Update GpsTimeSync information for struct members
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetGpsTimeSync(System.IntPtr,LadybugAPI.GpsTimeSyncSettings@)">
            Gets GpsTimeSyncSettings for current context.
            
            @param context     - The LadybugContext to access.
            @param GpsSettings - Retrieve struct containing current GpsTimeSyncSettings
            
            @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.QueryGPSStatus(System.IntPtr,System.Boolean@,System.UInt32@,System.Boolean@)">
             Queries the current GPS status.
            
             @param context              - The LadybugGPSContext to access.   
             @param bGPSDeviceStarted    - Whether or not the GPS device is started.
             @param uiStartedPortNumber  - The port number of the GPS device.
             @param bGPSDataIsAvailable  - Whether or not GPS data is available.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugInitializeGPS()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetGPSNMEASentences(System.IntPtr,System.Byte@,System.UInt32@,System.UInt32@)">
             Gets all the GPS NMEA sentences from the GPS device.
            
             If the returned value pointed by puiLength is 0, this means that there are
             no NMEA sentences available. 
            
             The recommended buffer size is between 600 bytes and 1024 bytes. 
            
             @param context      - The LadybugGPSContext to access.   
             @param buffer       - The pointer to the buffer to receive GPS sentences.
             @param uiBufferSize - The size of pBuffer.
             @param uiLength     - Total size of the NMEA sentences received (in bytes).
            
             @return   A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetGPSNMEAData(System.IntPtr,System.String,System.Void*)">
             Gets the specified NMEA sentence from the GPS device.
            
             To get GPGGA data from a GPS device registered with the LadybugGPSContext
             pointed to by context, use the following function call, where 
             pNMEAGGA_Data is a pointer to a LadybugNMEAGPGGA structure:   
            
             ladybugGetGPSNMEAData(m_context, "GPGGA", pNMEAGGA_Data);
            
             @param context           - The LadybugGPSContext to access.   
             @param pszNMEASentenceId - A string specifying the NMEA sentence to get.
             @param pNMEADataBuffer   - The pointer to the data structure to receive GPS data.
                                        The structure should match the NMEA sentence 
                                        specified above by pszNMEASentenceId.
            
             @return   A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetAllGPSNMEAData(System.IntPtr,LadybugAPI.LadybugNMEAGPSData@)">
             Gets all GPS data from the GPS device that is currently running.
            
             @param context   - The LadybugGPSContext to access.   
             @param pNMEAData - A pointer to a LadybugNMEAGPSData structure to receive all the
                                NMEA data.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetGPSNMEAData()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetGPSNMEASentencesFromImage(LadybugAPI.LadybugImage@,System.Byte@,System.UInt32,System.UInt32@)">
            
             Gets all the GPS NMEA sentences from a Ladybug image.
            
             If the returned value pointed by puiLength is 0, this means that there are
             no NMEA sentences available. 
            
             The recommended buffer size is between 600 bytes and 1024 bytes. 
            
             @param pImage       - A pointer to the raw image in which GPS NMEA sentences are
                                   included.
             @param pBuffer      - A  pointer to a buffer to receive the NMEA sentences.
             @param uiBufferSize - The size of the specified buffer.
             @param puiLength    - Total size of the GPS NMEA sentences received (in bytes).
            
             @return   A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.WriteGPSDataToImage(System.IntPtr,LadybugAPI.LadybugImage@,System.String,System.UInt32)">
            
             Writes the GPS NMEA sentences to a Ladybug image.
             
            
             The max buffer size is 1024 bytes. 
            
             @param context      - The LadybugGPSContext to access.   
             @param pImage       - A pointer to the image in which GPS NMEA sentences are
                                   located.
             @param pBuffer      - A pointer to a NMEA sentence buffer.
             @param uiBufferSize - The size of the NMEA sentences.
            
             @return   A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetGPSNMEADataFromImage(LadybugAPI.LadybugImage@,System.String,System.Void*)">
             Gets the GPS data for the specified NMEA sentences from a Ladybug image.
            
             To get GPGGA data from a Ladybug image pointed to by pImage, use the
             following function call, where pNMEAGGA_Data is a pointer to a 
             LadybugNMEAGPGGA structure:
            
             ladybugGetGPSNMEAData( m_context, "GPGGA", pNMEAGGA_Data );
            
             @param pImage            - A pointer to the raw image in which GPS NMEA sentences are
                                        included.
             @param pszNMEASentenceId - A string specifying the NMEA sentence to get.
             @param pNMEADataBuffer   - The pointer to the data structure to receive GPS data.
                                        The structure should match the NMEA sentence 
                                        specified above by pszNMEASentenceId.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetAllGPSNMEADataFromImage(LadybugAPI.LadybugImage@,LadybugAPI.LadybugNMEAGPSData@)">
             Gets all GPS data from a Ladybug image.
            
             @param pImage    - A pointer to the raw image in which GPS NMEA sentences are
                                included.
             @param pNMEAData - A pointer to a LadybugNMEAGPSData structure to receive all the
                                NMEA data.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetGPSNMEAData()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetAdjustmentParameters(System.IntPtr,LadybugAPI.LadybugAdjustmentParameters@)">
             Set the adjustment parameters to the specified context.
            
             These parameters will apply to any unprocessed images sent by the camera and
             will have no effect on images that are processed on the camera.
            
             If this function is not called before image conversion, the system will 
             use a default adjustment.
             
             These parameters take effect when converting the image using 
             ladybugConvertImage() or ladybugConvertEx().
            
             @param context The LadybugContext to access.
             @param param Adjustment parameters
            
             @return A LadybugError indicating the success of the function. If the
                     parameters specified as invalid, an error will be returned.
            
             @see ladybugConvertImage(), ladybugConvertImageEx()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetAdjustmentParameters(System.IntPtr,LadybugAPI.LadybugAdjustmentParameters@)">
             Get the adjustment parameters from the specified context.
            
             @param context The LadybugContext to access.
             @param param Adjustment parameters
            
             @return A LadybugError indicating the success of the function. 
        </member>
        <member name="M:LadybugAPI.Ladybug.InspectLadybugImage(System.IntPtr,LadybugAPI.LadybugImageInspection,LadybugAPI.LadybugImage@,System.UInt32,LadybugAPI.LadybugImageRegion,LadybugAPI.LadybugAdjustmentParameters@)">
             Inspect a location in a LadybugImage and set parameters based on the type
             of inspection being performed.
            
             Inspection types:
               WhitePointInspection requires : uiCamera, region.
               GreyPointInspection requires  : uiCamera, region.
            
             @param context          - The LadybugContext to access.
             @param inspectionType   - The type of inspection to perform.
             @param pImage           - The image to perform the inspection on.
             @param uiCamera         - The camera on which to perform the inspection.
             @param region           - The area over which to perform the inspection.
                                       May be unused depending on the inspection type.
             @param pInOutAdjustment - The adjustment parameters that will be modified
                                       based on the inspection type and the contents
                                       of the ladybug image.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetImageAdjustmentMin(System.IntPtr,LadybugAPI.LadybugAdjustmentParametersField,System.Single@)">
             Retrieves the minimum allowed value for the specified field.
            
             @param context - The LadybugContext to access.
             @param field   - The field of interest.
             @param fValue  - The value will be put into this argument.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetImageAdjustmentMax(System.IntPtr,LadybugAPI.LadybugAdjustmentParametersField,System.Single@)">
             Retrieves the maximum allowed value for the specified field.
            
             @param context - The LadybugContext to access.
             @param field   - The field of interest.
             @param fValue - The value will be put into this argument.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.ConfigureOutputImages(System.IntPtr,System.UInt32)">
             Configures the Ladybug library for generating Ladybug output images for
             on-screen and off-screen rendering.
            
             This function must be called after loading the configuration file by 
             calling ladybugLoadConfig().  
            
             This function must be called prior to calling any of the following API
             functions: ladybugSetDisplayWindow(), ladybugDisplayImage(), 
             ladybugRenderOffScreenImage(), ladybugGetOpenGLTextureID().
            
             Image types LADYBUG_RAW_CAM0, LADYBUG_RAW_CAM1, ..., LADYBUG_RAW_CAM5 are 
             used to identify the processed camera images that are updated by calling
             ladybugUpdateTextures(). They are not valid parameters for this function.
            
             LADYBUG_ALL_CAMERAS_VIEW is supported only for on-screen rendering. It is
             not supported for off-screen rendering.
            
             This function configures the Ladybug library for software off-screen
             rendering if ladybugEnableSoftwareRendering() is called prior 
             to this function.
            
             For example, if the application needs to display panoramic images on the
             screen and generate off-screen dome projection images, call 
             ladybugConfigureOutputImages(context, LADYBUG_PANORAMIC | LADYBUG_DOME).
            
             @param context      - The LadybugContext to access.
             @param uiImageTypes - The combination of Ladybug output image types defined in 
                                   LadybugOutputImage. The valid output image types are:
                                   LADYBUG_PANORAMIC,
                                   LADYBUG_DOME,
                                   LADYBUG_SPHERICAL,
                                   LADYBUG_RECTIFIED_CAM0,
                                   LADYBUG_RECTIFIED_CAM1,
                                   LADYBUG_RECTIFIED_CAM2,
                                   LADYBUG_RECTIFIED_CAM3,
                                   LADYBUG_RECTIFIED_CAM4,
                                   LADYBUG_RECTIFIED_CAM5,
                                   LADYBUG_ALL_RECTIFIED_IMAGE,
                                   LADYBUG_ALL_CAMERAS_VIEW
            
             @return LADYBUG_OK is returned if all the specified image types are successfully
               configured. If any unsupported image types are specified by uiImageTypes,
               it returns LADYBUG_INVALID_ARGUMENT.
            
             @see   ladybugLoadConfig(),
               ladybugSetDisplayWindow(),
               ladybugDisplayImage(),
               ladybugRenderOffScreenImage(),
               ladybugGetOpenGLTextureID(),
               ladybugEnableSoftwareOffScreenRendering()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetImageRenderingInfo(System.IntPtr,LadybugAPI.LadybugImageRenderingInfo@)">
             Returns information about the graphics card and OpenGL implementation.
            
             @param context        - The LadybugContext to access.
             @param pRenderingInfo - Location to return the requested information. 
                                     It is a pointer to LadybugImageRenderingInfo structure.
            
             @return   A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.UpdateTextures(System.IntPtr,System.UInt32,System.Byte**,LadybugAPI.LadybugPixelFormat)">
             Updates the Ladybug image texture buffers on the GPU with the images 
             specified by arpBGRABuffers.
            
             If ladybugConvertImage() is used to convert images to 
             internal image buffers, arpBGRABuffers must be specifed as NULL to update 
             these internal images to the GPU buffers.
            
             If arpBGRABuffers is specified as NULL and there are no internal image 
             buffers, this function returns LADYBUG_INVALID_ARGUMENT.
            
             This function only needs to be called once per re-draw, even if there are 
             multiple OpenGL instances in different windows.
            
             @param context        - The LadybugContext to access.
             @param uiCameras      - The number of buffers in the array of the following 
                                     argument. Should be LADYBUG_NUM_CAMERAS.
             @param arpBGRABuffers - An array of pointers to the BGRA image buffers to be 
                                     loaded onto the GPU texture buffers. If NULL is specified, 
                                     this function loads the images that are in the internal 
                                     buffers onto the GPU texture buffers. 
             @param pixelFormat    - The pixel format of BGRA image buffers.
            
             @return A LadybugError indicating the success of the function. 
            
             @see ladybugConvertImage()
        </member>
        <member name="M:LadybugAPI.Ladybug.Set3dMapSize(System.IntPtr,System.UInt32,System.UInt32)">
             Specify the row and column values for Ladybug image 3D mapping. These
             values are the resolution of the 3D mapping coordinates to the sphere used 
             in Ladybug library for spherical view, panoramic view, and dome view image
             stitching. 
            
             For panoramic, sphere and dome views, the Ladybug library uses 3D grids to
             map Ladybug images to a 3D sphere. This function sets how many rows and
             columns are in these 3D grids. By default, the Ladybug library uses a 
             128x128 grid size for all mappings. This function is called only if 
             users want to use other grid sizes than the default size.
            
             This function has to be called prior to calling 
             ladybugConfigureOutputImages().
            
             @param context    - The LadybugContext to access.
             @param uiGridCols - Columns in the 3D grids.
             @param uiGridRows - Rows in the 3D grids.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.Get3dMapSize(System.IntPtr,System.UInt32@,System.UInt32@)">
             Gets the row and column values of the 3D mapping grids.
            
             @param context     - The LadybugContext to access.
             @param uiGridCols  - Returned columns in the 3D grids.
             @param uiGridRows  - Returned rows in the 3D grids.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.SetRectifyMeshResolution(System.IntPtr,System.UInt32,System.UInt32)">
             The Ladybug library uses 2D mesh grids to map Ladybug images to rectified
             images. This function sets the number of rows and columns in the mapping
             mesh.
            
             By default, the Ladybug library uses a 256x192 mapping mesh to render the
             rectified images. This function is called only if the user wants to use
             mesh sizes other than the default size. This function has to be 
             called prior to calling ladybugConfigureOutputImages().
            
             This function has to be called after loading the configuration file 
             by calling ladybugLoadConfig().  
            
             The minimum value for either uiMeshCols or uiMeshRows is 4. The maximum 
             value of uiMeshCols is the columns in the raw (colour) source image. The 
             maximum value of uiMeshRows is the rows in the raw (colour) source image.
            
             For example, if the raw image size is 1024x768 and the application needs
             to set the rectified mapping mesh size to 512x384, call 
             ladybugSetRectifyMeshResolution(context, 512, 384).
            
             @param   context    - The LadybugContext to access.
             @param  uiMeshRows - Rows of the mapping mesh.
             @param  uiMeshCols - Columns of the mapping mesh.
            
             @return   A LadybugError indicating the success of the function.
            
             @see   ladybugConfigureOutputImages(), ladybugGetRectifyMeshResolution()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetRectifyMeshResolution(System.IntPtr,System.UInt32@,System.UInt32@)">
             Gets the number of rows and columns of the rectified image
             mapping mesh.
            
             @param context     - The LadybugContext to access.
             @param uiMeshRows  - The returned rows of the mapping mesh.
             @param uiMeshCols  - The returned columns of the mapping mesh.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetRectifyMeshResolution()
        </member>
        <member name="M:LadybugAPI.Ladybug.ChangeDomeViewAngle(System.IntPtr,System.UInt32)">
             Changes the viewing angle of the dome view.
            
             The viewing angle is defined by the radial coordinate Phi. It ranges from
             zero (up) to 180 (down). The default viewing angle is 180.
            
             If uiAngle is 90, then the projection generates hemispherical images.
             If uiAngle is 180, then the projection generates a full dome image.
            
             @param context - The LadybugContext to access.
             @param uiAngle - The viewing angle to set.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetDomeViewAngle(System.IntPtr,System.UInt32@)">
             Retrieves the dome viewing angle as set by ladybugChangeDomeViewAngle().
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.SetSphericalViewParams(System.IntPtr,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
             Sets the spherical view transformation parameters for subsequent 
             rendering function calls.
            
             If this function is not called, the rendering functions 
             ladybugDisplayImage() and ladybugRenderOffScreenImage() will render 
             the spherical image with camera0 in front and the viewing point 
             located at the center of the 6 cameras by default. It is important to note that
             the transformation set by this function is applied upon these
             default transformation settings.
            
             The rotation follows the right-hand rule, so if the rotation vector  
             points toward the user, the rotation will be counter clockwise.
             The rotations are applied in the order of fRotZ, fRotY, fRotX.  
            
             fTransX, fTransY, fTransZ are used to move the rendered image.
             Note that if the specified value is bigger than the sphere size-- 
             20 for a camera with 20-meter calibration, for example, the image 
             may be out of view.
             
             Rotation transformations are applied first, followed by 
             translations.
            
             The rotation and translation set by this function are 
             always applied as model transformations on the rendered image. 
             It is recommended to use either this function or OpenGL model 
             transformation in the application; do not use both. 
            
             Each time this function is called, it overwrites the previous 
             transformation set by this function.
            
             @param context - The LadybugContext to access.
             @param fFOV    - The field-of-view angle, in degrees. The valid value is
                              between 0 and 180.
             @param fRotX   - The angle of rotation about the X-axis, in radians.
             @param fRotY   - The angle of rotation about the Y-axis, in radians.
             @param fRotZ   - The angle of rotation about the Z-axis, in radians.
             @param fTransX - The translation along the X-axis.   
             @param fTransY - The translation along the Y-axis.   
             @param fTransZ - The translation along the Z-axis.   
            
             @return   A LadybugError indicating the success of the function.
            
             @see   ladybugGetSphericalViewParams,
               ladybugDisplayImage(),
               ladybugRenderOffScreenImage()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetSphericalViewParams(System.IntPtr,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@,System.Single@)">
             Gets the current spherical view transformation parameters.
            
             @param context  - The LadybugContext to access.
             @param fFOV     - The field-of-view angle, in degrees.
             @param fRotX    - The angle of rotation about the X-axis, in radians.
             @param fRotY    - The angle of rotation about the Y-axis, in radians.
             @param fRotZ    - The angle of rotation about the Z-axis, in radians.
             @param fTransX  - The translation along the X-axis.   
             @param fTransY  - The translation along the Y-axis.   
             @param fTransZ  - The translation along the Z-axis.   
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetSphericalViewParams()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetAntiAliasing(System.IntPtr,System.Boolean)">
             Enables the anti-aliasing feature of the Ladybug library. If enabled,
             the six texture images that are updated by calling 
             ladybugUpdateTextures() are processed to minimize sampling artifacts
             that may appear on the rendered images.
             
             This feature is recommended when rendering small size output images.
            
             Enabling or disabling anti-aliasing takes effect on the next call of 
             ladybugUpdateTextures(). This feature is disabled by default
             in the Ladybug library.
            
             If anti-aliasing is enabled, the rendered images may appear
             blurry.
             
             An on-screen image is rendered by ladybugDisplayImage() and an off-screen
             image is rendered and returned by ladybugRenderOffScreenImage().
            
             Testing indicates that anti-aliasing may produce unexpected results 
             on ATI graphics cards that support OpenGL version 3.0 or earlier. 
            
             For example to enable/disable anti-aliasing, call these Ladybug API 
             functions in the following order:
             ladybugSetAntiAliasing(true/false);
             ladybugUpdateTextures();
             ladybugDisplayImage() or ladybugRenderOffScreenImage();
            
             @param context - The LadybugContext to access.
             @param bEnable - Specifies whether to enable anti-aliasing. The default value 
                              is off.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugUpdateTextures(), ladybugDisplayImage(), ladybugRenderOffScreenImage()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetDisplayWindow(System.IntPtr)">
             Initializes an on-screen window for displaying Ladybug images. This
             function must be called prior to calling ladybugDisplayImage().
            
             This function is used to initialize the Ladybug library and the 
             display window. Prior to calling this function, the display window must
             have a valid current OpenGL rendering context. The properties of the pixel
             buffer for the rendering context must be specified as PFD_SUPPORT_OPENGL,
             PFD_DRAW_TO_WINDOW and PFD_DOUBLEBUFFER. The pixel encoding format must be
             specified as PFD_TYPE_RGBA. The number of color bit planes must be 24. For
             more information about how to create a rendering context, refer to the 
             ChoosePixelFormat(), SetPixelFormat(), wglCreateContext(), wglMakeCurrent()
             and PIXELFORMATDESCRIPTOR topics in the Microsoft Win32 OpenGL library 
             documentation. 
             (http://msdn.microsoft.com/en-us/library/ms673957(VS.85).aspx)
            
             When this function is called, the current OpenGL rendering context 
             must not contain any existing display lists, textures, Pixel Buffer
             Objects(PBO), Vertex Buffer Objects(VBO) or Frame Buffer Objects(FBO).
            
             This function may only be called once per OpenGL rendering context
             unless directly preceeded by a call to ladybugConfigureOutputImages()
             which resets internal OpenGL state.
            
             @param context - The LadybugContext to access.
            
             @return A LadybugError indicating the success of the function.
            
        </member>
        <member name="M:LadybugAPI.Ladybug.DisplayImage(System.IntPtr,LadybugAPI.LadybugOutputImage)">
             Displays a Ladybug image in a screen window. 
            
             Prior to calling this function, the display window must have a valid 
             current OpenGL rendering context. If the output image type is specified as 
             LADYBUG_SPHERICAL, in order to display the spherical image in the window, 
             the application has to set OpenGL viewing transformation properly.
            
             @param context   - The LadybugContext to access.
             @param imageType - Output image type to be displayed on the screen window.
                                Valid image types are defined in LadybugOutputImage.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugConfigureOutputImages(), ladybugSetDisplayWindow()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetOffScreenImageSize(System.IntPtr,LadybugAPI.LadybugOutputImage,System.UInt32,System.UInt32)">
             Sets the off-screen image size. An off-screen image is generated using 
             the graphics card. This function is used to set the size of the rendering
             buffer.
            
             This function is optional. If it is not called, the library will use
             default values to generate the off-screen image. For panoramic
             images, the default size is 2048x1024. For dome view images, the default
             size is 1024x1024. For rectified images, the default size is the size
             of the texture being transferred.
            
             If this function is used to change the size of an off-screen image that
             already has been initialized, the renderer will be reinitialized. As a
             result, the texture ID of the next rendered image may not be the same.
             Call ladybugGetOpenGLTextureID() again to ensure that the proper
             texture ID is obtained.
            
             The maximum allowed width and height of the off-screen image depends 
             on the OpenGL implementation of the graphics card. The width of 
             the off-screen image can be set as much as twice the maximum 
             OpenGL view port width. The height of the off-screen image can 
             be set as much as the maximum OpenGL view port height. For example,
             if the maximum viewport size is 4096 x 4096, the maximum allowed
             off-screen image size is 8192 x 4096. If the width of the off-screen
             image is bigger than the maximum OpenGL view port width, the value of 
             uiCols must be a multiple of 4. 
             
             The graphics card rendering information, including OpenGL view port size,
             can be retrieved by calling ladybugGetImageRenderingInfo().
            
             This function also sets the resolution of rectified images if the 
             imageType argument is specified as any one of the rectified images. 
             For this purpose, this function must be called prior to calls to 
             ladybugUnrectifyPixel(), ladybugRectifyPixel(), 
             ladybugGetCameraUnitFocalLength() and ladybugGetCameraUnitImageCenter() 
             as an initialization step.
            
             Image types LADYBUG_RAW_CAM0, LADYBUG_RAW_CAM1, ..., LADYBUG_RAW_CAM5 are 
             used to identify the processed camera images that are updated by calling
             ladybugUpdateTextures(). They are not valid parameters for this function.
            
             LADYBUG_ALL_CAMERAS_VIEW is supported only for on-screen rendering. It is
             not supported for off-screen rendering.
            
             @param context   - The LadybugContext to access.
             @param imageType - The type of output image to be set.
             @param uiWidth   - The width of the off-screen image (in pixels). 
             @param uiHeight  - The height of the off-screen image (in pixels).
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugGetOffScreenImageSize(),
               ladybugRenderOffScreenImage(),
               ladybugReleaseOffScreenImage(),
               ladybugGetOpenGLTextureID(),
               ladybugGetImageRenderingInfo(),
               ladybugUnrectifyPixel(),
               ladybugRectifyPixel(), 
               ladybugGetCameraUnitFocalLength(),
               ladybugGetCameraUnitImageCenter()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetOffScreenImageSize(System.IntPtr,LadybugAPI.LadybugOutputImage,System.UInt32@,System.UInt32@)">
             Gets the size of the off-screen image.
            
             @param context   - The LadybugContext to access.
             @param imageType - The type of the output image to access.
             @param uiWidth  - Location to return the width of the image (in pixels).
             @param uiHeight - Location to return the height of the image (in pixels).
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugSetOffScreenImageSize()
        </member>
        <member name="M:LadybugAPI.Ladybug.RenderOffScreenImage(System.IntPtr,LadybugAPI.LadybugOutputImage,LadybugAPI.LadybugPixelFormat,LadybugAPI.LadybugProcessedImage@)">
             Renders an off-screen image and gets the image from the off-screen buffer.
             The size of the image will be defined by the default value or can be set
             by ladybugSetOffScreenImageSize() beforehand.
            
             This function renders the specified image to the off-screen frame buffer.
             If pImage is NULL, this function will only render the image in the 
             buffer and not return the rendered image. 
            
             The rendered off-screen image can also be accessed by using OpenGL 
             texture ID. This can be done by calling ladybugGetOpenGLTextureID().
            
             This function does not return metadata for the rendered image. 
             The metadata in LadybugProcessedImage struct to which pImage points remains
             unchanged. If pImage is saved to disk in LADYBUG_FILEFORMAT_EXIF format, 
             the metadata in LadybugProcessedImage must be filled in properly.
            
             @param context     - The LadybugContext to access.
             @param imageType   - Type of image to be rendered, as defined in LadybugOutputImage.
                                  The supported image types are:
                                  LADYBUG_PANORAMIC,
                                  LADYBUG_DOME,
                                  LADYBUG_SPHERICAL,
                                  LADYBUG_RECTIFIED_CAM0,
                                  LADYBUG_RECTIFIED_CAM1,
                                  LADYBUG_RECTIFIED_CAM2,
                                  LADYBUG_RECTIFIED_CAM3,
                                  LADYBUG_RECTIFIED_CAM4,
                                  LADYBUG_RECTIFIED_CAM5
             @param pixelFormat - Type of the pixel format for the offscreen image.
                                  For low dynamic range rendering, LADYBUG_BGR is recommended.
                                  For high dynamic range rendering, LADYBUG_BGR16 or LADYBUG_BGR32F is recommended.
             @param pImage      - A pointer to the output LadybugProcessedImage struct.
            
             @see ladybugGetOffScreenImageSize(),
               ladybugSetOffScreenImageSize(),
               ladybugGetOpenGLTextureID(),
               ladybugSaveImage().
        </member>
        <member name="M:LadybugAPI.Ladybug.GetOpenGLTextureID(System.IntPtr,LadybugAPI.LadybugOutputImage,System.UInt32*@,System.Single@,System.Single@)">
             Gets the OpenGL texture ID on the graphics card for the specified 
             LadybugOutputImage type.
            
             If ppuiID is NULL, this function returns LADYBUG_INVALID_ARGUMENT.
             
             If imageType argument is specified as one of the raw camera image types,
             i.e., the enums from LADYBUG_RAW_CAM0 to LADYBUG_RAW_CAM5, 
             this function can be called immediately after calling 
             ladybugConfigureOutputImages(). If imageType argument is specified as
             another image type, ladybugRenderOffScreenImage() must be called to
             render the off screen image prior to calling this function. Otherwise, 
             this function will return LADYBUG_INVALID_OPENGL_TEXTURE, because the
             off-screen rendering resources have not been initialized yet.
            
             When this function is called, there must be a valid current OpenGL 
             rendering context initialized by ladybugSetDisplayWindow(). We recommend
             validating the returned texture pointed to by ppuiID by using
             glIsTexture().
            
             The returned values pointed by pfROIWidth and pfROIHeight are used to 
             specify the texture coordinates in the OpenGL glTexCoord*() functions.
             These values specify the actual size of the texture image in the
             texture buffer on the graphics card.
            
             This function will return LADYBUG_INVALID_OPENGL_TEXTURE if software 
             rendering is enabled by ladybugEnableSoftwareRendering().
             
             For example, if the width of the texture buffer is 1024, and the width
             of the texture image is 512, then the fROIWidth value returned is
             (512-1)/(1024-1)=0.499511. Correspondingly, if the height of the texture
             buffer is 768, and the height of the texture image is 384, then the value
             of fROIHeight is (384-1)/(768-1)=0.499348.
            
             @param context     - The LadybugContext to access.
             @param imageType   - The type of image defined in LadybugOutputImage.
                                  The following image types are not valid for this function
                                  LADYBUG_ALL_RAW_IMAGES,
                                  LADYBUG_ALL_RECTIFIED_IMAGES,
                                  LADYBUG_ALL_OUTPUT_IMAGE
             @param ppuiID      - The returned pointer to the OpenGL texture ID of the image.
             @param pfROIWidth  - Location to return the ratio of the width of the actual
                                  texture image and the width of the allocated texture 
                                  buffer. The returned value is always 1 if imageType 
                                  argument is not specified as one of the enums from
                                  LADYBUG_RAW_CAM0 to LADYBUG_RAW_CAM5.
             @param pfROIHeight - Location to return the ratio of the height of the actual
                                  texture image and the height of the allocated texture
                                  buffer. The returned value is always 1 if imageType
                                  argument is not specified as one of the enums from
                                  LADYBUG_RAW_CAM0 to LADYBUG_RAW_CAM5.
            
             @see ladybugRenderOffScreenImage(),
               ladybugEnableSoftwareRendering(),
               ladybugSetDisplayWindow()
        </member>
        <member name="M:LadybugAPI.Ladybug.ReleaseOffScreenImage(System.IntPtr,LadybugAPI.LadybugOutputImage)">
             Releases the off-screen image rendering resources on the graphics card.
            
             Call this function to release the image rendering resources on the graphics
             card. If it is not called, the Ladybug library will automatically release 
             these resources when the Ladybug context is destroyed.
            
             @param context    - The LadybugContext to access.
             @param imageTypes - The type of image to release.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.EnableSoftwareRendering(System.IntPtr,System.Boolean)">
             Enables the Ladybug library to render off-screen images without the use of 
             hardware acceleration.
            
             This function is used to enable the Ladybug library to render off-screen 
             Ladybug images by using a buffer in system memory. This means that
             the image rendering process will not be hardware accelerated, although 
             a graphics card might be currently installed.
            
             This function must be called prior to calling 
             ladybugConfigureOutputImages().
            
             To enable software off-screen rendering, this function must be called, 
             even if there is no OpenGL graphics card installed. 
            
             Once software off-screen rendering is enabled, the current Ladybug 
             context cannot be used for displaying images in a window. Users 
             cannot disable software off-screen rendering and reconfigure the
             the current context for displaying images.
            
             Function ladybugGetOpenGLTextureID() will return 
             LADYBUG_INVALID_OPENGL_TEXTURE when software rendering is enabled.
            
             This function cannot be used with Ladybug3 or newer cameras.
            
             @param context - The LadybugContext to access.
             @param enable  - Specifies whether to enable software rendering.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugConfigureOutputImages(),
               ladybugRenderOffScreenImage(),
               ladybugSetOffScreenImageSize(),
               ladybugSetDisplayWindow(),
               ladybugGetOpenGLTextureID()
        </member>
        <member name="M:LadybugAPI.Ladybug.SetTextureIntensityAdjustment(System.IntPtr,System.Boolean)">
             Enables adjustment of image intensity to compensate for exposure
             differences between each sensor on the camera system.
            
             You need to call ladybugConfigureOutputImages() before this is called.
            
             This feature is useful when the camera is set to independent exposure mode and 
             high dynamic range (HDR) rendering is used. 
            
             When the camera is in independent exposure mode, images from each camera 
             are taken with different exposure settings, so the level of image intensity
             may appear different across the borders of the stitched image. By enabling intensity adjustment,
             image intensity from all cameras are normalized to the same scaling, and the 
             stitched image looks more natural.
            
             This is also useful in conjunction with HDR
             rendering (using floating point pixel format for ladybugRenderOffscreenImage).
            
             This functionality requires OpenGL version 2.0 or later which is not
             provided by the software renderer (see ladybugEnableSoftwareRendering()).
            
             When enabled, exposure is calculated in ladybugConvertImage()
             and the actual scaling is applied in the GPU.
            
             This functionality is only supported in Ladybug3 with firmware that 
             supports independent exposure mode.
            
             @param context - The LadybugContext to access.
             @param enable  - Specifies whether to enable this functionality. The default 
                              value is off.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugConvertImage(), ladybugRenderOffscreenImage()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetSensor(System.IntPtr,LadybugAPI.LadybugSensorType,System.Single@)">
             Get the current value of the specified sensor.
            
             @param context The LadybugContext to access.
             @param sensorType The sensor to be accessed.
             @param value The value returned by the sensor.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetSensorAxes(System.IntPtr,LadybugAPI.LadybugSensorType,LadybugAPI.LadybugTriplet@)">
             Get the current value of the specified 3-axis sensor.
            
             @param context The LadybugContext to access.
             @param sensorType The sensor to be accessed.
             @param value The values returned by the sensor.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetSensorInfo(System.IntPtr,LadybugAPI.LadybugSensorType,LadybugAPI.LadybugSensorInfo@)">
             Get information about the specified sensor.
            
             @param context The LadybugContext to access.
             @param sensorType The sensor to be accessed.
             @param value The information returned by the sensor.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.CreateStreamContext(System.IntPtr@)">
             Creates a new Ladybug stream context.
             This function must be called prior to other stream-related 
             functions. A stream context can either be used to read from a stream OR
             write to a stream, but not both simultaneously.
            
             Prior to writing images to a stream file, 
             ladybugInitializeStreamForWriting() must be called to initialize the  
             stream. To read images from a stream file, the application must call 
             ladybugInitializeStreamForReading() to initialize the stream.
            
             This function will set the context to NULL if it is unsuccessful.
            
             @param context - A pointer to a LadybugStreamContext.
            
             @return A LadybugError indicating the success of the function.
            
             @see   ladybugDestroyStreamContext()
        </member>
        <member name="M:LadybugAPI.Ladybug.DestroyStreamContext(System.IntPtr@)">
             Destroys a Ladybug stream context.
            
             Frees memory associated with the LadybugStreamContext. This function   
             should be called when your application stops using the stream.
            
             @param context - A pointer to a LadybugStreamContext to destroy.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugCreateStreamContext()
        </member>
        <member name="M:LadybugAPI.Ladybug.StopStream(System.IntPtr)">
             Closes the current stream.
            
             This function should be called when your application stops writing
             or reading.
            
             @param context - The LadybugStreamContext to access.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.InitializeStreamForWriting(System.IntPtr,System.String,System.IntPtr,System.Text.StringBuilder,System.Boolean)">
             Initializes the stream context and opens the first stream file for writing.
            
             The initialized stream is used for recording images from a camera that
             has been initialized with a Ladybug context. This function automatically
             loads the configuration file from the camera.
             
             The image stream is recorded to a set of files. The size of each file is
             limited to 2GB. The Ladybug library names the recorded stream files 
             automatically according to the name specified by pszBaseFileName. 
             For example, if pszBaseFileName is "c:\\ladybug\\myStream" or 
             "c:\\ladybug\\myStream.pgr", the recorded files will be named
             "c:\\ladybug\\myStream-000000.pgr", "c:\\ladybug\myStream-000001.pgr", 
             "c:\\ladybug\\myStream-000002.pgr", etc.. Here, "c:\\ladybug\myStream" 
             is the base name of this stream.
             
             If the first stream file name exists, the Ladybug library automatically
             increases the first three digits of the numbers in the file name to 
             find another available name. For example, if "myStream-000000.pgr" 
             exists, "myStream-001000.pgr" will be used as the first
             stream file name. The stream will be recorded to "myStream-001000.pgr",
             "myStream-001001.pgr", "myStream-001002.pgr", etc.
            
             If pszFileNameOpened is not NULL, this call will return the name of the
             first stream file at the location pointed by this pointer. The caller must
             allocate the memory needed for the file name.
            
             For more information about Ladybug stream file format, see the topic 
             'Stream File Format' in the SDK Help.
            
             @param streamContext     - The LadybugStreamContext to access.
             @param pszBaseFileName   - Base name of the stream file.
             @param cameraContext     - A LadybugContext created for a camera.
             @param pszFileNameOpened - Location to return the name of the first stream file 
                                        that is actually opened by this call.
             @param async            - A flag indicating if the image recording operation is 
                                        synchronous or asynchronous. The default value is
                                        false. If true, the image recording operation
                                        is asynchronous and a call to ladybugWriteImageToStream()
                                        returns immediately. If false, the image recording                             
                                        operation is synchronous and a call to 
                                        ladybugWriteImageToStream() is blocked until
                                        the image recording operation completes. 
            
             @return A LadybugError indicating the success of the function. If this 
               function returns LADYBUG_ALREADY_INITIALIZED, this means that the
               context has already been initialized for writing. 
               To initialize this stream context for writing to a different stream,
               ladybugStopStream() must first be called to close the current stream.
               If the stream context is already initialized for reading, this 
               function will return LADYBUG_ALREADY_INITIALIZED_READING.
            
             @see ladybugWriteImageToStream()
             @see ladybugInitializeStreamForWritingEx()
             @see ladybugInitializeStreamForReading()
        </member>
        <member name="M:LadybugAPI.Ladybug.InitializeStreamForWritingEx(System.IntPtr,System.String,LadybugAPI.LadybugStreamHeadInfo@,System.String,System.Boolean)">
             Initializes the stream context and opens the first stream file for writing.
            
             This function is similar to ladybugInitializeStreamForWriting(). It 
             initializes the stream context and opens the first stream file for
             writing. This function is used to initialize a stream with a specified
             LadybugStreamHeadInfo and configuration file name.
            
             The following members of the LadybugStreamHeadInfo structure need to be
             initialized manually: ulFrameRate, serialBase, dataFormat, resolution
             and stippledFormat. 
            
             @param streamContext    - The LadybugStreamContext to access.
             @param baseFileName     - Name of the stream file.
             @param streamInfo       - Pointer to a LadybugStreamHeadInfo structure.
             @param configFilePath   - Path to the config file of the Ladybug.
             @param async            - A flag indicating if the stream recording operation is 
                                        synchronous or asynchronous. The default value is false. 
                                        If true, the stream recording operation is asynchronous 
                                        and a call to ladybugWriteImageToStream() returns 
                                        immediately. If false, the stream recording operation 
                                        is synchronous and a call to ladybugWriteImageToStream() 
                                        is blocked until the image is actually written to 
                                        the stream. The default value is false. 
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugWriteImageToStream(), ladybugInitializeStreamForWriting()
        </member>
        <member name="M:LadybugAPI.Ladybug.WriteImageToStream(System.IntPtr,LadybugAPI.LadybugImage@,System.Double@,System.UInt32@)">
             Writes a Ladybug image to the stream.
            
             If the stream recording is initialized as asynchronous:
               This function puts the image in image buffers and returns immediately.
               A copy of the buffer is made so it is safe to unlock the image immediately
               after this function returns. If an error is returned, the last one or two
               images written by this function may be lost. When ladybugStopStream() is
               called, all the buffered images are flushed.
             
             If the stream recording is initialized as synchronous:
               This function is blocked until the image has been written to the stream.
            
             If there is less than 2GB free disk space, the function will return
             LADYBUG_ERROR_DISK_NOT_ENOUGH_SPACE.
            
             @param streamContext      - The LadybugStreamContext to access.
             @param image              - A pointer to a LadybugImage to be written to disk.
             @param MBBytesWritten     - A pointer to a double to contain the total number of
                                         bytes written (in MB), including this frame.
             @param numImagesWritten   - A pointer to an unsigned long to return the number of 
                                         images written so far, including this frame.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugInitializeStreamForWriting(),
               ladybugInitializeStreamForWritingEx(),
               ladybugWriteImageToStreamWithAdjustment(),
               ladybugStopStream()
        </member>
        <member name="M:LadybugAPI.Ladybug.WriteImageToStreamWithAdjustment(System.IntPtr,LadybugAPI.LadybugImage@,LadybugAPI.LadybugFullAdjustmentParameters@,System.Double@,System.UInt32@)">
             Writes a Ladybug image to the stream, including adjustment parameters
             for post-processing. This function is only valid for images that
             require post-processing.
            
             This function performs identically to ladybugWriteImageToStream(),
             with the exception of the additional parameter for adjustment.
            
             @param streamContext        - The LadybugStreamContext to access.
             @param image                - A pointer to a LadybugImage to be written to disk.
             @param adjustmentParameters - Adjustment parameters for post-processing.
             @param MBBytesWritten       - A pointer to a double to contain the total number of
                                            bytes written (in MB), including this frame.
             @param numImagesWritten     - A pointer to an unsigned long to return the number of 
                                            images written so far, including this frame.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugWriteImageToStream()
        </member>
        <member name="M:LadybugAPI.Ladybug.InitializeStreamForReading(System.IntPtr,System.String,System.Boolean)">
                     * Initializes the context and opens the stream file(s) for reading.
                     * Sets the current reading position to the first image in the stream.
                     *
                     * If an error is detected in the stream file, such as a corrupted header
                     * due to power failure, this function returns LADYBUG_CORRUPTED_PGR_STREAM.
                     *
                     * The Ladybug library reads all the stream files that share the same base
                     * name as specified by path. The last three digits of the 
                     * name of the first opened stream file are always "000".
                     *
                     * For streams that require post-processing (e.g. Ladybug5 12-bit streams),
                     * this function will attempt to open the matching XML file that contains
                     * the post-processing settings. For example, if the stream filename is
                     * "myStream-000001.pgr", then the XML file to be loaded is named 
                     * "myStream-000.xml".
            
                     * If a XML file is not present, it will be automatically created for the 
                     * entire stream, with each image containing default settings.
                     *
                     * Example:
                     *   If path is "c:\\ladybug\\myStream-000002.pgr" or
                     *   "c:\\ladybug\\myStream-000010.pgr", the library will initialize and 
                     *   read file "c:\\ladybug\\myStream-000000.pgr" and all the files that 
                     *   share the same base name "c:\\ladybug\\myStream-000":
                     *   - c:\\ladybug\\myStream-000000.pgr,
                     *   - c:\\ladybug\\myStream-000001.pgr,
                     *   - c:\\ladybug\\myStream-000002.pgr,
                     *   - ...
                     *   - c:\\ladybug\\myStream-000030.pgr,
                     *   If applicable, the XML file will be c:\\ladybug\\myStream-000.xml.
                     *
                     * If an application calls ladybugInitializeStreamForReading(context, 
                     * "d:\\ladybug\\lb2-003002.pgr"), the following stream files will be
                     * initialized for reading:
                     * - d:\\ladybug\\lb2-003000.pgr,
                     * - d:\\ladybug\\lb2-003001.pgr,
                     * - d:\\ladybug\\lb2-003002.pgr,
                     * If applicable, the XML file will be d:\\ladybug\\lb2-003.xml.
                     *
                     * For more information about Ladybug stream file format, see the topic 'Stream File 
                     * Format'.
                     *
                     * @param  context    - The LadybugStreamContext to access.
                     * @param  path       - One of the names of the stream to be initialized.
                     * @param  async      - A flag indicating if the stream reading operation is
                     *                      synchronous or asynchronous. If true, the stream 
                     *                      reading operation is asynchronous and the Ladybug 
                     *                      library uses internal buffers to speed up the image 
                     *                      reading operation. ladybugReadImageFromStream()
                     *                      may return the image immediately if the
                     *                      requested image is already in the buffer. 
                     *                      The default value is false.
                     *
                     * @return A LadybugError indicating the success of the function.
                     *
                     * @see ladybugReadImageFromStream(), ladybugInitializeStreamForWriting()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetStreamHeader(System.IntPtr,LadybugAPI.LadybugStreamHeadInfo@,System.String)">
             Gets the information of the currently-opened stream file.
            
             The information is returned from the header of each stream file.
             This function also resets the current reading position to the first image. 
            
             @param context               - The LadybugStreamContext to access.
             @param pStreamHeaderInfo     - A pointer to a LadybugStreamHeadInfo structure.
             @param pszAssociatedFileName - A pointer to a string to contain the name of the
                                            stream file. Use NULL if this value is not
                                            required.
            
             @return   A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GetStreamNumOfImages(System.IntPtr,System.UInt32@)">
             Gets the total number of images in a stream. 
            
             The number of images returned is the total number of images in all of the
             stream files that share the same base stream file name.
             This function also resets the current reading position to the first image. 
            
             @param  context   - The LadybugStreamContext to access.
             @param  puiImages - A pointer to an unsigned int to store the number of images.
            
             @return A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.GoToImage(System.IntPtr,System.UInt32)">
             Sets the current reading position to the specified image in the stream.
            
             If the stream reading is initialized as asynchronous, the Ladybug library 
             starts reading the current image from the image buffer automatically
             so that a subsequent call to ladybugReadImageFromStream() can return
             the image immediately.
            
             @param context    - The LadybugStreamContext to access.
             @param uiImageNum - The index of the image to go to. The index for the first
                                  image is zero.
            
             @return   A LadybugError indicating the success of the function.
               If uiImageNum is greater than the total number of images in the stream, 
               LADYBUG_INVALID_ARGUMENT will be returned.
            
             @see ladybugReadImageFromStream(), ladybugGetStreamNumOfImages()
        </member>
        <member name="M:LadybugAPI.Ladybug.ReadImageFromStream(System.IntPtr,LadybugAPI.LadybugImage@)">
             Reads the image that is located at the current reading position of the
             stream and sets the reading position to the next image.
            
             If the stream reading is initialized as asynchronous, this function may
             return the image immediately if the requested image is already in the 
             buffer. If the stream reading is initialized as synchronous, this 
             function starts reading and returns the image.
            
             @param context    - The LadybugStreamContext to access.
             @param image      - Pointer to a LadybugImage structure to store the image.
            
             @return   A LadybugError indicating the success of the function.
            
             @see ladybugInitializeStreamForReading(), ladybugGoToImage()
        </member>
        <member name="M:LadybugAPI.Ladybug.ReadImageFromStreamWithAdjustment(System.IntPtr,LadybugAPI.LadybugImage@,LadybugAPI.LadybugFullAdjustmentParameters@)">
             Identical to ladybugReadImageFromStream(), but also returns the relevant
             adjustment parameters associated with the image.
            
             Additional settings associated with the image are also returned:
             - Tone mapping
             - Sharpening
             - False color removal
            
             @param context               - The LadybugStreamContext to access.
             @param image                 - Pointer to a LadybugImage structure to store the image.
             @param adjustmentParameters  - Pointer to a LadybugAdjustmentParameters structure to be filled.
            
             @return   A LadybugError indicating the success of the function.
            
             @see ladybugInitializeStreamForReading(), ladybugGoToImage()
        </member>
        <member name="M:LadybugAPI.Ladybug.GetStreamConfigFile(System.IntPtr,System.String)">
             Reads the configuration data from the stream and writes it to a 
             configuration file.
            
             @param  context   - The LadybugStreamContext to access.
             @param  path      - The file name of the configuration file. 
            
             @return   A LadybugError indicating the success of the function.
               This function also resets the current reading position to the first image. 
        </member>
        <member name="M:LadybugAPI.Ladybug.WriteGPSSummaryDataToFile(System.IntPtr,System.String,LadybugAPI.LadybugGPSFileType,System.UInt32,System.UInt32,System.String)">
             Writes the GPS summary data from a stream to a specified file.
            
             This function outputs GPS data from all stream files with the same base
             file name.
             After calling this function successfully, the frame number is reset to 0.
            
             uiWidth and uiHeight are only used for file type LADYBUG_GPS_HTML.
            
             In order to publish the HTML file that contains GoogleMaps, a valid API 
             key is necessary. See http: *code.google.com/apis/maps/signup.html for
             more information.
            
             Since Ladybug SDK version 1.5.1.4, Google Maps JavaScript API V3
             is used. The pszGoogleMapsAPIKey parameter is ignored.
            
             @param  context             - The LadybugStreamContext to access.
             @param  textFileName        - The file name of the configuration file. 
             @param  outputFileType      - The output file type. (See LadybugGPSFileType)
             @param  uiWidth             - The Google Maps width in the HTML file.
             @param  uiHeight            - The Google Maps height in the HTML file.
             @param  googleMapsAPIKey    - The Google Maps API key string.
            
             @return   A LadybugError indicating the success of the function.
        </member>
        <member name="M:LadybugAPI.Ladybug.ReplaceAdjustmentParameterForImage(System.IntPtr,System.UInt32,LadybugAPI.LadybugFullAdjustmentParameters@)">
             Replaces a adjustment parameter for the specified image. This may be 
             useful if there is a need to change the adjustment parameters for an
             image after recording.
            
             @param context - The LadybugStreamContext to access.
             @param uiImageNum - Index of the image to set the new parameters to
             @param ajustmentParameters - New parameters to be set
            
             @see ladybugInitializeStreamForReading()
        </member>
        <member name="M:LadybugAPI.Ladybug.SaveModifiedAdjustmentParameters(System.IntPtr)">
             Saves all outstanding adjustment parameters that have not been
             written to disk.
            
             This is only applicable for stream reading contexts.
             Adjustment parameters will be automatically written to disk
             during stream writing.
            
             @param context - The LadybugStreamContext to access.
        </member>
        <member name="M:LadybugAPI.Ladybug.CreateVideoContext(System.IntPtr@)">
             Creates a new context for accessing video-specific functions of the
             library.  
            
             A video context is useful for creating a video clip of the stitched image.
             Currently, only H.264 codec is supported for creating a video.
            
             @param context - A pointer to a LadybugVideoContext to fill with the created context.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugDestroyVideoContext()
        </member>
        <member name="M:LadybugAPI.Ladybug.DestroyVideoContext(System.IntPtr@)">
             Frees memory associated with the LadybugVideoContext.
            
             @param context - A pointer to the LadybugVideoContext to destroy.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugCreateVideoContext()
        </member>
        <member name="M:LadybugAPI.Ladybug.OpenVideo(System.IntPtr,System.String@,LadybugAPI.LadybugH264Option@)">
             Opens a video file. 
             Once opened, you can append as many frames as you want to the video. 
             After finishing appending frames, you must close the video.
            
             @param context   - The video context. This must be created beforehand.
             @param fileName  - The file path to save.
             @param options   - The options for the codec.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugCreateVideoContext()
             @see ladybugCloseVideo()
             @see ladybugAppendVideoFrame()
        </member>
        <member name="M:LadybugAPI.Ladybug.CloseVideo(System.IntPtr)">
             Closes a video file.
            
             @param context - The video context.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugCreateVideoContext()
             @see ladybugOpenVideo()
        </member>
        <member name="M:LadybugAPI.Ladybug.AppendVideoFrame(System.IntPtr,LadybugAPI.LadybugProcessedImage@)">
             Appends a frame to the video.
             The video must be opened before appending frames.
            
             @param context - The video context.
             @param image  - An image to be appended. This is created by ladybugRenderOffScreenImage.
            
             @return A LadybugError indicating the success of the function.
            
             @see ladybugCreateVideoContext()
             @see ladybugOpenVideo()
             @see ladybugRenderOffScreenImage()
        </member>
        <member name="M:LadybugAPI.LadybugFunctors.ToBytePerChannel(LadybugAPI.LadybugPixelFormat)">
            <summary>
            Given a <c>LadybugPixelFormat</c>, returns the number of pixels per channel.
            </summary>
            <param name="format"><c>LadybugPixelFormat</c>.</param>
            <returns>Number of pixels per channel for specified pixel format.</returns>
        </member>
        <member name="M:LadybugAPI.LadybugFunctors.Is8bitInt(LadybugAPI.LadybugPixelFormat)">
            <summary>
            Checks if a given <c>LadybugPixelFormat</c> is 8-bit int.
            </summary>
            <param name="pixelFormat"><c>LadybugPixelFormat</c>.</param>
            <returns>Returns true if format is 8-bit int, false otherwise.</returns>
        </member>
        <member name="M:LadybugAPI.LadybugFunctors.Is16bitInt(LadybugAPI.LadybugPixelFormat)">
            <summary>
            Checks if a given <c>LadybugPixelFormat</c> is a 16-bit int.
            </summary>
            <param name="pixelFormat"><c>LadybugPixelFormat</c>.</param>
            <returns>Returns true if format is a 16-bit int, false otherwise.</returns>
        </member>
        <member name="M:LadybugAPI.LadybugFunctors.Is16bitFloat(LadybugAPI.LadybugPixelFormat)">
            <summary>
            Checks if a given <c>LadybugPixelFormat</c> is a 16-bit float.
            </summary>
            <param name="pixelFormat"><c>LadybugPixelFormat</c>.</param>
            <returns>Returns true if format is 16-bit float, false otherwise.</returns>
        </member>
        <member name="M:LadybugAPI.LadybugFunctors.Is32bitFloat(LadybugAPI.LadybugPixelFormat)">
            <summary>
            Checks if a given <c>LadybugPixelFormat</c> is a 32-bit float.
            </summary>
            <param name="pixelFormat"><c>LadybugPixelFormat</c>.</param>
            <returns>Returns true if format is 32-bit float, false otherwise.</returns>
        </member>
        <member name="M:LadybugAPI.LadybugFunctors.GetScaleFactor(LadybugAPI.LadybugColorProcessingMethod)">
            <summary>
            Given a <c>LadybugColorProcessingMethod</c>, returns the associated scale factor.
            </summary>
            <param name="method"><c>LadybugColorProcessingMethod</c>.</param>
            <returns>Scale factor uint.</returns>
        </member>
        <member name="M:LadybugAPI.LadybugFunctors.ToNumChannels(LadybugAPI.LadybugPixelFormat)">
            <summary>
            Takes a <c>LadybugPixelFormat</c> and returns the corresponding number of
            channels.
            </summary>
            <param name="format"><c>LadybugPixelFormat</c>.</param>
            <returns>Number of channels used for the <c>LadybugPixelFormat.</c></returns>
        </member>
        <member name="M:LadybugAPI.LadybugFunctors.ToAbbrevString(LadybugAPI.LadybugDataFormat)">
            <summary>
            Converts the given <c>LadybugDataFormat</c> into its string representation.
            </summary>
            <param name="format"><c>LadybugDataFormat</c> to convert.</param>
            <returns>String value of the <c>LadybugDataFormat</c>.</returns>
        </member>
        <member name="M:LadybugAPI.dataFormat.isImplemented(LadybugAPI.LadybugDataFormat)">
             Method:    isImplemented
             Description : Return true if the format is implemented and
                           is concrete (return false for LADYBUG_DATAFORMAT_ANY
            
             @param format
            
             @return
        </member>
        <member name="M:LadybugAPI.dataFormat.isHalfHeight(LadybugAPI.LadybugDataFormat)">
             Method:    isHalfHeight
             Description :
            
             @param format
            
             @return True if format is half, false if it is full
        </member>
        <member name="M:LadybugAPI.dataFormat.isUncompressed(LadybugAPI.LadybugDataFormat)">
             Method:    isUncompressed
             Description :
            
             @param format
            
             @return  True if format is RAW, false if it is JPEG
        </member>
        <member name="M:LadybugAPI.dataFormat.isJPEG(LadybugAPI.LadybugDataFormat)">
             Method:    isJPEG
             Description :
            
             @param format
            
             @return True if format is JPEG, false if it is RAW
        </member>
        <member name="M:LadybugAPI.dataFormat.is12bit(LadybugAPI.LadybugDataFormat)">
             Method: is12bit
             Description : Checks if the specified data format is 12 bit.
            
             @param format
            
             @return True if format is 1.5 bytes/pixel, false if it is 1.
        </member>
        <member name="M:LadybugAPI.dataFormat.isHighBitDepth(LadybugAPI.LadybugDataFormat)">
             Method:    isHighBitDepth
             Description : Checks if the specified data format is high bit depth (either 12 or 16 bit)
            
             @param format
            
             @return True if format is 12 or 16 bits wide, false otherwise.
        </member>
        <member name="T:LadybugAPI.LadybugPoint3d">
            A 3D point, in spherically-oriented coordinates and radial coordinates,
            as well as cylindrical coordinates
        </member>
        <member name="T:LadybugAPI.LadybugImage3d">
            An "image" of 3D points corresponding to values of the source image. 
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugImage3d.uiCols" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugImage3d.dRx" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugImage3d.fCylHeightMax" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugImage3d.ppoints" -->
        <member name="T:LadybugAPI.LadybugPanoAngle">
             Available viewing angle options for panoramic and spherical image rendering.
            
             The viewing angle is specified by choosing which camera views are the
             front and pole/down cameras.
            
             The front camera occupies the center region of the rendered image.
            
             The pole or down camera occupies the top or bottom region of the
             rendered image.
            
             Together they dictate the exact orientation in which all the cameras
             must be rendered in order to generate an image that satisfies the
             placement of these two camera units.
            
             This enum is used in calls to ladybugSetPanoramicViewingAngle() and
             ladybugGetPanoramicViewingAngle().
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_0_POLE_5" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_1_POLE_5" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_2_POLE_5" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_3_POLE_5" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_4_POLE_5" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_5_POLE_0" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_5_POLE_1" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_5_POLE_2" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_5_POLE_3" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_5_POLE_4" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_0_DOWN_5" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_1_DOWN_5" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_2_DOWN_5" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_3_DOWN_5" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_4_DOWN_5" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_5_DOWN_0" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_5_DOWN_1" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_5_DOWN_2" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_5_DOWN_3" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.LADYBUG_FRONT_5_DOWN_4" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugPanoAngle.NUM_PANO_ANGLES" -->
        <member name="T:LadybugAPI.LadybugMapType">
             The available panoramic image mapping types.
            
             This enumeration indicates the kind of coordinate mapping used to transform a 3D point
             into a 2D representation.
        </member>
        <member name="F:LadybugAPI.LadybugMapType.LADYBUG_MAP_RADIAL">
            Radial Angle Mapping - all 6 cameras are mapped to a panoramic image
            where 3D is mapped to 2 angles
        </member>
        <member name="F:LadybugAPI.LadybugMapType.LADYBUG_MAP_CYLINDRICAL">
            Cylindrical Mapping - only the 5 cameras in the horizontal ring are
            mapped to the panoramic image - 3D is mapped to an angle and height
        </member>
        <member name="M:LadybugAPI.LadybugNMEAGPGGA.ToString">
            Override ToString for struct 
        </member>
        <member name="M:LadybugAPI.LadybugNMEAGPGSA.ToString">
            Override ToString for struct 
        </member>
        <member name="M:LadybugAPI.LadybugNMEAGPGSV.ToString">
            Override ToString for struct 
        </member>
        <member name="M:LadybugAPI.LadybugNMEAGPRMC.ToString">
            Override ToString for struct 
        </member>
        <member name="M:LadybugAPI.LadybugNMEAGPZDA.ToString">
            Override ToString for struct 
        </member>
        <member name="M:LadybugAPI.LadybugNMEAGPVTG.ToString">
            Override ToString for struct 
        </member>
        <member name="T:LadybugAPI.LadybugNMEAGPHDT">
            GPS NMEA GPHDT data - Heading - True. 
        </member>
        <member name="F:LadybugAPI.LadybugNMEAGPHDT.bValidData">
            Whether all the data is valid. 
        </member>
        <member name="F:LadybugAPI.LadybugNMEAGPHDT.heading">
            Heading degrees, true 
        </member>
        <member name="F:LadybugAPI.LadybugNMEAGPHDT.ulCount">
            A counter containing the number of GPVTG sentences parsed since
            the GPS device was started (or restarted).
            If the GPS data is from a Ladybug image, it is always 1.
        </member>
        <member name="F:LadybugAPI.LadybugNMEAGPHDT.ulReserved">
            Reserved 
        </member>
        <member name="M:LadybugAPI.LadybugNMEAGPHDT.ToString">
            Override ToString for struct 
        </member>
        <member name="T:LadybugAPI.LadybugNMEAPRDID">
            GPS NMEA PRDID data. 
        </member>
        <member name="F:LadybugAPI.LadybugNMEAPRDID.bValidData">
            Whether all the data is valid. 
        </member>
        <member name="F:LadybugAPI.LadybugNMEAPRDID.pitch">
            Pitch degrees. 
        </member>
        <member name="F:LadybugAPI.LadybugNMEAPRDID.roll">
            Roll degrees. 
        </member>
        <member name="F:LadybugAPI.LadybugNMEAPRDID.heading">
            Heading. 
        </member>
        <member name="F:LadybugAPI.LadybugNMEAPRDID.ulCount">
            A counter containing the number of GPVTG sentences parsed since
            the GPS device was started (or restarted).
            If the GPS data is from a Ladybug image, it is always 1.
        </member>
        <member name="F:LadybugAPI.LadybugNMEAPRDID.ulReserved">
            Reserved 
        </member>
        <member name="M:LadybugAPI.LadybugNMEAPRDID.ToString">
            Override ToString for struct 
        </member>
        <member name="F:LadybugAPI.LadybugNMEAGPSData.dataGPHDT">
            GPHDT data structure 
        </member>
        <member name="F:LadybugAPI.LadybugNMEAGPSData.dataPRDID">
            PRDID data structure 
        </member>
        <member name="M:LadybugAPI.LadybugNMEAGPSData.ToString">
            Override ToString for struct 
        </member>
        <member name="T:LadybugAPI.LadybugAdjustmentType">
            Possible adjustment states for an adjustment parameter. 
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugAdjustmentType.AUTOMATIC" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugAdjustmentType.MANUAL" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugAdjustmentType.LADYBUG_ADJUSTMENT_TYPE_SIZE" -->
        <member name="T:LadybugAPI.LadybugGainAdjustmentType">
            Possible gain modes for exposure algorithm. 
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugGainAdjustmentType.GAIN_MANUAL" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugGainAdjustmentType.GAIN_FIX_EXPOSURE" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugGainAdjustmentType.GAIN_AUTOMATIC_COMPENSATION" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugGainAdjustmentType.GAIN_AUTOMATIC_COMPENSATION_INDEPENDENT" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugGainAdjustmentType.LADYBUG_GAIN_ADJUSTMENT_TYPE_SIZE" -->
        <member name="T:LadybugAPI.LadybugSmearCorrectionType">
            Types of smear correction algorithms. 
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugSmearCorrectionType.SMEAR_REMOVE" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugSmearCorrectionType.SMEAR_REMOVE_FILL" -->
        <member name="F:LadybugAPI.LadybugSmearCorrectionType.LADYBUG_SMEAR_CORRECTION_TYPE_SIZE">
            The number of values defined in LadybugSmearCorrectionType. 
        </member>
        <member name="T:LadybugAPI.LadybugAdjustmentParametersField">
             Defines values for refering to specific fields in the LadybugAdjustmentParameters struct.
            
             For example, LADYBUG_ADJUSTMENT_PARAMETERS_BLACKLEVEL, refers to the blackLevel field.
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParametersField.LADYBUG_ADJUSTMENT_PARAMETERS_SIZE">
            The number of elements in the LadybugAdjustmentParametersField enum 
        </member>
        <member name="T:LadybugAPI.LadybugAdjustmentParameters">
             Defines an image adjustment to be applied to the raw image.
            
             To apply these settings, set the parameters to the library via
             ladybugSetAdjustmentParameters(). These settings will then be applied the
             next time ladybugConvertImage() or ladybugConvertImageEx() is called.
            
             These are the types of adjustment that can be applied:
             - Black Level
             - Gain (including regions of interest for auto gain)
             - White balance
             - Gamma
             - Smear correction
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.doAdjustment">
             Whether to perform any image adjustments.
            
             If true, adjustment will take effect in ladybugConvertImage() and 
             ladybugConvertImageEx() on any image 
             that was not previously adjusted by the camera.
            
             If false, it disables any adjustment and displays the image as received 
             from the camera (i.e. the raw image). 
            
             Note that disabling individual parameters is not enough to disable 
             everything since some default image adjustment will always be performed
             regardless of image settings.
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.blackLevelAdjustmentType">
            Whether to perform black level adjustment. 
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.blackLevel">
            BlackLevel adjustment value. Applies a correction of 
            256 * 256 * blackLevel to every pixel of the RGB image.
            A value between 0.00 and 0.07 is acceptable. The default value is 0.0. 
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.gainAdjustmentType">
            Gain adjustment type  
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.gainRoi">
            Region of interest for auto gain 
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.considerGammaInGainAdjustment">
            Determines if gamma should be taken in account in the automatic gain adjustment. 
            Has an impact only when gainAdjustmentType is automatic and gamma is on.
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.gainManualValue">
            When manual gain is specified, the amount of gain applied to the image (in dB). 
            A value between 0.0 and 24.0 is acceptable.
            The default value is 0.0.
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.exposureTarget">
            When gain is fix exposure, the library will attempt to adjust the
            the gain in order to achieve the specified target mean.
            A value between 0 and 65535 is acceptable.
            The default value is 32768.
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.exposureCompensation">
            When gain adjustment type is GAIN_AUTOMATIC_COMPENSATION, 
            the library will determine the gain automatically. This compensation
            indicates to the library if the user prefer a darker or brighter solution.
            A value between -100 and 100 is acceptable.
            The default value is 0.
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.whiteBalanceAdjustmentType">
            White balance adjustment type. 
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.gainRed_ManualValue">
            Gain applied to red channel (in dB relative to Green). A value between -12 and 12 is acceptable. 
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.gainBlue_ManualValue">
            Gain applied to blue channel. (in dB relative to Green). A value between -12 and 12 is acceptable. 
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.gammaAdjustmentType">
            Gamma adjustment type (Disable or Manual only). 
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.gammaManualValue">
            Gamma value. A value between 0.5 and 4 is acceptable. 
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.smearAlgo">
            Smear correction to be performed. 
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.noiseReduction">
            Whether to perform noise reduction on the image. 
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.saturation">
            Saturation value. A value of 0.0 will fully desaturate the image. The default value is 1.0. 
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.blackLevellingType">
            The black levelling type to be performed (ie. low intensity pixels). 
        </member>
        <member name="F:LadybugAPI.LadybugAdjustmentParameters.whiteLevellingType">
            The white levelling type to be performed (ie. high intensity pixels). 
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugAdjustmentParameters.blackPointManual" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugAdjustmentParameters.whitePointManual" -->
        <member name="T:LadybugAPI.LadybugFullAdjustmentParameters">
            Wrapper struct to contain all the parameters that can be returned. 
            This includes additional functionality that is not controlled directly 
            via the LadybugAdjustmentParameters parameters.
        </member>
        <member name="T:LadybugAPI.LadybugOutputImage">
            This enumeration describes Ladybug output image types. 
        </member>
        <member name="T:LadybugAPI.LadybugImageRenderingInfo">
            A record used in querying Ladybug image rendering information. 
        </member>
        <member name="F:LadybugAPI.LadybugImageRenderingInfo.pszDeviceDescription">
            Video card device description 
        </member>
        <member name="F:LadybugAPI.LadybugImageRenderingInfo.pszAdapterString">
            Video card adapter string 
        </member>
        <member name="F:LadybugAPI.LadybugImageRenderingInfo.pszBiosString">
            BIOS version string 
        </member>
        <member name="F:LadybugAPI.LadybugImageRenderingInfo.pszChipType">
            Video card chip type 
        </member>
        <member name="F:LadybugAPI.LadybugImageRenderingInfo.pszDacType">
            Video card digital-to-analog converter type 
        </member>
        <member name="F:LadybugAPI.LadybugImageRenderingInfo.pszInstalledDisplayDriver">
            Video card installed display driver 
        </member>
        <member name="F:LadybugAPI.LadybugImageRenderingInfo.pszDriverVersion">
            Video card driver version string 
        </member>
        <member name="F:LadybugAPI.LadybugImageRenderingInfo.uiMemorySize">
            Video card memory size 
        </member>
        <member name="F:LadybugAPI.LadybugImageRenderingInfo.pszOpenGLVersion">
            OpenGL version string 
        </member>
        <member name="F:LadybugAPI.LadybugImageRenderingInfo.bPBO">
            Indicates if Pixel Buffer Object is supported  
        </member>
        <member name="F:LadybugAPI.LadybugImageRenderingInfo.bFBO">
            Indicates if Frame Buffer Object is supported 
        </member>
        <member name="F:LadybugAPI.LadybugImageRenderingInfo.uiMaxTextureSize">
            OpenGL max texture width or height 
        </member>
        <member name="F:LadybugAPI.LadybugImageRenderingInfo.uiMaxViewPortWidth">
            OpenGL max view port width 
        </member>
        <member name="F:LadybugAPI.LadybugImageRenderingInfo.uiMaxViewPortHeight">
            OpenGL max view port height 
        </member>
        <member name="F:LadybugAPI.LadybugImageRenderingInfo.uiMaxRenderbufferSize">
            OpenGL max render buffer size 
        </member>
        <member name="F:LadybugAPI.LadybugImageRenderingInfo.pszOpenGLVendor">
            The company responsible for this OpenGL implementation. 
        </member>
        <member name="F:LadybugAPI.LadybugImageRenderingInfo.pszOpenGLRenderer">
            The name of the OpenGL renderer of the hardware platform 
        </member>
        <member name="F:LadybugAPI.LadybugImageRenderingInfo.bPBuffer">
            Indicates if pixel buffer is supported  
        </member>
        <member name="T:LadybugAPI.LadybugSensorType">
            The type of sensor. 
        </member>
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugSensorType.HUMIDITY" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugSensorType.BAROMETER" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugSensorType.COMPASS" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugSensorType.ACCELEROMETER" -->
        <!-- Badly formed XML comment ignored for member "F:LadybugAPI.LadybugSensorType.GYROSCOPE" -->
        <member name="T:LadybugAPI.LadybugSensorInfo">
            Information about a given sensor. 
        </member>
        <member name="F:LadybugAPI.LadybugSensorInfo.isSupported">
            Whether the sensor is supported by the current camera. 
        </member>
        <member name="F:LadybugAPI.LadybugSensorInfo.min">
            The minimum value of the sensor. 
        </member>
        <member name="F:LadybugAPI.LadybugSensorInfo.max">
            The maximum value of the sensor. 
        </member>
        <member name="F:LadybugAPI.LadybugSensorInfo.units">
            Textual representation of the sensor units. 
        </member>
        <member name="F:LadybugAPI.LadybugSensorInfo.unitsAbbr">
            Abbreviated textual representation of the sensor units. 
        </member>
        <member name="T:LadybugAPI.LadybugStreamHeadInfo">
             Ladybug stream file header format.
            
             The stream file data sequence is detailed below:
             - File signature ( "PGRLADYBUGSTREAM" )
             - Stream Header ( LadybugStreamHeadInfo )
             - Camera Configuration Data
             - Image 1 Data
             - Image 2 Data
             - ...
             - Image N Data
             - GPS Summary Data
            
             For ulOffsetTable, the offset value is relative to the beginning of the
             stream file.
            
             For example, if ulIncrement=50,
             ulOffsetTable[ 512 ] is the location of the first image.
             ulOffsetTable[ 512 - 1] is the location of the 51st image,
             ulOffsetTable[ 512 - 2] is the location of the 101st image and so on.
            
             For detailed information about Ladybug stream file format,
             see the topic 'Stream File Format' in the SDK Help.
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.ulLadybugStreamVersion">
            Ladybug stream file version number. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.ulFrameRate">
            The compressor frame rate. Use the new frameRate entry below for any
            stream files with ulLadybugStreamVersion >= 7.
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.serialBase">
            Base unit serial number for the Ladybug2 camera or ealier model.
            For the Ladybug3 camera, it is assigned the same number as serialHead. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.serialHead">
            Camera serial number. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.reserved">
            Reserved. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.ulPaddingSize">
            The size of the padding data block at the end of each recorded image.
            The padding block is added for each image so that the total size of 
            the recorded image data is in integer multiples of the hard disk's sector
            size. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.dataFormat">
            Data format of the image. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.resolution">
            The resolution of the image. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.stippledFormat">
            The Bayer pattern of the stream. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.ulConfigrationDataSize">
            The size of the configuration data in bytes. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.ulNumberOfImages">
            The number of images stored in the stream file. (Not the number of the entire stream.) 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.ulNumberOfKeyIndex">
            Number of index entries of ulOffsetTable[] used in the stream file. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.ulIncrement">
            Incremental interval value for the indices. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.ulStreamDataOffset">
            Offset of the first image data. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.ulGPSDataOffset">
            Offset of the GPS summary data block. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.ulGPSDataSize">
            Size in bytes of the GPS data block. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.ulFrameHeaderSize">
            Size of internal frame header. 
            Frame headers are always a multiple of the sector size during recording.
            0 means a frame header is not present. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.isHumidityAvailable">
            Whether humidity readings are available for this stream. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.humidityMin">
            Minimum value of humidity sensor. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.humidityMax">
            Maximum value of humidity sensor. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.isAirPressureAvailable">
            Whether air pressure readings are available for this stream. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.airPressureMin">
            Minimum value of air pressure sensor. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.airPressureMax">
            Maximum value of air pressure sensor. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.isCompassAvailable">
            Whether compass readings are available for this stream. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.compassMin">
            Minimum value of compass sensor. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.compassMax">
            Maximum value of compass sensor. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.isAccelerometerAvailable">
            Whether accelerometer readings are available for this stream. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.accelerometerMin">
            Minimum value of accelerometer sensor. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.accelerometerMax">
            Maximum value of accelerometer sensor. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.isGyroscopeAvailable">
            Whether gyroscope readings are available for this stream. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.gyroscopeMin">
            Minimum value of gyroscope sensor. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.gyroscopeMax">
            Maximum value of gyroscope sensor. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.frameRate">
            Actual frame rate, represented as a floating point value. 
            This represents the actual frame rate as compared to ulFrameRate,
            which does not handle non-integer frame rates like 3.75 fps.
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.reservedSpace">
            Reserved. 
        </member>
        <member name="F:LadybugAPI.LadybugStreamHeadInfo.ulOffsetTable">
            Image offset index table. 
        </member>
        <member name="T:LadybugAPI.LadybugGPSFileType">
             Ladybug stream file GPS data output file type.
            
             This structure defines the types of output for
             ladybugWriteGPSSummaryDataToFile().
        </member>
        <member name="F:LadybugAPI.LadybugGPSFileType.LADYBUG_GPS_TXT">
            Text file. 
        </member>
        <member name="F:LadybugAPI.LadybugGPSFileType.LADYBUG_GPS_HTML">
            HTML file. 
        </member>
        <member name="F:LadybugAPI.LadybugGPSFileType.LADYBUG_GPS_KML">
            KML File. 
        </member>
        <member name="F:LadybugAPI.LadybugGPSFileType.LADYBUG_GPS_FILE_TYPE_FORCE_QUADLET">
            Unused member to force this enumeration to compile to 32 bits. 
        </member>
        <member name="T:LadybugAPI.LadybugH264Option">
            Options for saving H.264 files. 
        </member>
        <member name="F:LadybugAPI.LadybugH264Option.frameRate">
            Frame rate of the stream 
        </member>
        <member name="F:LadybugAPI.LadybugH264Option.width">
            Width of source image 
        </member>
        <member name="F:LadybugAPI.LadybugH264Option.height">
            Height of source image 
        </member>
        <member name="F:LadybugAPI.LadybugH264Option.bitrate">
            Bitrate to encode at 
        </member>
        <member name="F:LadybugAPI.LadybugH264Option.reserved">
            Reserved for future use 
        </member>
        <member name="T:LadybugAPI.CameraGUIType">
               Type of PGRCameraGUI settings dialog to display.
            
             Remarks:
               This enum will be deprecated in the next version.  Please use the
               SDK-specific .LIB and .DLL (see note above) and the new
               pgrcamguiInitializeSettingsDialog() instead of pgrcamguiCreateSettingsDialog().
        </member>
        <member name="F:LadybugAPI.CameraGUIType.PGRCAMGUI_TYPE_PGRFLYCAPTURE">
            PGRFlyCapture settings. 
        </member>
        <member name="F:LadybugAPI.CameraGUIType.PGRCAMGUI_TYPE_DIGICLOPS">
            Digiclops Settings. 
        </member>
        <member name="F:LadybugAPI.CameraGUIType.PGRCAMGUI_TYPE_LADYBUG">
            Ladybug settings. 
        </member>
        <member name="M:LadybugAPI.CameraGUI.CreateContext(System.IntPtr@)">
                
                Allocates a PGRCameraGUI handle to be used in all successive calls.
                This function must be called before any other functions.
            
             @param    context - a pointer to a PGRCameraGUI context to be created.
                      
             @return    PGRCAMGUI_OK - upon successful completion.
        </member>
        <member name="M:LadybugAPI.CameraGUI.DestroyContext(System.IntPtr)">
                
                Frees memory associated with a given context.
            
             @param    context - context to destroy.
            
             @return    PGRCAMGUI_OK - upon successful completion.
                PGRCAMGUI_INVALID_CONTEXT - if context is null.
        </member>
        <member name="M:LadybugAPI.CameraGUI.ShowCameraSelectionModal(System.IntPtr,System.IntPtr,System.Int32@,System.Int32@)">
                
                Displays the camera selection dialog.
            
             @param    context           - The PGRCameraGUI context to access.
             @param    camcontext        - The SDK-specific context to use, casted appropriately.
                                    (ie, FlycaptureContext, DigiclopsContext, etc.)
             @param    pulSerialNumber   - Pointer to the returned serial number of the selected
                                    camera.
             @param    pipDialogStatus   - Status returned from the DoModal() call from the dialog.
                                    Use this to check for "Ok" or "Cancel."
            
             @return    PGRCAMGUI_OK - upon successful completion.
                PGRCAMGUI_FAILED - if the function failed.
                PGRCAMGUI_INVALID_CONTEXT - if context is NULL.
        </member>
        <member name="M:LadybugAPI.CameraGUI.InitializeSettingsDialog(System.IntPtr,System.IntPtr)">
                
                Creates the settings dialog.  Call this before calling the either of the
                other two functions dealing with the Settings dialog.
            
             @param    context     - The PGRCameraGUI context to access.
             @param   camcontext  - The SDK-level context to use.
            
             @return    PGRCAMGUI_OK - upon successful completion.
                PGRCAMGUI_FAILED - if the function failed.
                PGRCAMGUI_INVALID_CONTEXT - if context is null.
        </member>
        <member name="M:LadybugAPI.CameraGUI.ToggleSettingsWindowState(System.IntPtr,System.IntPtr)">
                
                Displays or hides the modeless settings dialog.
            
             @param    context     - The PGRCameraGUI context to access.
             @param   hwndParent  - Handle to the parent window.
            
             @return    PGRCAMGUI_OK - upon successful completion.
                PGRCAMGUI_FAILED - if the function failed.
                PGRCAMGUI_INVALID_CONTEXT - if context is null.
        </member>
        <member name="M:LadybugAPI.CameraGUI.GetSettingsWindowStat(System.IntPtr,System.Boolean@)">
                
                Retrieves the state of the settings dialog.
            
             @param    context     - The PGRCameraGUI context to access.
             @param   showing   - A pointer to the returned state of the settings dialog.
            
             @return    PGRCAMGUI_OK - upon successful completion.
                PGRCAMGUI_FAILED - if the function failed.
                PGRCAMGUI_INVALID_CONTEXT - if context is null.
        </member>
    </members>
</doc>
